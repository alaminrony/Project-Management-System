{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/ErrorBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///./charts.js"],"names":["DateAxisBreak_DateAxisBreak","_super","DateAxisBreak","_this","call","this","className","applyTheme","tslib_es6","Object","defineProperty","prototype","getPropertyValue","value","setPropertyValue","startValue","getTime","axis","invalidate","invalidateSeries","endValue","ValueAxisBreak","Registry","registeredClasses","DateAxis_DateAxisDataItem","DateAxisDataItem","values","date","endDate","dates","setDate","ValueAxis","DateAxis_DateAxis","DateAxis","gridIntervals","List","dateFormats","Dictionary","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minDifference","snapTooltip","pushAll","axisFieldName","fillRule","dataItem","component","gridInterval","_gridInterval","gridDuration","Time","Math","round","min","axisFill","__disabled","applyInternalDefaults","hasKey","setKey","language","translate","createDataItem","createAxisBreak","validateDataItems","start","end","periodCount","max","baseDuration","maxZoomFactor","zoom","handleSelectionExtremesChange","calculateZoom","chooseInterval","adjustDifference","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","getFirstWeekDay","dateFormatter","utc","_nextGridUnit","_intervalDuration","ceil","_difference","floor","Iterator","series","iterator","baseAxis","field_1","getAxisField","startIndex","dataItems","findClosestIndex","x","maxZoomed","endIndex","validateData","Type","minDifference","Number","MAX_VALUE","each","uid","seriesDataChangeUpdate","postProcessSeriesDataItems","JSON","stringify","_baseInterval","postProcessSeriesDataItem","addEmptyUnitsBreaks","dataItemsByAxis","getKey","utils_Object","key","time","getDate","startTime","setCalculatedValue","toString","skipEmptyPeriods","axisBreaks","clear","axisBreak","this_1","startTimeStr","undefined","create","startDate","fixAxisBreaks","length","breakGridCount","endPosition","startPosition","adjustedEndValue","adjustedStartValue","gridDate","firstDayOfWeek","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","isInBreak","durationBreaksRemoved","getBreaklessDate","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","resetIterators","this_2","format","markUnitChange","text","find","appendDataItem","validateDataElement","renderer_1","renderer","breakSize","timeUnit_1","intervalCount_1","utils_Math","startPoint","endPoint","minGridDistance","prevGridDate_1","timestamp_1","text_1","moveValue","adjustedMax","endTimestamp","position","valueToPosition","fillEndPosition","isRange","tick","disabled","updateTickElement","grid","updateGridElement","fill","updateFillElement","mask","label","location_1","location","updateLabelElement","adjustMinMax","step","fixMin","startLocation","fixMax","endLocation","index","duration","gridCount","getIndex","intervalDuration","lastIndex","formatLabel","dateToPosition","anyToPosition","dateToPoint","point","positionToPoint","angle","positionToAngle","y","anyToPoint","valueToPoint","positionToDate","positionToValue","getX","getTimeByLocation","baseValue","getY","stack","getValue","getAngle","stackKey","workingLocations","endTime","processSeriesDataItem","axisLetter","openTime","openDate","prevSeriesTime","_prevSeriesTime","difference","abs","differece","updateAxisBySeries","timeInterval","invalidateData","breakTemplate","template","startLine","endLine","fillShape","getTooltipText","tooltipDateFormat","dateFormat","getPositionLabel","adapter","apply","roundPosition","getCellStartPosition","getCellEndPosition","getSeriesDataItem","findNearest","key_1","getCurrentLabelFormat","initRenderer","ticks","labels","baseGrid","zoomToDates","skipRangeEvent","instantly","parse","zoomToValues","asIs","field","copyFrom","source","showTooltipAtPosition","local","toAxisPosition","closestDate_1","actualTime_1","xAxis","dateX","yAxis","dateY","closestTime_1","tooltipLocation","seriesPoints_1","showTooltipAtDataItem","push","tooltipText","hideTooltip","chart","sortSeriesTooltips","makeGap","previous","connect","autoGapCount","CategoryAxisBreak_CategoryAxisBreak","CategoryAxisBreak","indexToPosition","invalidateDataItems","category","categoryToIndex","AxisBreak","CategoryAxis_CategoryAxisDataItem","CategoryAxisDataItem","Adapter","locations","endCategory","isEnabled","properties","setProperty","Axis","CategoryAxis_CategoryAxis","CategoryAxis","dataItemsByCategory","_lastDataItem","_disposers","validateDataRange","_series","invalidateDataRange","firstSeriesDataItem","lastSeriesDataItem","positionToIndex","i","fdi","getFirstSeriesDataItem","ldi","getLastSeriesDataItem","validate","dataCount","invalid","maxCount","axisLength","frequency","_startIndex","_endIndex","_frequency","itemIndex","len","frequency_1","itemIndex_1","b","validateBreaks","validateAxisRanges","ghostLabel","invalidateLayout","fillEndIndex","fillPosition","measuredWidth","measuredHeight","currentText","disposeData","processDataItem","dataContext","getDataItem","dataFields","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","categoryX","categoryY","index_1","sdi_1","category_1","seriesDataItem","categories","basePoint","breakStartPosition","breakEndPosition","breakPosition","XYSeries_XYSeriesDataItem","XYSeriesDataItem","valueX","valueY","openValueX","openValueY","openDateX","openDateY","setLocation","setValue","setCategory","openCategoryX","openCategoryY","getMin","fields","working","stackValue","utils_Array","getWorkingValue","getMax","Series","XYSeries_XYSeries","XYSeries","_xAxis","Disposer","_yAxis","_xValueFields","_yValueFields","isMeasured","cursorTooltipEnabled","cursorHoverEnabled","mainContainer","Sprite","setElement","paper","add","stacked","tooltip","pointerOrientation","events","on","returnBulletDefaultState","readerTitle","dataChangeUpdate","_tmin","_tmax","_smin","_smax","defineFields","data","updateItemReaderText","_xField","_yField","Error","name","disable","enable","setInitialWorkingValues","e","_chart","raiseCriticalError","dataItemsX","dataItemsY","xAxisFieldName","xField","xOpenField","Utils","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","axisRanges","range","fillPath","path","Path","width","height","dataRangeInvalid","pixelY","pixelX","_showBullets","minBulletDistance","get","xAxes","oldAxis","removeKey","dispose","removeValue","set","registerSeries","yAxes","_baseAxis","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","stackedSeries","dispatchImmediately","appeared","_prevTooltipDataItem","xPosition","yPosition","visible","isHiding","isShowing","updateLegendValue","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","type","target","_a","sprites","_b","next","done","sprite","parent","isHidden","isHover","showTooltip","isDisposed","positionBullet","bullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","locationX","locationY","moveTo","bulletLocation","show","anim","delay","interpolationDuration","defaultState","transitionDuration","a","sequencedInterpolation","sequencedInterpolationDelay","animation","isFinished","hide","minZoomed","hiddenState","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","backwards","prevSeries","prevDataItem","prevValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","processConfig","config","map","processingErrors","xKey","yKey","stackKeyX","stackKeyY","val","itemReaderText","Cursor_Cursor","Cursor","_stick","Percent","shouldClone","trackable","clickable","interaction","Interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","event","interactionsEnabled","_generalBehavior","downPoint","isLocalElement","pointer","svg","_stickPoint","fitsToBounds","triggerMove","hideReal","stick","triggerMoveReal","invalidatePosition","getPositions","dispatch","triggerDown","triggerDownReal","setGlobalStyle","Mouse","grabbing","triggerUp","triggerUpReal","updatePoint","upPoint","_upPointOrig","_downPointOrig","getHitOption","interactions","default","updateSelection","innerWidth","innerHeight","cancelable","shouldPreventGestures","preventDefault","plotContainer","lockElement","Container","XYCursor_XYCursor","XYCursor","_lineX","_lineY","behavior","maxPanOut","interfaceColors","InterfaceColorSet","selection","createChild","fillOpacity","getFor","lineX","stroke","Color","strokeDasharray","strokeOpacity","lineY","updateSize","_usesSelection","w","_positionPrecision","h","pixelHeight","pixelWidth","validatePosition","fixPoint","snapToSeries","updateLinePositions","getPanningRanges","selectionX","selectionY","getRanges","startX","startY","deltaX","deltaY","xRange","yRange","endX","endY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","reset","_selection","element","_snapToDisposer","handleSnap","opposite","xx","yy","animationDuration","easing","animationEasing","animate","property","to","XYChartScrollbar_XYChartScrollbar","XYChartScrollbar","padding","scrollbarChart","XYChart_XYChart","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","toBack","_unselectedOverlay","background","cornerRadius","thumbBackground","thumb","hoverState","states","downState","handleSeriesAdded","handleSeriesRemoved","sourceSeries","newValue","zoomOutButton","addXAxis","addYAxis","clone","title","rangeChangeDuration","id","inside","line","minLabelPosition","maxLabelPosition","axisFills","showOnInit","zoomOutAxes","filters","DesaturateFilter","updateByOrientation","orientation","clonedFrom","oldValue","off","handleDataChanged","dataProvider","updateThumb","Scrollbar","XYChart_XYChartDataItem","XYChartDataItem","SerialChart","XYChart","_axisRendererX","AxisRendererX","_axisRendererY","AxisRendererY","maskBullets","arrangeTooltips","chartContainer","layout","topAxesCont","zIndex","topAxesContainer","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","updateXAxesMargins","leftAxesContainer","plotCont","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","bulletsContainer","ZoomOutButton","align","valign","MAX_SAFE_INTEGER","marginTop","marginRight","_bulletMask","exportable","draw","toFront","updateSeriesLegend","updatePlotElements","_parseDataFrom","leftAxesWidth","rightAxesWidth","paddingLeft","paddingRight","handleXAxisChange","updateXAxis","handleYAxisChange","updateYAxis","processXAxis","observe","handleXAxisRangeChange","processAxis","processYAxis","handleYAxisRangeChange","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","seriesAppeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","processRenderer","_dataUsers","gridContainer","breakContainer","addDisposer","dataUsers","inited","_xAxes","handleAxisRemoval","autoDispose","_yAxes","removeFromInvalidComponents","dataInvalid","colors","_cursor","cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","createCursor","showSeriesTooltip","exceptAxis","showAxisTooltip","hideObjectTooltip","seriesPoints","setBounds","topLeft","bottomRight","sum","filteredSeriesPoints","seriesPoint","sort","averageY","svgContainer","SVGContainer","top_1","bottom","dropped","nextHeight","pointY","pixelMarginTop","nextY","pixelMarginBottom","except","getUpdatedRange","priority","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","panStartRange","axisRange","newStart","newEnd","newRange","_scrollbarX","startGrip","endGrip","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","declination","realRange","diff","handleWheel","svgPoint","htmlContainer","cssScale","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","maxWidth","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","configOrder","createSeries","_zoomOutButton","button","addData","rawDataItem","removeCount","Responsive","relevant","maybeXS","state","stateId","LineSeriesSegment_LineSeriesSegment","LineSeriesSegment","fillSprite","strokeSprite","drawSegment","points","closePoints","smoothnessX","smoothnessY","Smoothing","smooth","lineElement","fillElement","LineSeries_LineSeriesDataItem","LineSeriesDataItem","LineSeries_LineSeries","LineSeries","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","tensionX","tensionY","segmentsContainer","previousDataItem","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","segment","tooltipColorSource","openSegmentWrapper","_adjustedStartIndex","sliceData","findAdjustedIndex","_workingStartIndex","_workingEndIndex","adjustedIndex","propertyFields","openIndex","params","openSegment","addToClose","closeIndex","propertiesChanged","getFirst","contents","hasProperties","updateSegmentProperties","addPoints","closeSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","Line","x2","Rectangle","legendDataItem","color","colorOrig","bullets","copyToLegendMarker","hasLabels_1","children","child","Label","RadarSeries_RadarSeriesDataItem","RadarSeriesDataItem","RadarSeries_RadarSeries","RadarSeries","connectEnds","radius","startAngle","endAngle","pixelRadius","pixelInnerRadius","unshift","RadarCursor_RadarCursor","RadarCursor","innerRadius","truePixelRadius","updateLineX","updateLineY","fillStartAngle","arc","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","sin","cos","upAngle","upRadius","setPercentProperty","innerRadiusModifyer","AxisFillCircular_AxisFillCircular","AxisFillCircular","AxisFill","GridCircular_GridCircular","GridCircular","pixelPerfect","Grid","AxisRendererCircular_AxisRendererCircular","AxisRendererCircular","pixelRadiusReal","useChartAngles","setAxis","atan2","PI","coordinate","positionToCoordinate","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","fixPosition","invalidateAxisItems","createGrid","createFill","createLabel","AxisLabelCircular","pointToPosition","coordinateToPosition","AxisRenderer","AxisRendererRadial_AxisRendererRadial","AxisRendererRadial","gridType","axisAngle","horizontalCenter","verticalCenter","rotation","gridLocation","count_1","cellEndLocation","positionItem","updateBaseGridElement","count_2","updateBreakElement","createBreakSprites","WavedCircle","updateTooltip","tooltipOrientation","bigNum","axisFullLength","RadarChart_RadarChartDataItem","RadarChartDataItem","RadarChart_RadarChart","RadarChart","radarContainer","Circle","opacity","beforeDraw","rect","innerRect","wr","hr","mr","maxRadius","diameter","_pixelInnerRadius","definedBBox","ClockHand_ClockHand","ClockHand","_axis","pin","startWidth","endWidth","hand","Trapezoid","leftSide","rightSide","x0","x1","_pin","_hand","showValue","_value","newAngle","currentAngle","rotationDirection","updateValue","GaugeChart_GaugeChartDataItem","GaugeChartDataItem","GaugeChart_GaugeChart","GaugeChart","hands","processHand","PieSeries3D_PieSeries3DDataItem","PieSeries3DDataItem","depthValue","PieSeries","PieSeries3D_PieSeries3D","PieSeries3D","createSlice","Slice3D","slice","depth","depthPercent","percent","PieChart3D_PieChart3DDataItem","PieChart3DDataItem","PieChart","PieChart3D_PieChart3D","PieChart3D","invalidateDataUsers","SlicedChart_SlicedChartDataItem","SlicedChartDataItem","PercentChart","SlicedChart_SlicedChart","SlicedChart","ChordNode_ChordNode","ChordNode","updateRotation","Slice","setStateOnChildren","ix","iy","invalidateLinks","total","arc_1","sliceStartAngle_1","Bullet","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","_outgoingSorted","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","dx","dy","FlowDiagramNode","QuadraticCurve_QuadraticCurve","QuadraticCurve","y1","y2","cpx","cpy","p1","p2","cp","d","point1","point2","ChordLink_ChordLink","ChordLink","middleLine","isTemplate","fromX","fromY","toX","toY","bulletsMask","mAngle1","mAngle2","positionBullets","FlowDiagramLink","ChordDiagram_ChordDiagramDataItem","ChordDiagramDataItem","FlowDiagram","ChordDiagram_ChordDiagram","ChordDiagram","nodePadding","chordContainer","nodesContainer","newTotal","_sorted","strNode","node","getNodeValue","minNodeSize","links","createNode","createLink","ColumnSeries_ColumnSeriesDataItem","ColumnSeriesDataItem","_column","column","setColumn","addSprite","columns","_rangesColumns","ColumnSeries_ColumnSeries","ColumnSeries","_startLocation","_endLocation","clustered","columnsContainer","_columnsContainer","baseAxisSeries","clusterCount","cellStartLocation","disableUnusedColumns","validateDataElementReal","getStartLocation","simplifiedProcessing","getEndLocation","l","r","t","percentHeight","pixelPaddingLeft","pixelPaddingRight","paddingTop","pixelPaddingTop","paddingBottom","pixelPaddingBottom","outOfBounds","offset","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","axisLenght","rightLocation","leftLocation","column_1","itemsFocusable","role","focusable","once","ev","populateString","realX","realY","realWidth","realHeight","virtualParent","setColumnStates","rangeColumn","rangesColumns","itemWidth","itemHeight","open_1","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","_columns","createColumnTemplate","Column","fromOpenState_1","fromPreviousState_1","removeChildren","RoundedRectangle","TreeMapSeries_TreeMapSeriesDataItem","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","TreeMapSeries_TreeMapSeries","TreeMapSeries","configField","showReal","TreeMap_TreeMapDataItem","TreeMapDataItem","rows","y0","hasChildren","getDuration","childValue","level","TreeMap_TreeMap","TreeMap","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","ColorSet","sorting","strictMinMax","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","_updateDataItemIndexes","_tempSeries","navigationData","parentDataItem","initSeries","reverse","createTreeSeriesReal","remove","cursorOverStyle","zoomToSeriesDataItem","toggleBullets","currentlyZoomed","rangeChangeAnimation","_dataDisposers","binaryTree","dice","sliceDice","validateLayout","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","handleDataItemValueChange","feedLegend","legend","legendData_1","hiddenInLegend","AxisRendererX3D_AxisRendererX3D","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D_AxisRendererY3D","AxisRendererY3D","getWidth","ColumnSeries3D_ColumnSeries3DDataItem","ColumnSeries3DDataItem","ColumnSeries3D_ColumnSeries3D","ColumnSeries3D","column3D","Column3D","XYChart3D_XYChart3DDataItem","XYChart3DDataItem","XYChart3D_XYChart3D","XYChart3D","fixLayout","fixColumns","depthIndex","s","i_1","maskColumns","Candlestick_Candlestick","Candlestick","createAssets","lowLine","highLine","CandlestickSeries_CandlestickSeriesDataItem","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries_CandlestickSeries","CandlestickSeries","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","lowLine_1","highLine_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC_OHLC","OHLC","openLine","highLowLine","closeLine","OHLCSeries_OHLCSeriesDataItem","OHLCSeriesDataItem","OHLCSeries_OHLCSeries","OHLCSeries","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesSegment_StepLineSeriesSegment","StepLineSeriesSegment","noRisers","vertical","StepLineSeries_StepLineSeriesDataItem","StepLineSeriesDataItem","StepLineSeries_StepLineSeries","StepLineSeries","prevPoint","point0","RadarColumn_RadarColumn","RadarColumn","radarColumn","getTooltipX","getTooltipY","RadarColumnSeries_RadarColumnSeriesDataItem","RadarColumnSeriesDataItem","RadarColumnSeries_RadarColumnSeries","RadarColumnSeries","lAngle","rAngle","tRadius","bRadius","cellAngle","temp","PyramidSeries_PyramidSeriesDataItem","PyramidSeriesDataItem","FunnelSeries","PyramidSeries_PyramidSeries","PyramidSeries","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","_nextWidth","getNextValue","nextValue","slicesContainer","relValue","sliceLink","_pyramidHeight","_pyramidWidth","labelsContainer","ticksContainer","decorateSlice","pyramidWidth","linkWidth","linkHeight","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","_nextY","alignLabels","sliceWidth","PictorialStackedSeries_PictorialStackedSeriesDataItem","PictorialStackedSeriesDataItem","PictorialStackedSeries_PictorialStackedSeries","PictorialStackedSeries","_maskSprite","maskSprite","pictureWidth","scale","pictureHeight","newWidth","newHeight","slices","initSlice","hs","expandDistance","ConeColumn_ConeColumn","ConeColumn","coneColumn","Cone","ConeSeries_ConeSeriesDataItem","ConeSeriesDataItem","ConeSeries_ConeSeries","ConeSeries","radiusY","CurvedColumn_CurvedColumn","CurvedColumn","curvedColumn","tension","CurvedColumnSeries_CurvedColumnSeriesDataItem","CurvedColumnSeriesDataItem","CurvedColumnSeries_CurvedColumnSeries","CurvedColumnSeries","DurationAxis_DurationAxisDataItem","DurationAxisDataItem","DurationAxis_DurationAxis","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet_CircleBullet","CircleBullet","circle","ErrorBullet_ErrorBullet","ErrorBullet","errorLine","isDynamic","NavigationBar_NavigationBarDataItem","NavigationBarDataItem","DataItem","NavigationBar_NavigationBar","NavigationBar","textLink","TextLink","_linksIterator","triangle","Triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","Component","window","am4charts","charts_namespaceObject"],"mappings":";;;;;;;;;;;;;;;;;;;+vLA0EAA,EAAA,SAAAC,GAyCC,SAAAC,IAAA,IAAAC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,gBACjBH,EAAKI,eA+CP,OA3FmCC,EAAA,EAAAN,EAAAD,GAoDlCQ,OAAAC,eAAWR,EAAAS,UAAA,iBAaX,WACC,OAAON,KAAKO,iBAAiB,kBAd9B,SAAqBC,GAChBR,KAAKS,iBAAiB,YAAaD,KACtCR,KAAKU,WAAaF,EAAMG,UACpBX,KAAKY,OACRZ,KAAKY,KAAKC,aACVb,KAAKY,KAAKE,sDAiBbV,OAAAC,eAAWR,EAAAS,UAAA,eAaX,WACC,OAAON,KAAKO,iBAAiB,gBAd9B,SAAmBC,GACdR,KAAKS,iBAAiB,UAAWD,KACpCR,KAAKe,SAAWP,EAAMG,UAClBX,KAAKY,OACRZ,KAAKY,KAAKC,aACVb,KAAKY,KAAKE,sDAYdjB,EA3FA,CAAmCmB,EAAA,GAmGnCC,EAAA,EAASC,kBAAiC,cAAIvB,kEC/H9CwB,EAAA,SAAAvB,GAUC,SAAAwB,IAAA,IAAAtB,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,mBACjBH,EAAKI,aAELJ,EAAKuB,OAAOC,QACZxB,EAAKuB,OAAOE,aAsCd,OAtDsCpB,EAAA,EAAAiB,EAAAxB,GAwBrCQ,OAAAC,eAAWe,EAAAd,UAAA,YAQX,WACC,OAAON,KAAKwB,MAAY,UATzB,SAAgBF,GACftB,KAAKyB,QAAQ,OAAQH,GACrBtB,KAAKQ,MAAQc,EAAKX,2CAgBnBP,OAAAC,eAAWe,EAAAd,UAAA,eAQX,WACC,OAAON,KAAKwB,MAAe,aAT5B,SAAmBF,GAClBtB,KAAKyB,QAAQ,UAAWH,GACxBtB,KAAKe,SAAWO,EAAKX,2CAUvBS,EAtDA,CAAsCM,EAAA,GAoKtCC,EAAA,SAAA/B,GA6MC,SAAAgC,IAAA,IAAA9B,EAGCF,EAAAG,KAAAC,OAAOA,YA/HDF,EAAA+B,cAAqC,IAAIC,EAAA,EA4BzChC,EAAAiC,YAA4C,IAAIC,EAAA,EAqBhDlC,EAAAmC,wBAAwD,IAAID,EAAA,EAoCzDlC,EAAAoC,mBAAqCC,SAAU,MAAOC,MAAO,GAW7DtC,EAAAuC,kBAgCTvC,EAAKG,UAAY,WAEjBH,EAAKW,iBAAiB,kBAAkB,GACxCX,EAAKwC,aAAc,EAMnBxC,EAAK+B,cAAcU,UAChBJ,SAAU,cAAeC,MAAO,IAChCD,SAAU,cAAeC,MAAO,IAChCD,SAAU,cAAeC,MAAO,KAChCD,SAAU,cAAeC,MAAO,KAChCD,SAAU,cAAeC,MAAO,MAChCD,SAAU,cAAeC,MAAO,MAChCD,SAAU,SAAUC,MAAO,IAC3BD,SAAU,SAAUC,MAAO,IAC3BD,SAAU,SAAUC,MAAO,KAC3BD,SAAU,SAAUC,MAAO,KAC3BD,SAAU,SAAUC,MAAO,IAC3BD,SAAU,SAAUC,MAAO,IAC3BD,SAAU,SAAUC,MAAO,KAC3BD,SAAU,SAAUC,MAAO,KAC3BD,SAAU,SAAUC,MAAO,KAC3BD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,KACzBD,SAAU,MAAOC,MAAO,IACxBD,SAAU,MAAOC,MAAO,IACxBD,SAAU,MAAOC,MAAO,IACxBD,SAAU,MAAOC,MAAO,IACxBD,SAAU,MAAOC,MAAO,IACxBD,SAAU,OAAQC,MAAO,IACzBD,SAAU,QAASC,MAAO,IAC1BD,SAAU,QAASC,MAAO,IAC1BD,SAAU,QAASC,MAAO,IAC1BD,SAAU,QAASC,MAAO,IAC1BD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,IACzBD,SAAU,OAAQC,MAAO,KACzBD,SAAU,OAAQC,MAAO,KACzBD,SAAU,OAAQC,MAAO,MACzBD,SAAU,OAAQC,MAAO,MACzBD,SAAU,OAAQC,MAAO,MACzBD,SAAU,OAAQC,MAAO,MACzBD,SAAU,OAAQC,MAAO,MACzBD,SAAU,OAAQC,MAAO,MACzBD,SAAU,OAAQC,MAAO,MACzBD,SAAU,OAAQC,MAAO,OAI5BtC,EAAK0C,cAAgB,OAGrB1C,EAAKI,eA65CP,OAxqDqEC,EAAA,EAAAyB,EAAAhC,GA4L7DgC,EAAAtB,UAAAmC,SAAP,SAAgBC,GACf,IAAIlC,EAAQkC,EAASlC,MACjBI,EAAO8B,EAASC,UAChBC,EAAehC,EAAKiC,cACpBC,EAAeC,EAAA,YAAkBH,EAAaT,SAAUS,EAAaR,OAErEY,KAAKC,OAAOzC,EAAQI,EAAKsC,KAAOJ,GAAgB,GAAKE,KAAKC,MAAMD,KAAKC,OAAOzC,EAAQI,EAAKsC,KAAOJ,GAAgB,GACnHJ,EAASS,SAASC,YAAa,EAG/BV,EAASS,SAASC,YAAa,GA6EvBxB,EAAAtB,UAAA+C,sBAAV,WACCzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MAGtBA,KAAK+B,YAAYuB,OAAO,gBAC5BtD,KAAK+B,YAAYwB,OAAO,cAAevD,KAAKwD,SAASC,UAAU,sBAE3DzD,KAAK+B,YAAYuB,OAAO,WAC5BtD,KAAK+B,YAAYwB,OAAO,SAAUvD,KAAKwD,SAASC,UAAU,iBAEtDzD,KAAK+B,YAAYuB,OAAO,WAC5BtD,KAAK+B,YAAYwB,OAAO,SAAUvD,KAAKwD,SAASC,UAAU,iBAEtDzD,KAAK+B,YAAYuB,OAAO,SAC5BtD,KAAK+B,YAAYwB,OAAO,OAAQvD,KAAKwD,SAASC,UAAU,eAEpDzD,KAAK+B,YAAYuB,OAAO,QAC5BtD,KAAK+B,YAAYwB,OAAO,MAAOvD,KAAKwD,SAASC,UAAU,cAEnDzD,KAAK+B,YAAYuB,OAAO,SAC5BtD,KAAK+B,YAAYwB,OAAO,OAAQvD,KAAKwD,SAASC,UAAU,cAEpDzD,KAAK+B,YAAYuB,OAAO,UAC5BtD,KAAK+B,YAAYwB,OAAO,QAASvD,KAAKwD,SAASC,UAAU,gBAErDzD,KAAK+B,YAAYuB,OAAO,SAC5BtD,KAAK+B,YAAYwB,OAAO,OAAQvD,KAAKwD,SAASC,UAAU,eAGpDzD,KAAKiC,wBAAwBqB,OAAO,gBACxCtD,KAAKiC,wBAAwBsB,OAAO,cAAevD,KAAKwD,SAASC,UAAU,sBAEvEzD,KAAKiC,wBAAwBqB,OAAO,WACxCtD,KAAKiC,wBAAwBsB,OAAO,SAAUvD,KAAKwD,SAASC,UAAU,iBAElEzD,KAAKiC,wBAAwBqB,OAAO,WACxCtD,KAAKiC,wBAAwBsB,OAAO,SAAUvD,KAAKwD,SAASC,UAAU,iBAElEzD,KAAKiC,wBAAwBqB,OAAO,SACxCtD,KAAKiC,wBAAwBsB,OAAO,OAAQvD,KAAKwD,SAASC,UAAU,eAEhEzD,KAAKiC,wBAAwBqB,OAAO,QACxCtD,KAAKiC,wBAAwBsB,OAAO,MAAOvD,KAAKwD,SAASC,UAAU,cAE/DzD,KAAKiC,wBAAwBqB,OAAO,SACxCtD,KAAKiC,wBAAwBsB,OAAO,OAAQvD,KAAKwD,SAASC,UAAU,cAEhEzD,KAAKiC,wBAAwBqB,OAAO,UACxCtD,KAAKiC,wBAAwBsB,OAAO,QAASvD,KAAKwD,SAASC,UAAU,eAAiB,IAAMzD,KAAKwD,SAASC,UAAU,gBAW5G7B,EAAAtB,UAAAoD,eAAV,WACC,OAAO,IAAIvC,GAQFS,EAAAtB,UAAAqD,gBAAV,WACC,OAAO,IAAIhE,GAQLiC,EAAAtB,UAAAsD,kBAAP,WAEC,IAAIC,EAAgB7D,KAAK6D,MACrBC,EAAc9D,KAAK8D,IACnBC,GAAuB/D,KAAKgE,IAAMhE,KAAKkD,KAAOlD,KAAKiE,aAEvDrE,EAAAU,UAAMsD,kBAAiB7D,KAAAC,MAEvBA,KAAKkE,eAAiBlE,KAAKgE,IAAMhE,KAAKkD,KAAOlD,KAAKiE,aAIlDJ,IAAiBC,EAAMD,IAAU,EAAIE,IADP/D,KAAKgE,IAAMhE,KAAKkD,KAAOlD,KAAKiE,eAE1DjE,KAAKmE,MAAON,MAAOA,EAAOC,IAAKA,IAAO,GAAO,IASvClC,EAAAtB,UAAA8D,8BAAP,aASOxC,EAAAtB,UAAA+D,cAAP,eAAAvE,EAAAE,KACCJ,EAAAU,UAAM+D,cAAatE,KAAAC,MAEnB,IAAI4C,EAA8B5C,KAAKsE,eAAe,EAAGtE,KAAKuE,iBAAiBvE,KAAKwE,WAAYxE,KAAKyE,YAAazE,KAAK0E,YAEnH3B,EAAA,YAAkBH,EAAaT,SAAUS,EAAaR,OAASpC,KAAKiE,eACvErB,EAAezC,EAAA,KAAKH,KAAK2E,eAG1B3E,KAAK6C,cAAgBD,EAErB5C,KAAK4E,UAAY7B,EAAA,MAAY,IAAI8B,KAAK7E,KAAKkD,KAAMN,EAAaT,SAAUS,EAAaR,MAAOpC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KACvIhF,KAAKiF,cAAgBlC,EAAA,YAAkBH,EAAaT,UAGpDnC,KAAKkF,kBAAoBnC,EAAA,YAAkBH,EAAaT,SAAUS,EAAaR,OAC/E,IAAIA,EAAgBY,KAAKmC,KAAKnF,KAAKoF,YAAcpF,KAAKkF,mBACtD9C,EAAQY,KAAKqC,MAAMrF,KAAK6D,MAAQzB,GAAS,EAEzCW,EAAA,IAAU/C,KAAK4E,UAAWhC,EAAaT,SAAUC,EAAQQ,EAAaR,MAAOpC,KAAK+E,cAAcC,KAGhGM,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GACnC,GAAIA,EAAOE,UAAY3F,EAAM,CAC5B,IAAI4F,EAAgCH,EAAOI,aAAa7F,GAGpD8F,EAAqBL,EAAOM,UAAUC,iBAAiBhG,EAAK0E,WAAY,SAACuB,GAAM,OAAQA,EAAEL,IAAQ,QAEjGf,EAAe7E,EAAK6E,aACpBqB,EAAYjD,EAAA,IAAUA,EAAA,MAAY,IAAI8B,KAAK/E,EAAK2E,YAAaE,EAAaxC,SAAUwC,EAAavC,MAAOtC,EAAKgF,kBAAmBhF,EAAKiF,cAAcC,KAAML,EAAaxC,SAAUwC,EAAavC,MAAOtC,EAAKiF,cAAcC,KAAKrE,UAAY,EAExOsF,EAAmBV,EAAOM,UAAUC,iBAAiBE,EAAW,SAACD,GAAM,OAAQA,EAAEL,IAAQ,SAAW,EAExGH,EAAOK,WAAaA,EACpBL,EAAOU,SAAWA,MAUdrE,EAAAtB,UAAA4F,aAAP,WACCtG,EAAAU,UAAM4F,aAAYnG,KAAAC,MACbmG,EAAA,SAAenG,KAAK2E,aAAavC,SACrCpC,KAAK2E,aAAavC,MAAQ,IAO5BhC,OAAAC,eAAWuB,EAAAtB,UAAA,qBAAX,eAAAR,EAAAE,KACKoG,EAAgBC,OAAOC,UAW3B,OAVAtG,KAAKuF,OAAOgB,KAAK,SAAChB,GACba,EAAgBtG,EAAKuC,eAAekD,EAAOiB,OAC9CJ,EAAgBtG,EAAKuC,eAAekD,EAAOiB,QAIzCJ,GAAiBC,OAAOC,WAA8B,GAAjBF,IACxCA,EAAgBrD,EAAA,YAAkB,QAG5BqD,mCAUDxE,EAAAtB,UAAAmG,uBAAP,SAA8BlB,GAC7BvF,KAAKqC,eAAekD,EAAOiB,KAAOH,OAAOC,WASnC1E,EAAAtB,UAAAoG,2BAAP,eAAA5G,EAAAE,KACCA,KAAKuF,OAAOgB,KAAK,SAAChB,GACboB,KAAKC,UAAUrB,EAAOsB,cAAc/G,EAAK0G,OAASG,KAAKC,UAAU9G,EAAK6E,gBACzEY,EAAOM,UAAUU,KAAK,SAAC7D,GACtB5C,EAAKgH,0BAA0BpE,KAEhC6C,EAAOsB,cAAc/G,EAAK0G,KAAO1G,EAAK6E,gBAIxC3E,KAAK+G,uBAUCnF,EAAAtB,UAAAwG,0BAAP,SAAiCpE,GAAjC,IAAA5C,EAAAE,KAEK2E,EAA8B3E,KAAK2E,aAGnCqC,EADmBtE,EAASC,UACHqE,gBAAgBC,OAAOjH,KAAKwG,KAEzDU,EAAA,KAAaxE,EAASlB,MAAO,SAAC2F,GAC7B,IACIC,EADa1E,EAAS2E,QAAQF,GAClBxG,UAGZ2G,EADkBvE,EAAA,MAAY,IAAI8B,KAAKuC,GAAOzC,EAAaxC,SAAUwC,EAAavC,MAAOtC,EAAKgF,kBAAmBhF,EAAKiF,cAAcC,KAC9GrE,UACtBY,EAAgBwB,EAAA,IAAU,IAAI8B,KAAKyC,GAAY3C,EAAaxC,SAAUwC,EAAavC,MAAOtC,EAAKiF,cAAcC,KAEjHtC,EAAS6E,mBAAmBJ,EAAKG,EAAW,QAC5C5E,EAAS6E,mBAAmBJ,EAAK5F,EAAQZ,UAAW,SAEpDqG,EAAgBzD,OAAO+D,EAAUE,WAAY9E,MAerCd,EAAAtB,UAAAyG,oBAAV,eAAAjH,EAAAE,KAEC,GAAIA,KAAKyH,kBAAoBtB,EAAA,SAAenG,KAAKkD,MAAQiD,EAAA,SAAenG,KAAKgE,KAAM,CAClF,IAAI7B,EAAqBnC,KAAK2E,aAAaxC,SACvCC,EAAgBpC,KAAK2E,aAAavC,MAEtCpC,KAAK0H,WAAWC,QAKhB,IAHA,IAAIrG,EAAayB,EAAA,MAAY,IAAI8B,KAAK7E,KAAKkD,KAAMf,EAAUC,EAAOpC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KACzG4C,OAAS,eAGZ7E,EAAA,IAAUzB,EAAMa,EAAUC,EAAOyF,EAAK9C,cAAcC,KAEpD,IAAIsC,EAAoBhG,EAAKX,UACzBmH,EAAuBR,EAAUE,WAEvBlC,EAAA,SAAeuC,EAAKtC,OAAOC,WAAY,SAACD,GACrD,QAASA,EAAOyB,gBAAgBC,OAAOnH,EAAK0G,KAAKS,OAAOa,KAYpDF,IAEHA,EAAUrG,QAAU,IAAIsD,KAAKyC,EAAY,GACzCM,OAAYG,GAVRH,KACJA,EAA2BC,EAAKH,WAAWM,UACjCC,UAAY,IAAIpD,KAAKyC,YAd3BhG,EAAKX,UAAYX,KAAKgE,IAAMhE,KAAKiE,oBAkCnCrC,EAAAtB,UAAA4H,cAAP,eAAApI,EAAAE,KACCJ,EAAAU,UAAM4H,cAAanI,KAAAC,MAEnB,IAAI0H,EAAa1H,KAAK0H,WAClBA,EAAWS,OAAS,GAEvBT,EAAWnB,KAAK,SAACqB,GAChB,IAAIQ,EAAyBpF,KAAKmC,KAAKrF,EAAK4E,YAAc1B,KAAKE,IAAIpD,EAAKgE,IAAK8D,EAAUS,aAAerF,KAAKgB,IAAIlE,EAAK+D,MAAO+D,EAAUU,iBAAmBxI,EAAKgE,IAAMhE,EAAK+D,QACxK+D,EAAUhF,aAAe9C,EAAKwE,eAAe,EAAGsD,EAAUW,iBAAmBX,EAAUY,mBAAoBJ,GAC3G,IAAIK,EAAW1F,EAAA,MAAY,IAAI8B,KAAK+C,EAAUY,oBAAqBZ,EAAUhF,aAAaT,SAAUyF,EAAUhF,aAAaR,MAAOtC,EAAKgF,kBAAmBhF,EAAKiF,cAAcC,KACzKyD,EAAS9H,UAAYiH,EAAUK,UAAUtH,WAC5CoC,EAAA,IAAU0F,EAAUb,EAAUhF,aAAaT,SAAUyF,EAAUhF,aAAaR,MAAOtC,EAAKiF,cAAcC,KAGvG4C,EAAUa,SAAWA,KAQd7G,EAAAtB,UAAAwE,gBAAV,WACC,OAAI9E,KAAK+E,cACD/E,KAAK+E,cAAc2D,eAGpB,GAYD9G,EAAAtB,UAAAqI,YAAP,SAAmBrH,EAAYsH,GAC9B,IAAIzG,EAAqBnC,KAAK6C,cAAcV,SACxC0G,EAA4B7I,KAAK6C,cAAcT,MAEnDW,EAAA,MAAYzB,EAAMa,EAAU,EAAGnC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KAE1E,IAAI8D,EAAwBxH,EAAKX,UAE7BoI,EAAgBhG,EAAA,KAAWzB,GAE3B0H,EAAoBjG,EAAA,IAAUgG,EAAS5G,EAAUyG,EAAe5I,KAAK+E,cAAcC,KAAKrE,UAGxFiH,EAA0C5H,KAAKiJ,UAAUD,GACzDpB,IACHmB,EAAU,IAAIlE,KAAK+C,EAAUrG,QAAQZ,WACrCoC,EAAA,MAAYgG,EAAS5G,EAAU0G,EAAmB7I,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KACzF+D,EAAQpI,UAAYiH,EAAUrG,QAAQZ,WACzCoC,EAAA,IAAUgG,EAAS5G,EAAU0G,EAAmB7I,KAAK+E,cAAcC,KAEpEgE,EAAYD,EAAQpI,WAIrB,IAAIuI,EAAgClJ,KAAKuE,iBAAiBuE,EAAeE,GAKzE,OAHiChG,KAAKC,MAAMiG,EAAwBnG,EAAA,YAAkBZ,IAG7D0G,EACjB7I,KAAK2I,YAAYrH,EAAMsH,EAAgBC,GAGxCE,GAaDnH,EAAAtB,UAAA6I,iBAAP,SAAwBvB,EAA0BzF,EAAoBC,GACrE,IAAId,EAAO,IAAIuD,KAAK+C,EAAU7G,UAC9BgC,EAAA,MAAYzB,EAAMa,EAAUC,EAAOpC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KAC9EjC,EAAA,IAAUzB,EAAMa,EAAUC,EAAOpC,KAAK+E,cAAcC,KAEpD,IAAIgE,EAAY1H,EAAKX,UAGrB,OADAiH,EAA2B5H,KAAKiJ,UAAUD,IAElChJ,KAAKmJ,iBAAiBvB,EAAWzF,EAAUC,GAE5Cd,GASDM,EAAAtB,UAAA8I,qBAAP,eAAAtJ,EAAAE,KACC,GAAImG,EAAA,SAAenG,KAAKgE,MAAQmC,EAAA,SAAenG,KAAKkD,KAAM,CAEzDlD,KAAKqE,gBAGL,IAAI2E,EAAYhJ,KAAK4E,UAAUjE,UAC3BwB,EAAWnC,KAAK6C,cAAcV,SAC9ByG,EAAgB5I,KAAK6C,cAAcT,MACnCiH,EAAetG,EAAA,KAAW/C,KAAK4E,WAE/B0E,EAAoBtJ,KAAKuJ,mBAC7BvJ,KAAKwJ,iBAEL,qBACC,IAAIlI,EAAOmI,EAAKd,YAAY5F,EAAA,KAAWsG,GAAeT,GAEtDI,EAAY1H,EAAKX,UAEjB,IAAIY,EAAUwB,EAAA,KAAWzB,GACzBC,EAAUwB,EAAA,IAAUxB,EAASY,EAAUyG,EAAea,EAAK1E,cAAcC,KAEzE,IAAI0E,EAASD,EAAK1H,YAAYkF,OAAO9E,GAEjCsH,EAAKE,gBAAkBN,GACtBtG,EAAA,YAAkBzB,EAAM+H,EAAcI,EAAKxE,cAAewE,EAAK1E,cAAcC,MAC/D,SAAb7C,IACHuH,EAASD,EAAKxH,wBAAwBgF,OAAO9E,IAKhD,IAAIyH,EAAOH,EAAK1E,cAAc2E,OAAOpI,EAAMoI,GAEvChH,EAAW4G,EAAkBO,KAAK,SAAC9D,GAAM,OAAAA,EAAE6D,OAASA,IACpDlH,EAASU,aACZV,EAASU,YAAa,GAEvBqG,EAAKK,eAAepH,GAEpBA,EAASkF,eAAYG,EACrBrF,EAASpB,KAAOA,EAChBoB,EAASnB,QAAUA,EAEnBmB,EAASkH,KAAOA,EAEhBP,EAAe/H,EAEfmI,EAAKM,oBAAoBrH,WAlCnBsG,GAAahJ,KAAKyE,gBAsCzB,IAAIuF,EAAyBhK,KAAKiK,SAElC3E,EAAA,KAAWtF,KAAK0H,WAAWlC,WAAY,SAACoC,GACvC,GAAIA,EAAUsC,UAAY,EAAG,CAC5B,IAAIC,EAAqBvC,EAAUhF,aAAaT,SAC5CiI,EAAwBxC,EAAUhF,aAAaR,MAGnD,GAAIiI,EAAA,YAAkBzC,EAAU0C,WAAY1C,EAAU2C,UAAuC,EAA3BP,EAASQ,gBAK1E,IAJA,IAEIC,EAFAC,EAAoB9C,EAAUa,SAAS9H,UAGvCyB,EAAgB,eAEnB,IAAId,EAAayB,EAAA,KAAW6E,EAAUa,UAGtC,GAFAiC,EAAY3H,EAAA,IAAUzB,EAAM6I,EAAUC,EAAgBhI,EAAOtC,EAAKiF,cAAcC,KAAKrE,UACrFyB,IACIsI,EAAY9C,EAAUY,oBAAsBkC,EAAY9C,EAAUW,iBAAkB,CACvF,IAAIhH,EAAUwB,EAAA,KAAWzB,GACzBC,EAAUwB,EAAA,IAAUxB,EAAS4I,EAAUC,EAAetK,EAAKiF,cAAcC,KAEzE,IAAI0E,EAAiB5J,EAAKiC,YAAYkF,OAAOkD,GAEzCrK,EAAK6J,gBAAkBc,GACtB1H,EAAA,YAAkBzB,EAAMmJ,EAAc3K,EAAKmF,cAAenF,EAAKiF,cAAcC,MAC/D,SAAbmF,IACHT,EAAS5J,EAAKmC,wBAAwBgF,OAAOkD,IAKhD,IAAIQ,EAAe7K,EAAKiF,cAAc2E,OAAOpI,EAAMoI,GAE/ChH,EAA8B4G,EAAkBO,KAAK,SAAC9D,GAAM,OAAAA,EAAE6D,OAASe,IACvEjI,EAASU,aACZV,EAASU,YAAa,GAGvBtD,EAAKgK,eAAepH,GACpBA,EAASkF,UAAYA,EACrBA,EAAU/B,UAAU+E,UAAUlI,GAE9BA,EAASpB,KAAOA,EAChBoB,EAASnB,QAAUA,EACnBmB,EAASkH,KAAOe,EAChBF,EAAenJ,EACfxB,EAAKiK,oBAAoBrH,KAjCpBgI,GAAa9C,EAAUiD,sBAgD5BjJ,EAAAtB,UAAAyJ,oBAAP,SAA2BrH,GAE1B,GAAIyD,EAAA,SAAenG,KAAKgE,MAAQmC,EAAA,SAAenG,KAAKkD,KAAM,CACzD,IAAI+G,EAAyBjK,KAAKiK,SAE9BjB,EAAYtG,EAASlC,MACrBsK,EAAepI,EAAS3B,SAEvBoF,EAAA,SAAe2E,KACnBA,EAAe9B,GAGhB,IAAI+B,EAAmB/K,KAAKgL,gBAAgBhC,GACxCX,EAAsBrI,KAAKgL,gBAAgBF,GAC3CG,EAAkB5C,GAEjB3F,EAASwI,SAAWlL,KAAK6C,cAAcT,MAAQpC,KAAK2E,aAAavC,QACrEiG,EAAc0C,GAAY1C,EAAc0C,IAAa/K,KAAK6C,cAAcT,MAAQpC,KAAK2E,aAAavC,QAGnGM,EAASqI,SAAWA,EAEpB,IAAII,EAAiBzI,EAASyI,KAC1BA,IAASA,EAAKC,UACjBnB,EAASoB,kBAAkBF,EAAMJ,EAAU1C,GAG5C,IAAIiD,EAAa5I,EAAS4I,KACtBA,IAASA,EAAKF,UACjBnB,EAASsB,kBAAkBD,EAAMP,EAAU1C,GAG5C,IAAImD,EAAiB9I,EAASS,SAC1BqI,IAASA,EAAKJ,WACjBnB,EAASwB,kBAAkBD,EAAMT,EAAUE,GACtCvI,EAASwI,SACblL,KAAKyC,SAASC,IAIhB,IAAIgJ,EAAiBhJ,EAASgJ,KAC1BA,GACHzB,EAASwB,kBAAkBC,EAAMX,EAAU1C,GAG5C,IAAIsD,EAAmBjJ,EAASiJ,MAChC,GAAIA,IAAUA,EAAMP,SAAU,CAC7B,IAAIQ,EAAWD,EAAME,SAIL,GAAZD,IAKFA,EAJ+B,GAA5B5L,KAAK6C,cAAcT,OAA6C,QAA/BpC,KAAK6C,cAAcV,UAAuBO,EAASwI,QAI5E,EAHA,IAQbjB,EAAS6B,mBAAmBH,EAAOZ,EAAU1C,EAAauD,MAU7DxL,OAAAC,eAAWuB,EAAAtB,UAAA,oBAAX,WACC,OAAOyC,EAAA,YAAkB/C,KAAK2E,aAAaxC,SAAUnC,KAAK2E,aAAavC,wCAYjER,EAAAtB,UAAAyL,aAAP,SAAoB7I,EAAac,GAChC,OAASd,IAAKA,EAAKc,IAAKA,EAAKgI,KAAMhM,KAAKiE,eAS/BrC,EAAAtB,UAAA2L,OAAV,SAAiBzL,GAEhB,IAAI8G,EAAYvE,EAAA,MAAY,IAAI8B,KAAKrE,GAAQR,KAAK2E,aAAaxC,SAAUnC,KAAK2E,aAAavC,MAAOpC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KAAKrE,UAElJ,OAAO2G,GADOvE,EAAA,IAAU,IAAI8B,KAAKyC,GAAYtH,KAAK2E,aAAaxC,SAAUnC,KAAK2E,aAAavC,MAAOpC,KAAK+E,cAAcC,KAAKrE,UAC5F2G,GAAatH,KAAKkM,eASvCtK,EAAAtB,UAAA6L,OAAV,SAAiB3L,GAEhB,IAAI8G,EAAYvE,EAAA,MAAY,IAAI8B,KAAKrE,GAAQR,KAAK2E,aAAaxC,SAAUnC,KAAK2E,aAAavC,MAAOpC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KAAKrE,UAElJ,OAAO2G,GADOvE,EAAA,IAAU,IAAI8B,KAAKyC,GAAYtH,KAAK2E,aAAaxC,SAAUnC,KAAK2E,aAAavC,MAAOpC,KAAK+E,cAAcC,KAAKrE,UAC5F2G,GAAatH,KAAKoM,aAa1CxK,EAAAtB,UAAAgE,eAAP,SAAsB+H,EAAeC,EAAkBC,GACtD,IAAI1K,EAAqC7B,KAAK6B,cAE1Ce,EAA8Bf,EAAc2K,SAASH,GAErDI,EAA2B1J,EAAA,YAAkBH,EAAaT,SAAUS,EAAaR,OAEjFsK,EAAoB7K,EAAcsG,OAAS,EAC/C,GAAIkE,GAASK,EACZ,OAAOvM,EAAA,KAAK0B,EAAc2K,SAASE,IAGpC,IAAItK,EAAgBY,KAAKmC,KAAKmH,EAAWG,GAEzC,OAAIH,EAAWG,GAAoBJ,EAAQ,EACnClM,EAAA,KAAK0B,EAAc2K,SAASH,EAAQ,IAGxCjK,GAASmK,EACLpM,EAAA,KAAK0B,EAAc2K,SAASH,IAE/BA,EAAQ,EAAIxK,EAAcsG,OACtBnI,KAAKsE,eAAe+H,EAAQ,EAAGC,EAAUC,GAEzCpM,EAAA,KAAK0B,EAAc2K,SAASH,KAW/BzK,EAAAtB,UAAAqM,YAAP,SAAmBnM,GAClB,OAAOR,KAAK+E,cAAc2E,OAAOlJ,IAS3BoB,EAAAtB,UAAAsM,eAAP,SAAsBtL,GACrB,OAAOtB,KAAKgL,gBAAgB1J,EAAKX,YAS3BiB,EAAAtB,UAAAuM,cAAP,SAAqBvL,GACpB,OAAIA,aAAgBuD,KACZ7E,KAAK4M,eAAetL,GAGpBtB,KAAKgL,gBAAgB1J,IAUvBM,EAAAtB,UAAAwM,YAAP,SAAmBxL,GAClB,IAAIyJ,EAAW/K,KAAK4M,eAAetL,GAC/ByL,EAAQ/M,KAAKiK,SAAS+C,gBAAgBjC,GACtCkC,EAAQjN,KAAKiK,SAASiD,gBAAgBnC,GAC1C,OAAShF,EAAGgH,EAAMhH,EAAGoH,EAAGJ,EAAMI,EAAGF,MAAOA,IAUlCrL,EAAAtB,UAAA8M,WAAP,SAAkB9L,GACjB,OAAIA,aAAgBuD,KACZ7E,KAAK8M,YAAYxL,GAGjBtB,KAAKqN,aAAa/L,IAUpBM,EAAAtB,UAAAgN,eAAP,SAAsBvC,GACrB,OAAO,IAAIlG,KAAK7E,KAAKuN,gBAAgBxC,KAa/BnJ,EAAAtB,UAAAkN,KAAP,SAAY9K,EAA4ByE,EAAa0E,GACpD,IAAIrL,EAAgBR,KAAKyN,kBAAkB/K,EAAUyE,EAAK0E,GAO1D,OAJK1F,EAAA,SAAe3F,KACnBA,EAAQR,KAAK0N,WAGP1N,KAAKiK,SAAS+C,gBAAgBhN,KAAKgL,gBAAgBxK,IAAQuF,GAa5DnE,EAAAtB,UAAAqN,KAAP,SAAYjL,EAA4ByE,EAAa0E,GACpD,IAAIrL,EAAgBR,KAAKyN,kBAAkB/K,EAAUyE,EAAK0E,GACtD+B,EAAgBlL,EAASmL,SAAS,SAAU,SAMhD,OAJK1H,EAAA,SAAe3F,KACnBA,EAAQR,KAAK0N,WAGP1N,KAAKiK,SAAS+C,gBAAgBhN,KAAKgL,gBAAgBxK,EAAQoN,IAAQT,GAcpEvL,EAAAtB,UAAAwN,SAAP,SAAgBpL,EAA4ByE,EAAa0E,EAAmBkC,GAC3E,IAAIvN,EAAgBR,KAAKyN,kBAAkB/K,EAAUyE,EAAK0E,GACtD+B,EAAgBlL,EAASmL,SAASE,EAAU,SAMhD,OAJK5H,EAAA,SAAe3F,KACnBA,EAAQR,KAAK0N,WAGP1N,KAAKkN,gBAAgBlN,KAAKgL,gBAAgBxK,EAAQoN,KAahDhM,EAAAtB,UAAAmN,kBAAV,SAA4B/K,EAA4ByE,EAAa0E,GACpE,GAAK1F,EAAA,SAAegB,GAApB,CAIKhB,EAAA,SAAe0F,KACnBA,EAAWnJ,EAASsL,iBAAiB7G,GAEhChB,EAAA,SAAe0F,KACnBA,EAAW,IAIb,IAAIvE,EAAoB5E,EAASrB,OAAO8F,GAAW,KAC/C8G,EAAkBvL,EAASrB,OAAO8F,GAAY,MAElD,OAAIhB,EAAA,SAAemB,IAAcnB,EAAA,SAAe8H,GACxC3G,GAAa2G,EAAU3G,GAAauE,OAD5C,IAYMjK,EAAAtB,UAAA4N,sBAAP,SAA6BxL,EAA4ByL,GAExD,IACI/G,EADA7B,EAAS7C,EAASC,UAGlBrB,EAAmBoB,EAAU,OAASyL,GAC1C,GAAI7M,EAAJ,CACC8F,EAAO9F,EAAKX,UAKb,IAIIyN,EAJAC,EAAuB3L,EAAU,WAAayL,GAC9CG,EAAyBtO,KAAKuO,gBAQlC,GAJIF,IACHD,EAAWC,EAAS1N,WAGjBwF,EAAA,SAAeiI,GAAW,CAC7B,IAAII,EAAaxL,KAAKyL,IAAIrH,EAAOgH,GAE7BpO,KAAKqC,eAAekD,EAAOiB,KAAOgI,IACrCxO,KAAKqC,eAAekD,EAAOiB,KAAOgI,GAIpC,IAAIE,EAAoBtH,EAAOkH,EAE3BI,EAAY,GACX1O,KAAKqC,eAAekD,EAAOiB,KAAOkI,IACrC1O,KAAKqC,eAAekD,EAAOiB,KAAOkI,GAIpC1O,KAAKuO,gBAAkBnH,EAEnB7B,EAAOsB,cAAc7G,KAAKwG,KAC7BxG,KAAK8G,0BAA0BpE,GAG3B1C,KAAK6G,gBACRtB,EAAOsB,cAAc7G,KAAKwG,KAAOxG,KAAK6G,cACtC7G,KAAK8G,0BAA0BpE,MAW3Bd,EAAAtB,UAAAqO,mBAAP,WACC/O,EAAAU,UAAMqO,mBAAkB5O,KAAAC,MAExB,IAAI2E,EAA8B3E,KAAKsE,eAAe,EAAGtE,KAAKoG,cAAe,GAEzEpG,KAAKoG,eAAiBrD,EAAA,YAAkB,MAAO,KAAgC,QAAzB4B,EAAaxC,WACtEwC,EAAaxC,SAAW,QACxBwC,EAAavC,MAAQ,GAGlBpC,KAAKoG,eAAiBrD,EAAA,YAAkB,OAAQ,KAAgC,QAAzB4B,EAAaxC,WACvEwC,EAAaxC,SAAW,MACxBwC,EAAavC,MAAQ,GAGlBpC,KAAKoG,eAAiBrD,EAAA,YAAkB,OAAQ,GAAKA,EAAA,YAAkB,OAAQ,IAA+B,OAAzB4B,EAAaxC,WACrGwC,EAAaxC,SAAW,OACxBwC,EAAavC,MAAQ,GAGlBpC,KAAKoG,eAAiBrD,EAAA,YAAkB,OAAQ,GAAKA,EAAA,YAAkB,MAAO,OAAkC,SAAzB4B,EAAaxC,WACvGwC,EAAaxC,SAAW,OACxBwC,EAAavC,MAAQ,GAGtBpC,KAAKkC,kBAAoByC,GAiB1BvE,OAAAC,eAAWuB,EAAAtB,UAAA,oBAWX,WACC,OAAIN,KAAK6G,cACD7G,KAAK6G,cAGL7G,KAAKkC,uBAhBd,SAAwB0M,GACnBjI,KAAKC,UAAU5G,KAAK6G,gBAAkBF,KAAKC,UAAUgI,KACxD5O,KAAK6G,cAAgB+H,EACrB5O,KAAKa,aACLb,KAAK0G,+DAqCPtG,OAAAC,eAAWuB,EAAAtB,UAAA,wBAiBX,WACC,OAAON,KAAKO,iBAAiB,yBAlB9B,SAA4BC,GAK3B,GAJIR,KAAKS,iBAAiB,mBAAoBD,IAC7CR,KAAK6O,iBAGFrO,EAAO,CACV,IAAIsO,EAAgB9O,KAAK0H,WAAWqH,SACpCD,EAAcE,UAAU5D,UAAW,EACnC0D,EAAcG,QAAQ7D,UAAW,EACjC0D,EAAcI,UAAU9D,UAAW,EACnC0D,EAAc5E,UAAY,oCAkB5B9J,OAAAC,eAAWuB,EAAAtB,UAAA,yBAOX,WACC,OAAON,KAAKO,iBAAiB,0BAR9B,SAA6BC,GAC5BR,KAAKS,iBAAiB,oBAAqBD,oCAiB5CJ,OAAAC,eAAWuB,EAAAtB,UAAA,sBASX,WACC,OAAON,KAAKO,iBAAiB,uBAV9B,SAA0BC,GACrBR,KAAKS,iBAAiB,iBAAkBD,IAC3CR,KAAK6O,kDAsBAjN,EAAAtB,UAAA6O,eAAP,SAAsBpE,GACrB,IAAInB,EACAtI,EAAOtB,KAAKsN,eAAevC,GAG/B,GAFAzJ,EAAOyB,EAAA,MAAYzB,EAAMtB,KAAK2E,aAAaxC,SAAUnC,KAAK2E,aAAavC,MAAOpC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KAErHmB,EAAA,SAAenG,KAAKoP,mBACvBxF,EAAO5J,KAAK+E,cAAc2E,OAAOpI,EAAMtB,KAAKoP,uBAExC,CACJ,IAAIC,EAAarP,KAAK+B,YAAYkF,OAAOjH,KAAK2E,aAAaxC,UAE1DyH,EADGyF,EACIrP,KAAK+E,cAAc2E,OAAOpI,EAAM+N,GAGhCrP,KAAKsP,iBAAiBvE,GAG/B,OAAO/K,KAAKuP,QAAQC,MAAM,iBAAkB5F,IAWtChI,EAAAtB,UAAAmP,cAAP,SAAqB1E,EAAkBc,GACtC,IAAIlH,EAAe3E,KAAK2E,aACpBxC,EAAWwC,EAAaxC,SACxBC,EAAQuC,EAAavC,MAErBd,EAAatB,KAAKsN,eAAevC,GAQrC,GANAhI,EAAA,MAAYzB,EAAMa,EAAUC,EAAOpC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KAE1E6G,EAAW,GACd9I,EAAA,IAAUzB,EAAMa,EAAU0J,EAAWzJ,EAAOpC,KAAK+E,cAAcC,KAG5DhF,KAAKiJ,UAAU3H,EAAKX,WACvB,KAAOW,EAAKX,UAAYX,KAAKgE,MAC5BjB,EAAA,IAAUzB,EAAMa,EAAUC,EAAOpC,KAAK+E,cAAcC,KAC/ChF,KAAKiJ,UAAU3H,EAAKX,cAM3B,OAAOX,KAAK4M,eAAetL,IAWrBM,EAAAtB,UAAAoP,qBAAP,SAA4B3E,GAC3B,OAAO/K,KAAKyP,cAAc1E,EAAU,IAW9BnJ,EAAAtB,UAAAqP,mBAAP,SAA0B5E,GACzB,OAAO/K,KAAKyP,cAAc1E,EAAU,IAiB9BnJ,EAAAtB,UAAAsP,kBAAP,SAAyBrK,EAAkBwF,EAAkB8E,GAE5D,IAyDKC,EAzDDtP,EAAgBR,KAAKuN,gBAAgBxC,GACrCzJ,EAAayB,EAAA,MAAY,IAAI8B,KAAKrE,GAAQR,KAAK2E,aAAaxC,SAAUnC,KAAK2E,aAAavC,MAAOpC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KAI1ItC,EAFkB6C,EAAOyB,gBAAgBC,OAAOjH,KAAKwG,KAE1BS,OAAO3F,EAAKX,UAAU6G,aAGhD9E,GAAYmN,IAoDfC,EADsB,KAAnB9P,KAAKmO,WACF,QAGA,QAGPzL,EAAW6C,EAAOM,UAAU2G,SAASjH,EAAOM,UAAUC,iBAAiBxE,EAAKX,UAAW,SAACoF,GAAM,OAAQA,EAAE+J,GAAKnP,WAAW,SAGzH,OAAO+B,GAeDd,EAAAtB,UAAAgP,iBAAP,SAAwBvE,GAEvB,IAAIzJ,EAAOtB,KAAKsN,eAAevC,GAC/B,OAAO/K,KAAK+E,cAAc2E,OAAOpI,EAAMtB,KAAK+P,0BAQnCnO,EAAAtB,UAAAyP,sBAAV,WACC,OAAO/P,KAAK+B,YAAYkF,OAAOjH,KAAK6C,cAAgB7C,KAAK6C,cAAcV,SAAW,QAQ5EP,EAAAtB,UAAA0P,aAAP,WACCpQ,EAAAU,UAAM0P,aAAYjQ,KAAAC,MAClB,IAAIiK,EAAWjK,KAAKiK,SAChBA,IAEHA,EAASgG,MAAMlB,SAASlD,SAAW,EACnC5B,EAASqB,KAAKyD,SAASlD,SAAW,EAClC5B,EAASiG,OAAOnB,SAASlD,SAAW,EACpC5B,EAASkG,SAAS/E,UAAW,IAU/BhL,OAAAC,eAAWuB,EAAAtB,UAAA,iBAAX,WACC,OAASyF,EAAG,EAAGoH,EAAG,oCAYZvL,EAAAtB,UAAA8P,YAAP,SAAmBnI,EAAiB1G,EAAe8O,EAA0BC,GAC5ErI,EAAYjI,KAAK+E,cAAcwL,MAAMtI,GACrC1G,EAAUvB,KAAK+E,cAAcwL,MAAMhP,GACnCvB,KAAKwQ,aAAavI,EAAUtH,UAAWY,EAAQZ,UAAW0P,EAAgBC,IASjE1O,EAAAtB,UAAAmQ,KAAV,SAAeC,GACd,MAAgB,gBAATA,GAA2B9Q,EAAAU,UAAMmQ,KAAI1Q,KAAAC,KAAC0Q,IAQvC9O,EAAAtB,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACf5Q,KAAK+B,YAAc6O,EAAO7O,YAC1B/B,KAAKiC,wBAA0B2O,EAAO3O,wBAClC2O,EAAsB,gBACzB5Q,KAAK2E,aAAeiM,EAAOjM,eAWtB/C,EAAAtB,UAAAuQ,sBAAP,SAA6B9F,EAAkB+F,GAA/C,IAAAhR,EAAAE,KAMC,GAJK8Q,IACJ/F,EAAW/K,KAAK+Q,eAAehG,IAG5B/K,KAAKsC,YAAa,CACrB,IAGI0O,EADAC,EAFalO,EAAA,MAAY/C,KAAKsN,eAAevC,GAAW/K,KAAK2E,aAAaxC,SAAU,EAAGnC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KAE1GrE,UA2B5B,GAxBAX,KAAKuF,OAAOgB,KAAK,SAAChB,GACjB,GAAIA,EAAOE,UAAY3F,EAAM,CAC5B,IAAI4C,EAAW5C,EAAK8P,kBAAkBrK,EAAQwF,GAAU,GACxD,GAAIrI,EAAU,CACb,IAAIpB,OAAI,EACJiE,EAAO2L,OAASpR,IACnBwB,EAAOoB,EAASyO,OAEb5L,EAAO6L,OAAStR,IACnBwB,EAAOoB,EAAS2O,OAGZL,EAIAhO,KAAKyL,IAAIuC,EAAYrQ,UAAYsQ,GAAcjO,KAAKyL,IAAInN,EAAKX,UAAYsQ,KAC5ED,EAAc1P,GAJf0P,EAAc1P,MAWd0P,EAAa,CAChB,IAAIM,EAAcN,EAAYrQ,UAC9BqQ,EAAcjO,EAAA,MAAY,IAAI8B,KAAKyM,GAActR,KAAK2E,aAAaxC,SAAUnC,KAAK2E,aAAavC,MAAOpC,KAAK8E,kBAAmB9E,KAAK+E,cAAcC,KACjJsM,EAAcN,EAAYrQ,UAC1BqQ,EAAc,IAAInM,KAAKmM,EAAYrQ,UAAYX,KAAKiE,aAAejE,KAAKiK,SAASsH,iBACjFxG,EAAW/K,KAAK4M,eAAeoE,GAE/B,IAAIQ,KAEJxR,KAAKuF,OAAOgB,KAAK,SAAChB,GAEjB,IAAI7C,EAAW6C,EAAOyB,gBAAgBC,OAAOnH,EAAK0G,KAAKS,OAAOqK,EAAY9J,YACtEuF,EAAQxH,EAAOkM,sBAAsB/O,GACrCqK,EACHyE,EAAaE,MAAOnM,OAAQA,EAAQwH,MAAOA,IAIvCxH,EAAOoM,aACVpM,EAAOqM,gBAKV5R,KAAK6R,MAAMC,mBAAmBN,IAIhC5R,EAAAU,UAAMuQ,sBAAqB9Q,KAAAC,KAAC+K,GAAU,IAUvC3K,OAAAC,eAAWuB,EAAAtB,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKS,iBAAiB,cAAeD,oCAgBtCJ,OAAAC,eAAWuB,EAAAtB,UAAA,oBAAX,WACC,OAAON,KAAK6C,+CAONjB,EAAAtB,UAAAyR,QAAP,SAAerP,EAA8BsP,GAC5C,IAAIzM,EAAS7C,EAASC,UACtB,GAAGD,GAAYsP,KACVzM,EAAO0M,SAAW9L,EAAA,SAAeZ,EAAO2M,eACxC3M,EAAOE,UAAYzF,MACV0C,EAASlB,MAAM,OAASxB,KAAKmO,YAAYxN,UACrCqR,EAASxQ,MAAM,OAASxB,KAAKmO,YAAYxN,UAEnC4E,EAAO2M,aAAelS,KAAKiE,cAC/C,OAAO,EAKX,OAAO,GAETrC,EAxqDA,CAAqEF,EAAA,GAgrDrET,EAAA,EAASC,kBAA4B,SAAIS,EACzCV,EAAA,EAASC,kBAAoC,iBAAIC,sDCl0DjDgR,EAAA,SAAAvS,GAyBC,SAAAwS,IAAA,IAAAtS,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,oBACjBH,EAAKI,eA6HP,OAzJuCC,EAAA,EAAAiS,EAAAxS,GAqCtCQ,OAAAC,eAAW+R,EAAA9R,UAAA,qBAAX,WACC,GAAIN,KAAKY,KACR,OAAOZ,KAAKY,KAAKyR,gBAAgBrS,KAAKwI,qDAUxCpI,OAAAC,eAAW+R,EAAA9R,UAAA,mBAAX,WACC,GAAIN,KAAKY,KACR,OAAOZ,KAAKY,KAAKyR,gBAAgBrS,KAAKuI,mDASxCnI,OAAAC,eAAW+R,EAAA9R,UAAA,qBAYX,WACC,OAAON,KAAKO,iBAAiB,sBAb9B,SAAyBC,GACpBR,KAAKS,iBAAiB,gBAAiBD,IACtCR,KAAKY,OACRZ,KAAKY,KAAK0R,sBACVtS,KAAKY,KAAKE,qDAiBbV,OAAAC,eAAW+R,EAAA9R,UAAA,mBAYX,WACC,OAAON,KAAKO,iBAAiB,oBAb9B,SAAuBC,GAClBR,KAAKS,iBAAiB,cAAeD,IACpCR,KAAKY,OACRZ,KAAKY,KAAK0R,sBACVtS,KAAKY,KAAKE,qDAiBbV,OAAAC,eAAW+R,EAAA9R,UAAA,kBAYX,WACC,IAAIiS,EAAmBvS,KAAKO,iBAAiB,iBAC7C,OAAIgS,EACIvS,KAAKY,KAAK4R,gBAAgBD,GAG1BvS,KAAKO,iBAAiB,mBAlB/B,SAAsBC,GACjBR,KAAKS,iBAAiB,aAAcD,IACnCR,KAAKY,OACRZ,KAAKY,KAAK0R,sBACVtS,KAAKY,KAAKE,qDAwBbV,OAAAC,eAAW+R,EAAA9R,UAAA,gBAYX,WACC,IAAIiS,EAAmBvS,KAAKO,iBAAiB,eAC7C,OAAIgS,EACIvS,KAAKY,KAAK4R,gBAAgBD,GAG1BvS,KAAKO,iBAAiB,iBAlB/B,SAAoBC,GACfR,KAAKS,iBAAiB,WAAYD,IACjCR,KAAKY,OACRZ,KAAKY,KAAK0R,sBACVtS,KAAKY,KAAKE,qDAmBdsR,EAzJA,CAAuCK,EAAA,GAiKvCxR,EAAA,EAASC,kBAAqC,kBAAIiR,kBC3LlDO,EAAA,SAAA9S,GAeC,SAAA+S,IAAA,IAAA7S,EACCF,EAAAG,KAAAC,OAAOA,YANDF,EAAAyP,QAAU,IAAIqD,EAAA,EAA6D9S,GAOjFA,EAAKG,UAAY,uBACjBH,EAAK8J,KAAO,aAEZ9J,EAAK+S,UAAUN,SAAW,EAC1BzS,EAAK+S,UAAUC,YAAc,EAE7BhT,EAAKI,eAuCP,OA9D0CC,EAAA,EAAAwS,EAAA/S,GA+BzCQ,OAAAC,eAAWsS,EAAArS,UAAA,gBAOX,WACC,OAAIN,KAAKuP,QAAQwD,UAAU,YACnB/S,KAAKuP,QAAQC,MAAM,WAAYxP,KAAKgT,WAAqB,UAE1DhT,KAAKgT,WAAqB,cAXlC,SAAoBxS,GACnBR,KAAKiT,YAAY,WAAYzS,oCAoB9BJ,OAAAC,eAAWsS,EAAArS,UAAA,mBAOX,WACC,OAAON,KAAKgT,WAAwB,iBARrC,SAAuBxS,GACtBR,KAAKiT,YAAY,cAAezS,oCASlCmS,EA9DA,CAA0CO,EAAA,GAoJ1CC,EAAA,SAAAvT,GAwDC,SAAAwT,IAAA,IAAAtT,EAGCF,EAAAG,KAAAC,OAAOA,YAdDF,EAAAuT,oBAA6D,IAAIrR,EAAA,EAevElC,EAAKG,UAAY,eAGjBH,EAAK0C,cAAgB,WAErB1C,EAAKwT,cAAgBxT,EAAK4D,iBAC1B5D,EAAKwT,cAAc3Q,UAAY7C,EAC/BA,EAAKyT,WAAW7B,KAAK5R,EAAKwT,eAI1BxT,EAAKI,eAi1BP,OAx5ByEC,EAAA,EAAAiT,EAAAxT,GAiF9DwT,EAAA9S,UAAAoD,eAAV,WACC,OAAO,IAAIgP,GAQFU,EAAA9S,UAAAqD,gBAAV,WACC,OAAO,IAAIwO,GASLiB,EAAA9S,UAAAkT,kBAAP,eAAA1T,EAAAE,KAECJ,EAAAU,UAAMkT,kBAAiBzT,KAAAC,MAEvBsF,EAAA,KAAWtF,KAAKyT,QAAQjO,WAAY,SAACD,GACpC,GAAKA,EAAO2L,iBAAiBkC,GAAkB7N,EAAO6L,iBAAiBgC,EACtE7N,EAAOmO,0BAEH,CAOJ,IANA,IAAIC,OAAmB,EACnBC,OAAkB,EAElBhO,EAAa9F,EAAK+T,gBAAgB/T,EAAK+D,OACvCoC,EAAWnG,EAAK+T,gBAAgB/T,EAAKgE,KAEhCgQ,EAAIlO,EAAYkO,GAAK7N,EAAU6N,IAAK,CAC5C,IAAIpR,EAAW5C,EAAK+F,UAAU2G,SAASsH,GACvC,GAAIpR,EAAU,CACb,IAAIqR,EAAMjU,EAAKkU,uBAAuBzO,EAAQ7C,EAAS6P,UACnDwB,IACEJ,IACJA,EAAsBI,GAGnBJ,GAAuBI,EAAI1H,MAAQsH,EAAoBtH,QAC1DsH,EAAsBI,IAIxB,IAAIE,EAAMnU,EAAKoU,sBAAsB3O,EAAQ7C,EAAS6P,UAClD0B,IACEL,IACJA,EAAqBK,GAGlBL,GAAsBK,EAAI5H,MAAQuH,EAAmBvH,QACxDuH,EAAqBK,KAMrBN,EACHpO,EAAOK,WAAa+N,EAAoBtH,MAGxC9G,EAAO1B,MAAQ/D,EAAK+D,MAEjB+P,EACHrO,EAAOU,SAAW2N,EAAmBvH,MAAQ,EAG7C9G,EAAOzB,IAAMhE,EAAKgE,IAIfhE,EAAK4H,WAAWS,OAAS,GAC5B5C,EAAOmO,0BAYJN,EAAA9S,UAAA6T,SAAP,eAAArU,EAAAE,KAECJ,EAAAU,UAAM6T,SAAQpU,KAAAC,MAEd,IAAIoU,EAAoBpU,KAAK6F,UAAUsC,OAEnCvC,EAAayE,EAAA,WAAiBrH,KAAKqC,MAAMrF,KAAK6D,MAAQuQ,EAAY,GAAI,EAAGA,GACzEnO,EAAWoE,EAAA,WAAiBrH,KAAKmC,KAAKnF,KAAK8D,IAAMsQ,GAAY,EAAGA,GAEhEpU,KAAKiK,SAASoK,SACjBrU,KAAKiK,SAASkK,WAIf,IAAIG,EAAmBtU,KAAKiK,SAASsK,WAAavU,KAAKiK,SAASO,gBAC5DgK,EAAoBxR,KAAKE,IAAIlD,KAAK6F,UAAUsC,OAAQnF,KAAKmC,MAAMc,EAAWL,GAAc0O,IAa5F,GAXAtU,KAAKyU,YAAczR,KAAKqC,MAAMO,EAAa4O,GAAaA,EACxDxU,KAAK0U,UAAY1R,KAAKmC,KAAKnF,KAAK8D,IAAMsQ,GAEtCpU,KAAKkI,gBAEDlI,KAAKyU,aAAezU,KAAK0U,WAC5B1U,KAAK0U,YAGN1U,KAAK2U,WAAaH,IAEdxU,KAAKuU,YAAc,GAAvB,CAIAvU,KAAKkE,cAAgBlE,KAAK6F,UAAUsC,OAChCnI,KAAK6F,UAAUsC,QAAU,IAC5BnI,KAAKkE,cAAgB,GAGtBlE,KAAKwJ,iBAKL5D,EAAayE,EAAA,IAAU,EAAGrK,KAAKyU,YAAczU,KAAK2U,YAClD1O,EAAWoE,EAAA,IAAUrK,KAAK6F,UAAUsC,OAAQnI,KAAK0U,UAAY1U,KAAK2U,YAIlE,IAFA,IAAIC,EAAY,EAEPd,EAAI,EAAGA,EAAIlO,EAAYkO,IAAK,EAChCpR,EAAW1C,KAAK6F,UAAU2G,SAASsH,IAC9B1Q,YAAa,EAGd0Q,EAAI7N,EAAb,IAAK,IAAkB4O,EAAM7U,KAAK6F,UAAUsC,OAAQ2L,EAAIe,EAAKf,IAAK,EAC7DpR,EAAW1C,KAAK6F,UAAU2G,SAASsH,IAC9B1Q,YAAa,EAGvB,IAAS0Q,EAAIlO,EAAYkO,EAAI7N,EAAU6N,IACtC,GAAIA,EAAI9T,KAAK6F,UAAUsC,OAAQ,CAC9B,IAAIzF,EAA8B1C,KAAK6F,UAAU2G,SAASsH,GAC1D,GAAIA,EAAI9T,KAAK2U,YAAc3R,KAAKC,MAAM6Q,EAAI9T,KAAK2U,YACX3U,KAAKiJ,UAAU6K,KAEjD9T,KAAK8J,eAAepH,GACpB1C,KAAK+J,oBAAoBrH,EAAUkS,IAGpCA,SAIA5U,KAAK+J,oBAAoBrH,EAAUkS,GACnClS,EAASU,YAAa,EAKzBpD,KAAK8J,eAAe9J,KAAKsT,eACzBtT,KAAK+J,oBAAoB/J,KAAKsT,cAAesB,EAAY,EAAG5U,KAAK6F,UAAUsC,QAE1DnI,KAAK0H,WAEXnB,KAAK,SAACqB,GAChB,IAAIY,EAA6BZ,EAAUY,mBACvCD,EAA2BX,EAAUW,iBAEzC,GAAI8B,EAAA,WAAkBxG,MAAO2E,EAAoB1E,IAAKyE,IAAsB1E,MAAO/D,EAAK2U,YAAa3Q,IAAKhE,EAAK4U,YAK9G,IAHA,IAAII,EAAoBzK,EAAA,WAAiBrH,KAAKmC,KAAKrF,EAAK6U,WAAa/M,EAAUsC,WAAY,EAAG3B,EAAmBC,GAC7GuM,EAAY,EAEPC,EAAIxM,EAAoBwM,GAAKzM,EAAkByM,GAAQF,EAAW,CAC1E,IAAIpS,EAA8B5C,EAAK+F,UAAU2G,SAASwI,GAC1DlV,EAAKgK,eAAepH,GACpB5C,EAAKiK,oBAAoBrH,EAAUqS,GACnCA,OAKH/U,KAAKiV,iBACLjV,KAAKkV,qBAELlV,KAAKmV,WAAWtU,aAChBb,KAAKiK,SAASmL,qBAWRhC,EAAA9S,UAAAyJ,oBAAP,SAA2BrH,EAA6BkS,EAAoBvI,GAC3EzM,EAAAU,UAAMyJ,oBAAmBhK,KAAAC,KAAC0C,GAI1B,IAAIuH,EAAyBjK,KAAKiK,SAC7B9D,EAAA,SAAekG,KACnBA,EAAQrM,KAAKwS,gBAAgB9P,EAAS6P,WAGvC,IAAItM,EAAWjG,KAAKwS,gBAAgB9P,EAASoQ,aAExC3M,EAAA,SAAeF,KACnBA,EAAWoG,GAGZ,IAKIgJ,EACAC,EACArK,EAPAF,EAAmB/K,KAAKqS,gBAAgBhG,EAAO3J,EAASmQ,UAAUN,UAClElK,EAAsBrI,KAAKqS,gBAAgBpM,EAAUvD,EAASmQ,UAAUC,aAE5EpQ,EAASqI,SAAWA,EAMhBrI,EAASwI,UACZmK,EAAepP,EACfqP,EAAetV,KAAKqS,gBAAgBhG,EAAO3J,EAASmQ,UAAUN,UAC9DtH,EAAkBjL,KAAKqS,gBAAgBgD,EAAc3S,EAASmQ,UAAUC,cAGzEpQ,EAASqK,MAAQ9C,EAAS+C,gBAAgBjC,GAE1C,IAAII,EAAiBzI,EAASyI,KAC1BA,IAASA,EAAKC,UACjBnB,EAASoB,kBAAkBF,EAAMJ,EAAU1C,GAG5C,IAAIiD,EAAa5I,EAAS4I,KACtBA,IAASA,EAAKF,UACjBnB,EAASsB,kBAAkBD,EAAMP,EAAU1C,GAI5C,IAAIsD,EAAmBjJ,EAASiJ,MAC5BA,IAAUA,EAAMP,WAEd1I,EAASwI,cAAyBnD,GAAd4D,EAAM/B,OAC9BlH,EAASkH,KAAOlH,EAASkH,MAG1BK,EAAS6B,mBAAmBH,EAAOZ,EAAU1C,IAEzC3F,EAASiJ,MAAM4J,cAAgBvV,KAAKmV,WAAWI,eAAiB7S,EAASiJ,MAAM6J,eAAiBxV,KAAKmV,WAAWK,kBACnHxV,KAAKmV,WAAWvL,KAAOlH,EAASiJ,MAAM8J,cAIxC,IAAIjK,EAAiB9I,EAASS,SAC1BqI,IAASA,EAAKJ,WAEZ1I,EAASwI,UACbmK,EAAehJ,EAAQrM,KAAK2U,WAC5BW,EAAetV,KAAKqS,gBAAgBhG,EAAOb,EAAKK,UAChDZ,EAAkBjL,KAAKqS,gBAAgBgD,EAAc7J,EAAKK,WAG3D5B,EAASwB,kBAAkBD,EAAM8J,EAAcrK,GAC1CvI,EAASwI,SACblL,KAAKyC,SAASC,EAAUkS,IAK1B,IAAIlJ,EAAiBhJ,EAASgJ,KAC1BA,GACHzB,EAASwB,kBAAkBC,EAAM4J,EAAcrK,IAQ1CmI,EAAA9S,UAAAoV,YAAP,WACC1V,KAAKqT,oBAAoB1L,QACzB/H,EAAAU,UAAMoV,YAAW3V,KAAAC,OAUXoT,EAAA9S,UAAAqV,gBAAP,SAAuBjT,EAA6BkT,GAEnDhW,EAAAU,UAAMqV,gBAAe5V,KAAAC,KAAC0C,EAAUkT,GAOhC5V,KAAKqT,oBAAoB9P,OAAOb,EAAS6P,SAAU7P,IAI1C0Q,EAAA9S,UAAAuV,YAAV,SAAsBD,GACrB,IAAIrD,EAA4BqD,EAAY5V,KAAK8V,WAAWvD,UACxD7P,EAA8B1C,KAAKqT,oBAAoBpM,OAAOsL,GAElE,OAAI7P,GAII1C,KAAK6F,UAAUmC,UAcjBoL,EAAA9S,UAAA+R,gBAAP,SAAuBhG,EAAeR,GAChC1F,EAAA,SAAe0F,KACnBA,EAAW,IAGZ,IAAIjG,EAAqB5F,KAAK4F,WAC1BK,EAAmBjG,KAAKiG,SAExBuI,EAAqBxO,KAAKuE,iBAAiBqB,EAAYK,GAEvDiG,EAAgBlM,KAAKkM,cAGzBsC,GAActC,EACdsC,GAAe,EAHGxO,KAAKoM,YAKvB,IAAI1E,EAAa1H,KAAK0H,WAiCtB,OA/BApC,EAAA,aAAmBoC,EAAWlC,WAAY,SAACoC,GAC1C,IAAImO,EAA0BnO,EAAUY,mBACpCwN,EAAwBpO,EAAUW,iBAEtC,GAAI8D,EAAQzG,EACX,OAAO,EAGR,GAAIyE,EAAA,WAAkBxG,MAAOkS,EAAiBjS,IAAKkS,IAAmBnS,MAAO+B,EAAY9B,IAAKmC,IAAa,CAC1G8P,EAAkB/S,KAAKgB,IAAI4B,EAAYmQ,GACvCC,EAAgBhT,KAAKE,IAAI+C,EAAU+P,GAEnC,IAAI9L,EAAoBtC,EAAUsC,UAG9BmC,EAAQ2J,EACXpQ,IAAeoQ,EAAgBD,IAAoB,EAAI7L,GAG/CmC,EAAQ0J,IAKhB1J,EAAQ0J,GAAmB1J,EAAQ0J,GAAmB7L,GAIxD,OAAO,IAGDG,EAAA,OAAagC,EAAQR,EAAWK,EAAgBtG,GAAc4I,EAAY,IAa3E4E,EAAA9S,UAAA2V,mBAAP,SAA0B1D,EAAkB1G,GAC3C,IAAIQ,EAAgBrM,KAAKwS,gBAAgBD,GACzC,OAAOvS,KAAKqS,gBAAgBhG,EAAOR,IAY7BuH,EAAA9S,UAAA4V,gBAAP,SAAuB3D,EAAkB1G,GACxC,IAAId,EAAW/K,KAAKiW,mBAAmB1D,EAAU1G,GAC7CkB,EAAQ/M,KAAKiK,SAAS+C,gBAAgBjC,GACtCkC,EAAQjN,KAAKiK,SAASiD,gBAAgBnC,GAC1C,OAAShF,EAAGgH,EAAMhH,EAAGoH,EAAGJ,EAAMI,EAAGF,MAAOA,IAazCmG,EAAA9S,UAAA8M,WAAA,SAAWmF,EAAkB1G,GAC5B,OAAO7L,KAAKkW,gBAAgB3D,EAAU1G,IAahCuH,EAAA9S,UAAAuM,cAAP,SAAqB0F,EAAkB1G,GACtC,OAAO7L,KAAKiW,mBAAmB1D,EAAU1G,IASnCuH,EAAA9S,UAAAkS,gBAAP,SAAuBD,GACtB,GAAIpM,EAAA,SAAeoM,GAAW,CAC7B,IAAI7P,EAA8B1C,KAAKqT,oBAAoBpM,OAAOsL,GAClE,GAAI7P,EACH,OAAOA,EAAS2J,QAWZ+G,EAAA9S,UAAA6V,iBAAP,SAAwBC,EAAuBtD,GAC9C9S,KAAKqW,cAAcrW,KAAKwS,gBAAgB4D,GAAgBpW,KAAKwS,gBAAgBM,GAAe,IActFM,EAAA9S,UAAAgW,gBAAP,SAAuBzS,EAAeC,EAAaoI,EAAkCE,GACpF,IAAImK,EAAmBvW,KAAKiW,mBAAmBpS,EAAOqI,GAClDsK,EAAiBxW,KAAKiW,mBAAmBnS,EAAKsI,GAClD,OAAOpM,KAAKyW,qBAAqBF,EAAUC,IAWrCpD,EAAA9S,UAAAmP,cAAP,SAAqB1E,EAAkBc,GACtC,IAAIQ,EAAgBrM,KAAK6T,gBAAgB9I,GACzC,OAAO/K,KAAKqS,gBAAgBhG,EAAOR,IAS7BuH,EAAA9S,UAAA0T,uBAAP,SAA8BzO,EAAkBgN,GAE/C,IAAK,IAAIuB,EAAI,EAAGA,EAAIvO,EAAOM,UAAUsC,OAAQ2L,IAAK,CACjD,IAAIpR,EAAW6C,EAAOM,UAAU2G,SAASsH,GACzC,GAAIvO,EAAO2L,OAASlR,MACf0C,EAASgU,WAAanE,EACzB,OAAO7P,EAGT,GAAI6C,EAAO6L,OAASpR,MACf0C,EAASiU,WAAapE,EACzB,OAAO7P,IAYJ0Q,EAAA9S,UAAA4T,sBAAP,SAA6B3O,EAAkBgN,GAE9C,IAAK,IAAIuB,EAAIvO,EAAOM,UAAUsC,OAAS,EAAG2L,GAAK,EAAGA,IAAK,CACtD,IAAIpR,EAAW6C,EAAOM,UAAU2G,SAASsH,GACzC,GAAIvO,EAAO2L,OAASlR,MACf0C,EAASgU,WAAanE,EACzB,OAAO7P,EAGT,GAAI6C,EAAO6L,OAASpR,MACf0C,EAASiU,WAAapE,EACzB,OAAO7P,IAgBJ0Q,EAAA9S,UAAAsP,kBAAP,SAAyBrK,EAAkBwF,EAAkB8E,GAA7D,IAAA/P,EAAAE,KAEC,GAAImG,EAAA,SAAe4E,GAAW,CAE7B,IAAI6L,EAAQ5W,KAAK6T,gBAAgB9I,GAE7BrI,EAAW1C,KAAK6F,UAAU2G,SAASoK,GAEvC,GAAIlU,EAAU,CACb,IACImU,EADAC,EAAWpU,EAAS6P,SAGpBwE,EAAiBxR,EAAOM,UAAU2G,SAASoK,GAC/C,GAAIG,EAAgB,CACnB,GAAIxR,EAAO2L,OAASlR,MACf+W,EAAeL,WAAaI,EAC/B,OAAOC,EAGT,GAAIxR,EAAO6L,OAASpR,MACf+W,EAAeJ,WAAaG,EAC/B,OAAOC,EAmCV,OA7BAxR,EAAOM,UAAUU,KAAK,SAAC7D,GAClB6C,EAAO2L,OAASpR,GACf4C,EAASgU,WAAaI,IACpBD,IACJA,EAAMnU,GAEHM,KAAKyL,IAAImI,EAAQC,EAAIxK,OAASrJ,KAAKyL,IAAImI,EAAQlU,EAAS2J,SAC3DwK,EAAMnU,IAKL6C,EAAO6L,OAAStR,GACf4C,EAASiU,WAAaG,IACpBD,IACJA,EAAMnU,GAEHM,KAAKyL,IAAImI,EAAQC,EAAIxK,OAASrJ,KAAKyL,IAAImI,EAAQlU,EAAS2J,SAC3DwK,EAAMnU,MAWHmU,KAeHzD,EAAA9S,UAAAkN,KAAP,SAAY9K,EAA4ByE,EAAc0E,GACrD,IAAId,EAIJ,OAHI5E,EAAA,SAAegB,KAClB4D,EAAW/K,KAAKiW,mBAAmBvT,EAASsU,WAAW7P,GAAM0E,IAE1D1F,EAAA,MAAY4E,GACR/K,KAAKiX,UAAUlR,EAGf/F,KAAKiK,SAAS+C,gBAAgBjC,GAAUhF,GAc1CqN,EAAA9S,UAAAqN,KAAP,SAAYjL,EAA4ByE,EAAc0E,GACrD,IAAId,EAIJ,OAHI5E,EAAA,SAAegB,KAClB4D,EAAW/K,KAAKiW,mBAAmBvT,EAASsU,WAAW7P,GAAM0E,IAE1D1F,EAAA,MAAY4E,GACR/K,KAAKiX,UAAU9J,EAGfnN,KAAKiK,SAAS+C,gBAAgBjC,GAAUoC,GAe1CiG,EAAA9S,UAAAwN,SAAP,SAAgBpL,EAA4ByE,EAAa0E,EAAmBkC,GAC3E,OAAO/N,KAAKkN,gBAAgBlN,KAAKiW,mBAAmBvT,EAASsU,WAAW7P,GAAM0E,KAYxEuH,EAAA9S,UAAAoP,qBAAP,SAA4B3E,GAC3B,OAAO/K,KAAKyP,cAAc1E,EAAU,IAY9BqI,EAAA9S,UAAAqP,mBAAP,SAA0B5E,GACzB,OAAO/K,KAAKyP,cAAc1E,EAAU,IAW9BqI,EAAA9S,UAAA6O,eAAP,SAAsBpE,GACrB,IAAIrI,EAA8B1C,KAAK6F,UAAU2G,SAASxM,KAAK6T,gBAAgB9I,IAC/E,GAAIrI,EACH,OAAO1C,KAAKuP,QAAQC,MAAM,iBAAkB9M,EAAS6P,WAWhDa,EAAA9S,UAAAuT,gBAAP,SAAuB9I,IACtBA,EAAWV,EAAA,MAAYU,EAAU,KAClB,IACdA,EAAW,GAGZ,IAAInF,EAAqB5F,KAAK4F,WAC1BK,EAAmBjG,KAAKiG,SACxBuI,EAAqBvI,EAAWL,EAEhC8B,EAAa1H,KAAK0H,WAElB2E,EAAgB,KA0CpB,OAvCA/G,EAAA,aAAmBoC,EAAWlC,WAAY,SAACoC,GAC1C,IAAIsP,EAA6BtP,EAAUU,cACvC6O,EAA2BvP,EAAUS,YAErC0N,EAA0BnO,EAAUY,mBACpCwN,EAAwBpO,EAAUW,iBAEtCwN,EAAkB1L,EAAA,IAAU0L,EAAiBnQ,GAC7CoQ,EAAgB3L,EAAA,IAAU2L,EAAe/P,GAEzC,IAAIiE,EAAoBtC,EAAUsC,UAKlC,GAHAsE,IAAewH,EAAgBD,IAAoB,EAAI7L,GAGnDa,EAAWoM,EACdvR,IAAeoQ,EAAgBD,IAAoB,EAAI7L,QAGnD,KAAIa,EAAWmM,GAIf,CACJ,IAAIE,GAAiBrM,EAAWmM,IAAuBC,EAAmBD,GAE1E,OADA7K,EAAQ0J,EAAkB/S,KAAKC,MAAMmU,GAAiBpB,EAAgBD,KAC/D,EAGR,OAAO,IAGH5P,EAAA,SAAekG,KACnBA,EAAQrJ,KAAKqC,MAAM0F,EAAWyD,EAAa5I,IAExCyG,GAASpG,GACZoG,IAGMA,GAeD+G,EAAA9S,UAAAgP,iBAAP,SAAwBvE,GACvB,IAAIrI,EAA8B1C,KAAK6F,UAAU2G,SAASxM,KAAK6T,gBAAgB9I,IAC/E,GAAIrI,EACH,OAAOA,EAAS6P,UAUlBnS,OAAAC,eAAW+S,EAAA9S,UAAA,iBAAX,WAGC,OAAON,KAAKiK,SAAS+C,gBAAgB,oCAQ/BoG,EAAA9S,UAAA0P,aAAP,WACCpQ,EAAAU,UAAM0P,aAAYjQ,KAAAC,MAEHA,KAAKiK,SACXkG,SAAS/E,UAAW,GAa9BhL,OAAAC,eAAW+S,EAAA9S,UAAA,iBAAX,WACC,OAAON,KAAK2U,4CAEdvB,EAx5BA,CAAyEF,EAAA,GAg6BzEjS,EAAA,EAASC,kBAAgC,aAAIiS,EAC7ClS,EAAA,EAASC,kBAAwC,qBAAIwR,8EC7iCrD2E,EAAA,SAAAzX,GAsCC,SAAA0X,IAAA,IAAAxX,EACCF,EAAAG,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,mBAEjBH,EAAKuB,OAAOkW,QAAW3J,MAAO,GAC9B9N,EAAKuB,OAAOmW,QAAW5J,MAAO,GAC9B9N,EAAKuB,OAAOoW,cACZ3X,EAAKuB,OAAOqW,cAEZ5X,EAAKuB,OAAO8P,SACZrR,EAAKuB,OAAOgQ,SACZvR,EAAKuB,OAAOsW,aACZ7X,EAAKuB,OAAOuW,aAEZ9X,EAAK+X,YAAY,QAAS,GAAK,GAC/B/X,EAAK+X,YAAY,QAAS,GAAK,GAE/B/X,EAAK+X,YAAY,YAAa,GAAK,GACnC/X,EAAK+X,YAAY,YAAa,GAAK,GAEnC/X,EAAKI,eA8QP,OAzUsCC,EAAA,EAAAmX,EAAA1X,GAmErCQ,OAAAC,eAAWiX,EAAAhX,UAAA,cAOX,WACC,OAAON,KAAKqB,OAAOkW,OAAO/W,WAR3B,SAAkBA,GACjBR,KAAK8X,SAAS,SAAUtX,oCAezBJ,OAAAC,eAAWiX,EAAAhX,UAAA,cAOX,WACC,OAAON,KAAKqB,OAAOmW,OAAOhX,WAR3B,SAAkBA,GACjBR,KAAK8X,SAAS,SAAUtX,oCAezBJ,OAAAC,eAAWiX,EAAAhX,UAAA,aAOX,WACC,OAAON,KAAKqH,QAAQ,cARrB,SAAiB/F,GAChBtB,KAAKyB,QAAQ,QAASH,oCAevBlB,OAAAC,eAAWiX,EAAAhX,UAAA,aAOX,WACC,OAAON,KAAKqH,QAAQ,cARrB,SAAiB/F,GAChBtB,KAAKyB,QAAQ,QAASH,oCAevBlB,OAAAC,eAAWiX,EAAAhX,UAAA,iBAOX,WACC,OAAON,KAAKgX,WAAWN,eARxB,SAAqBnE,GACpBvS,KAAK+X,YAAY,YAAaxF,oCAe/BnS,OAAAC,eAAWiX,EAAAhX,UAAA,iBAOX,WACC,OAAON,KAAKgX,WAAWL,eARxB,SAAqBpE,GACpBvS,KAAK+X,YAAY,YAAaxF,oCAe/BnS,OAAAC,eAAWiX,EAAAhX,UAAA,kBAOX,WACC,OAAON,KAAKqB,OAAOoW,WAAWjX,WAR/B,SAAsBA,GACrBR,KAAK8X,SAAS,aAActX,oCAe7BJ,OAAAC,eAAWiX,EAAAhX,UAAA,kBAOX,WACC,OAAON,KAAKqB,OAAOqW,WAAWlX,WAR/B,SAAsBA,GACrBR,KAAK8X,SAAS,aAActX,oCAe7BJ,OAAAC,eAAWiX,EAAAhX,UAAA,iBAOX,WACC,OAAON,KAAKqH,QAAQ,kBARrB,SAAqB/F,GACpBtB,KAAKyB,QAAQ,YAAaH,oCAe3BlB,OAAAC,eAAWiX,EAAAhX,UAAA,iBAOX,WACC,OAAON,KAAKqH,QAAQ,kBARrB,SAAqB/F,GACpBtB,KAAKyB,QAAQ,YAAaH,oCAe3BlB,OAAAC,eAAWiX,EAAAhX,UAAA,qBAOX,WACC,OAAON,KAAKgX,WAAWgB,mBARxB,SAAyBzF,GACxBvS,KAAKiT,YAAY,gBAAiBV,oCAenCnS,OAAAC,eAAWiX,EAAAhX,UAAA,qBAOX,WACC,OAAON,KAAKgX,WAAWiB,mBARxB,SAAyB1F,GACxBvS,KAAKiT,YAAY,gBAAiBV,oCAmB5B+E,EAAAhX,UAAA4X,OAAP,SAAcC,EAAkBC,EAAmBC,GAAnD,IAEKnV,EAFLpD,EAAAE,KAwBC,OApBKmG,EAAA,SAAekS,KACnBA,EAAa,GAGdC,EAAA,KAAYH,EAAQ,SAACzH,GACpB,IAAIlQ,EAGHA,EADG4X,EACKtY,EAAKyY,gBAAgB7H,GAGrB5Q,EAAK+N,SAAS6C,KAGvBlQ,GAAS6X,GAEGnV,IAAQiD,EAAA,SAAejD,MAClCA,EAAM1C,KAGD0C,GAaDoU,EAAAhX,UAAAkY,OAAP,SAAcL,EAAkBC,EAAmBC,GAAnD,IAEKrU,EAFLlE,EAAAE,KAyBC,OArBKmG,EAAA,SAAekS,KACnBA,EAAa,GAGdC,EAAA,KAAYH,EAAQ,SAACzH,GACpB,IAAIlQ,EAGHA,EADG4X,EACKtY,EAAKyY,gBAAgB7H,GAGrB5Q,EAAK+N,SAAS6C,KAGvBlQ,GAAS6X,GAEGrU,IAAQmC,EAAA,SAAenC,MAClCA,EAAMxD,KAIDwD,GAITsT,EAzUA,CAAsCmB,EAAA,GAigBtCC,EAAA,SAAA9Y,GA4IC,SAAA+Y,IAAA,IAAA7Y,EACCF,EAAAG,KAAAC,OAAOA,YA/GEF,EAAA8Y,OAAS,IAAIC,EAAA,EAKb/Y,EAAAgZ,OAAS,IAAID,EAAA,EAwEb/Y,EAAAiZ,iBAOAjZ,EAAAkZ,iBAoBHlZ,EAAA+G,iBAQN/G,EAAKG,UAAY,WACjBH,EAAKmZ,YAAa,EAElBnZ,EAAKoZ,sBAAuB,EAE5BpZ,EAAKqZ,oBAAqB,EAE1BrZ,EAAKsZ,cAAc1N,KAAO,IAAI2N,EAAA,EAC9BvZ,EAAKsZ,cAAc1N,KAAK4N,WAAWxZ,EAAKyZ,MAAMC,IAAI,SAElD1Z,EAAK2Z,SAAU,EACf3Z,EAAKwC,aAAc,EAEnBxC,EAAK4Z,QAAQC,mBAAqB,aAElC7Z,EAAK4Z,QAAQE,OAAOC,GAAG,SAAU,WAChC/Z,EAAKga,iCACH/R,GAAW,GAEdjI,EAAKyT,WAAW7B,KAAK5R,EAAK8Y,QAC1B9Y,EAAKyT,WAAW7B,KAAK5R,EAAKgZ,QAE1BhZ,EAAKI,eA4wCP,OAh7C8BC,EAAA,EAAAwY,EAAA/Y,GA2KnB+Y,EAAArY,UAAA+C,sBAAV,WACCzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MACtBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,gBAUnCkV,EAAArY,UAAAoD,eAAV,WACC,OAAO,IAAI2T,GAMLsB,EAAArY,UAAA0Z,iBAAP,WACCha,KAAKia,MAAMtS,QACX3H,KAAKka,MAAMvS,QAEX3H,KAAKma,MAAMxS,QACX3H,KAAKoa,MAAMzS,QAGP3H,KAAKkR,OACRlR,KAAKkR,MAAMzK,uBAAuBzG,MAG/BA,KAAKoR,OACRpR,KAAKoR,MAAM3K,uBAAuBzG,OAS7B2Y,EAAArY,UAAA4F,aAAP,WAWC,GAVAlG,KAAKqa,eAEDra,KAAKsa,KAAKnS,OAAS,GACtBnI,KAAKga,mBAGNpa,EAAAU,UAAM4F,aAAYnG,KAAAC,MAElBA,KAAKua,wBAEApU,EAAA,SAAenG,KAAK8V,WAAsC9V,KAAKwa,YAAcrU,EAAA,SAAenG,KAAK8V,WAAsC9V,KAAKya,UAChJ,MAAMC,MAAM,4BAA+B1a,KAAK2a,KAAO3a,KAAK2a,KAAO3a,KAAKwG,KAAO,gCAWvEmS,EAAArY,UAAAqV,gBAAV,SAA0BjT,EAA6BkT,GAEtD,IACChW,EAAAU,UAAMqV,gBAAe5V,KAAAC,KAAC0C,EAAUkT,GAEhClT,EAASkX,OAAOgB,UAChB5a,KAAKkR,MAAMhD,sBAAsBxL,EAAU,KAC3C1C,KAAKoR,MAAMlD,sBAAsBxL,EAAU,KAE3CA,EAASkX,OAAOiB,SAEhB7a,KAAK8a,wBAAwBpY,GAE9B,MAAOqY,GACN/a,KAAKgb,OAAOC,mBAAmBF,KAWvBpC,EAAArY,UAAAwa,wBAAV,SAAkCpY,KAO3BiW,EAAArY,UAAAoV,YAAP,WAEC,GADA9V,EAAAU,UAAMoV,YAAW3V,KAAAC,MACbA,KAAKkR,MAAO,CACf,IAAIgK,EAAalb,KAAKgH,gBAAgBC,OAAOjH,KAAKkR,MAAM1K,KACpD0U,GACHA,EAAWvT,QAGb,GAAI3H,KAAKoR,MAAO,CACf,IAAI+J,EAAanb,KAAKgH,gBAAgBC,OAAOjH,KAAKoR,MAAM5K,KACpD2U,GACHA,EAAWxT,UAUJgR,EAAArY,UAAA+Z,aAAV,WACC,IAAInJ,EAAclR,KAAKkR,MACnBE,EAAcpR,KAAKoR,MAEnBgK,EAAyBlK,EAAM1O,cAC/B6Y,EAA8ED,EAAiB,IAC/FE,EAAkF,OAASC,EAAA,WAAkBH,GAAkB,IAE/HI,EAAyBpK,EAAM5O,cAC/BiZ,EAA8ED,EAAiB,IAC/FE,EAAkF,OAASH,EAAA,WAAkBC,GAAkB,IAEnIxb,KAAKwa,QAAUa,EACfrb,KAAKya,QAAUgB,EAEXzb,KAAK8V,WAAWwF,KACnBtb,KAAK2b,YAAcL,GAGhBtb,KAAK8V,WAAW4F,KACnB1b,KAAK4b,YAAcF,GAGf1b,KAAK8V,WAAW4F,IAAe1b,KAAKyF,UAAYzF,KAAKoR,QACzDpR,KAAK4b,YAAcH,GAGfzb,KAAK8V,WAAWwF,IAAetb,KAAKyF,UAAYzF,KAAKkR,QACzDlR,KAAK2b,YAAcN,GAGhBrb,KAAKyZ,SAAWzZ,KAAKyF,UAAYzF,KAAKkR,QACzClR,KAAK2b,YAAcN,GAGhBrb,KAAKyZ,SAAWzZ,KAAKyF,UAAYzF,KAAKoR,QACzCpR,KAAK4b,YAAcH,GAGfzb,KAAKkR,iBAAiBiC,GAAkBnT,KAAKoR,iBAAiB+B,IAC7DnT,KAAK4b,cACT5b,KAAK4b,YAAcH,IAIrBzb,KAAK+Y,iBACL/Y,KAAKgZ,iBAELhZ,KAAK6b,cAAc7b,KAAKkR,MAAYlR,KAAK+Y,cAAoB/Y,KAAKwa,SAClExa,KAAK6b,cAAc7b,KAAKkR,MAAYlR,KAAK+Y,cAAoB/Y,KAAK2b,aAElE3b,KAAK6b,cAAc7b,KAAKoR,MAAYpR,KAAKgZ,cAAoBhZ,KAAKya,SAClEza,KAAK6b,cAAc7b,KAAKoR,MAAYpR,KAAKgZ,cAAoBhZ,KAAK4b,cAWzDjD,EAAArY,UAAAub,cAAV,SAA+Djb,EAAYuX,EAAoBzH,GAC1F9P,aAAgBc,EAAA,GACfyE,EAAA,SAAenG,KAAK8V,WAAWpF,MAAqC,GAA1ByH,EAAO2D,QAAQpL,IAC5DyH,EAAOzG,KAAKhB,IAcLiI,EAAArY,UAAAyb,qBAAV,SAAsErL,EAAY9P,GAC5EuF,EAAA,SAAenG,KAAK8V,WAAWpF,MACnC1Q,KAAK8V,WAAWpF,GAAc9P,EAAKkV,WAAWvD,WAatCoG,EAAArY,UAAA0b,iBAAV,SAAkEtL,EAAY9P,GACxEuF,EAAA,SAAenG,KAAK8V,WAAWpF,MACnC1Q,KAAK8V,WAAWpF,GAAc9P,EAAKkV,WAAWxU,OAOtCqX,EAAArY,UAAA2b,UAAV,WACCrc,EAAAU,UAAM2b,UAASlc,KAAAC,MACfA,KAAKkc,cAQCvD,EAAArY,UAAA4b,WAAP,WAEC,GAAIlc,KAAKoZ,cAAc1N,KAAM,CAC5B,IAAIyQ,EAAenc,KAAKoc,cAGxB9W,EAAA,KAAWtF,KAAKqc,WAAW7W,WAAY,SAAC8W,GACnCA,EAAMnZ,SAASoZ,WAClBD,EAAMnZ,SAASgR,WACfgI,GAAQG,EAAMnZ,SAASoZ,YAIzBvc,KAAKoZ,cAAc1N,KAAK8Q,KAAOL,IASvBxD,EAAArY,UAAA8b,YAAV,WACC,OAAOK,EAAA,YACN1W,EAAG,EACHoH,EAAG,EACHuP,MAAO1c,KAAKkR,MAAMqD,WAClBoI,OAAQ3c,KAAKoR,MAAMmD,cAUdoE,EAAArY,UAAAqF,aAAP,SAAoB/E,GACnB,OAAIA,GAAQZ,KAAKkR,MACTlR,KAAKqb,OAETza,GAAQZ,KAAKoR,MACTpR,KAAKyb,YADb,GAUM9C,EAAArY,UAAAsD,kBAAP,WAGC5D,KAAKkR,MAAMvC,qBACX3O,KAAKoR,MAAMzC,qBAEX/O,EAAAU,UAAMsD,kBAAiB7D,KAAAC,MAEvBA,KAAKkR,MAAMxK,6BACX1G,KAAKoR,MAAM1K,8BAQLiS,EAAArY,UAAAkT,kBAAP,WACKxT,KAAKkR,MAAM0L,kBACd5c,KAAKkR,MAAMsC,oBAGRxT,KAAKoR,MAAMwL,kBACd5c,KAAKoR,MAAMoC,oBAGZ5T,EAAAU,UAAMkT,kBAAiBzT,KAAAC,OAQjB2Y,EAAArY,UAAA6T,SAAP,WACKnU,KAAKkR,MAAMmD,SACdrU,KAAKkR,MAAMiD,WAGRnU,KAAKoR,MAAMiD,SACdrU,KAAKoR,MAAM+C,WAGZnU,KAAKmN,EAAInN,KAAKoR,MAAMyL,OACpB7c,KAAK+F,EAAI/F,KAAKkR,MAAM4L,OAGpB9c,KAAK+c,cAAe,EACpB,IAAIC,EAA4Bhd,KAAKgd,kBACjC7W,EAAA,SAAe6W,IACdhd,KAAKyF,SAAS8O,YAAcvU,KAAKiG,SAAWjG,KAAK4F,YAAcoX,IAClEhd,KAAK+c,cAAe,GAItBnd,EAAAU,UAAM6T,SAAQpU,KAAAC,OAQfI,OAAAC,eAAWsY,EAAArY,UAAA,aAqBX,WACC,GAAIN,KAAK6R,MAAO,CACf,IAAK7R,KAAK4Y,OAAOqE,MAAO,CACvB,IAAMrc,EAAOZ,KAAK6R,MAAMqL,MAAM1Q,SAAS,GAEvC,IAAK5L,EACJ,MAAM8Z,MAAM,iCAGb1a,KAAKkR,MAAQtQ,EAEd,OAAOZ,KAAK4Y,OAAOqE,YAhCrB,SAAiBrc,GAChB,IAAIuc,EAAUnd,KAAK4Y,OAAOqE,MACtBE,GAAWvc,IACVuc,IACHnd,KAAKgH,gBAAgBoW,UAAUD,EAAQ3W,KAEvCxG,KAAK4Y,OAAOyE,UAEZF,EAAQ5X,OAAO+X,YAAYtd,OAG5BA,KAAK4Y,OAAO2E,IAAI3c,EAAMA,EAAK4c,eAAexd,OAE1CA,KAAKgH,gBAAgBzD,OAAO3C,EAAK4F,IAAK,IAAIxE,EAAA,GAC1ChC,KAAK6O,mDA2BPzO,OAAAC,eAAWsY,EAAArY,UAAA,aAqBX,WACC,GAAIN,KAAK6R,MAAO,CACf,IAAK7R,KAAK8Y,OAAOmE,MAAO,CACvB,IAAMrc,EAAOZ,KAAK6R,MAAM4L,MAAMjR,SAAS,GAEvC,IAAK5L,EACJ,MAAM8Z,MAAM,iCAGb1a,KAAKoR,MAAQxQ,EAGd,OAAOZ,KAAK8Y,OAAOmE,YAjCrB,SAAiBrc,GAChB,IAAIuc,EAAUnd,KAAK8Y,OAAOmE,MACtBE,GAAWvc,IACVuc,IACHnd,KAAKgH,gBAAgBoW,UAAUD,EAAQ3W,KAEvCxG,KAAK8Y,OAAOuE,UAEZF,EAAQ5X,OAAO+X,YAAYtd,OAG5BA,KAAK8Y,OAAOyE,IAAI3c,EAAMA,EAAK4c,eAAexd,OAE1CA,KAAKgH,gBAAgBzD,OAAO3C,EAAK4F,IAAK,IAAIxE,EAAA,GAC1ChC,KAAK6O,mDA+BPzO,OAAAC,eAAWsY,EAAArY,UAAA,gBAUX,WAsBC,OArBKN,KAAK0d,YACL1d,KAAKoR,iBAAiBzP,IACzB3B,KAAK0d,UAAY1d,KAAKoR,OAGnBpR,KAAKkR,iBAAiBvP,IACzB3B,KAAK0d,UAAY1d,KAAKkR,OAGnBlR,KAAKoR,iBAAiB+B,IACzBnT,KAAK0d,UAAY1d,KAAKoR,OAGnBpR,KAAKkR,iBAAiBiC,IACzBnT,KAAK0d,UAAY1d,KAAKkR,OAGlBlR,KAAK0d,YACT1d,KAAK0d,UAAY1d,KAAKkR,QAGjBlR,KAAK0d,eAhCb,SAAoBld,GACfR,KAAK0d,WAAald,IACrBR,KAAK0d,UAAYld,EACjBR,KAAKa,+CAsCA8X,EAAArY,UAAAqd,cAAP,SAAqBvF,GAEpBxY,EAAAU,UAAMqd,cAAa5d,KAAAC,KAACoY,GAEpB,IAAIvS,EAAY7F,KAAK6F,UAEjB+X,EAAOC,IACPC,GAASD,IAETE,EAAOF,IACPG,GAASH,IAETjY,EAAa5F,KAAK4F,WAClBK,EAAWjG,KAAKiG,SAEfmS,IACJxS,EAAa,EACbK,EAAWjG,KAAK6F,UAAUsC,QAG3B,IAAK,IAAI2L,EAAIlO,EAAYkO,EAAI7N,EAAU6N,IAAK,CAC3C,IAAIpR,EAAWmD,EAAU2G,SAASsH,GAElC9T,KAAKie,cAAcvb,EAAU0V,GAE7B,IAAI8F,EAASxb,EAASmL,SAAS,SAAU,SACrCsQ,EAASzb,EAASmL,SAAS,SAAU,SAEzC+P,EAAOvT,EAAA,IAAU3H,EAASwV,OAAOlY,KAAK+Y,cAAeX,EAAS8F,GAASN,GACvEG,EAAO1T,EAAA,IAAU3H,EAASwV,OAAOlY,KAAKgZ,cAAeZ,EAAS+F,GAASJ,GAEvED,EAAOzT,EAAA,IAAU3H,EAAS8V,OAAOxY,KAAK+Y,cAAeX,EAAS8F,GAASJ,GACvEE,EAAO3T,EAAA,IAAU3H,EAAS8V,OAAOxY,KAAKgZ,cAAeZ,EAAS+F,GAASH,GAGnEhe,KAAKyZ,UACJzZ,KAAKyF,UAAYzF,KAAKkR,QACzB6M,EAAO1T,EAAA,IAAU0T,EAAMI,IAEpBne,KAAKyF,UAAYzF,KAAKoR,QACzBwM,EAAOvT,EAAA,IAAUuT,EAAMM,KAM1Ble,KAAKkR,MAAMkN,yBACXpe,KAAKoR,MAAMgN,yBAEX,IAAIC,EAAkBre,KAAKkR,MAAM1K,IAC7B8X,EAAkBte,KAAKoR,MAAM5K,IAE5B4R,GACApY,KAAKia,MAAMhT,OAAOoX,IAAYT,GAAQ5d,KAAKka,MAAMjT,OAAOoX,IAAYP,GAAQ9d,KAAKia,MAAMhT,OAAOqX,IAAYP,GAAQ/d,KAAKka,MAAMjT,OAAOqX,IAAYN,IACnJhe,KAAKia,MAAM1W,OAAO8a,EAAST,GAC3B5d,KAAKka,MAAM3W,OAAO8a,EAASP,GAC3B9d,KAAKia,MAAM1W,OAAO+a,EAASP,GAC3B/d,KAAKka,MAAM3W,OAAO+a,EAASN,GAEvBhe,KAAKue,eACRve,KAAKue,cAAcZ,eAAc,GAGlC3d,KAAKwe,oBAAoB,oBAIvBxe,KAAKma,MAAMlT,OAAOoX,IAAYT,GAAQ5d,KAAKoa,MAAMnT,OAAOoX,IAAYP,GAAQ9d,KAAKma,MAAMlT,OAAOqX,IAAYP,GAAQ/d,KAAKoa,MAAMnT,OAAOqX,IAAYN,IACnJhe,KAAKma,MAAM5W,OAAO8a,EAAST,GAC3B5d,KAAKoa,MAAM7W,OAAO8a,EAASP,GAC3B9d,KAAKma,MAAM5W,OAAO+a,EAASP,GAC3B/d,KAAKoa,MAAM7W,OAAO+a,EAASN,IAEvBhe,KAAKye,UAA0B,GAAdze,KAAK6D,OAA0B,GAAZ7D,KAAK8D,MAC5C9D,KAAKwe,oBAAoB,8BAUrB7F,EAAArY,UAAAsR,YAAP,WACChS,EAAAU,UAAMsR,YAAW7R,KAAAC,MACjBA,KAAK8Z,2BACL9Z,KAAK0e,0BAAuB3W,GAUtB4Q,EAAArY,UAAAuQ,sBAAP,SAA6B8N,EAAmBC,GAC/C,GAAI5e,KAAKkZ,qBAAsB,CAC9B,IAAIxW,OAAQ,EAEZ,GAAI1C,KAAK6e,UAAY7e,KAAK8e,WAAa9e,KAAK+e,UAAW,CAEtD,IAAI7N,EAAclR,KAAK4Y,OAAOqE,MAC1B7L,EAAcpR,KAAK8Y,OAAOmE,MAE1B/L,GAASlR,KAAKyF,WACjB/C,EAA8BwO,EAAMtB,kBAAkB5P,KAAMkR,EAAMH,eAAe4N,GAAY3e,KAAKsC,cAE/F8O,GAASpR,KAAKyF,WACjB/C,EAA8B0O,EAAMxB,kBAAkB5P,KAAMoR,EAAML,eAAe6N,GAAY5e,KAAKsC,cAGnG,IAAIyK,EAAQ/M,KAAKyR,sBAAsB/O,GAEvC,GAAIqK,EACH,OAAOA,EAIR,IAAK/M,KAAK2R,YACT,OAIF3R,KAAK4R,gBAUA+G,EAAArY,UAAAmR,sBAAP,SAA6B/O,GAE5B,GADA1C,KAAK8Z,yBAAyBpX,GAC1B1C,KAAKkZ,sBACJxW,GAAYA,EAASmc,QAAS,CAEjC7e,KAAKgf,kBAAkBtc,GACvB1C,KAAKif,gBAAkBvc,EAGvB,IAAIwc,EAAgBlf,KAAKkf,cACrBC,EAAgBnf,KAAKmf,cAEzB,GAAIhZ,EAAA,SAAqBzD,EAAUwc,KAAmB/Y,EAAA,SAAqBzD,EAAUyc,IAAiB,CAErG,IAAIC,EAAepf,KAAKqf,SAAS3c,EAAUwc,EAAeC,EAAezc,EAASmQ,UAAUqM,GAAgBxc,EAASmQ,UAAUsM,IAE/H,GAAIC,EAAc,CAejB,GAbApf,KAAKsf,SAAWF,EAAarZ,EAC7B/F,KAAKuf,SAAWH,EAAajS,EAEzBnN,KAAK0e,sBAAwBhc,IAChC1C,KAAKwe,oBAAoB,kBACxBgB,KAAM,iBACNC,OAAQzf,KACR0C,SAAUA,IAGX1C,KAAK0e,qBAAuBhc,GAGzB1C,KAAKmZ,uBACR,IAAmB,IAAAuG,EAAAvf,EAAA,EAAAuC,EAASid,SAAOC,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAA,CAA9B,IAAIE,EAAMH,EAAApf,OACTuf,EAAOC,OAAOnB,SAAWkB,EAAOE,UAAYF,EAAO3c,YAAc2c,EAAO3U,UAAY2U,EAAOjB,WAI/FiB,EAAOG,SAAU,qGAKpB,OAAIlgB,KAAKmgB,cACD5E,EAAA,kBAA0BxV,EAAGqZ,EAAarZ,EAAGoH,EAAGiS,EAAajS,GAAKnN,WAE1E,aAWK2Y,EAAArY,UAAAwZ,yBAAV,SAAmCpX,GAClC,GAAI1C,KAAK0e,sBAAwB1e,KAAK0e,sBAAwBhc,MAC7D,IAAmB,IAAAgd,EAAAvf,EAAA,EAAAH,KAAK0e,qBAAqBiB,SAAOC,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAA,CAA/C,IAAIE,EAAMH,EAAApf,MACTuf,EAAOK,aAIXpgB,KAAK0e,0BAAuB3W,EAH5BgY,EAAOG,SAAU,6GAedvH,EAAArY,UAAA+f,eAAP,SAAsBC,GACrB1gB,EAAAU,UAAM+f,eAActgB,KAAAC,KAACsgB,GAErB,IAAI5d,EAA+C4d,EAAO5d,SAGtD2Y,EAAiBiF,EAAOjF,OACvBlV,EAAA,SAAekV,KACnBA,EAASrb,KAAKqb,QAGf,IAAII,EAAiB6E,EAAO7E,OAK5B,GAJKtV,EAAA,SAAesV,KACnBA,EAASzb,KAAKyb,QAGVzb,KAAKkR,iBAAiBxP,EAAA,IAAcgB,EAAS6d,UAAUlF,KAAcrb,KAAKoR,iBAAiB1P,EAAA,IAAcgB,EAAS6d,UAAU9E,IAChI6E,EAAOzB,SAAU,MAEb,CACJ,IAAI2B,EAA0BxgB,KAAKygB,mBAAmBH,EAAQjF,GAC1DqF,EAA0B1gB,KAAK2gB,mBAAmBL,EAAQ7E,GAE1D1O,EAAQ/M,KAAKqf,SAAS3c,EAAU2Y,EAAQI,EAAQ+E,EAAiBE,GACrE,GAAI3T,EAAO,CACV,IAAIhH,EAAYgH,EAAMhH,EAClBoH,EAAYJ,EAAMI,EAEtB,GAAIhH,EAAA,SAAema,EAAOM,YAAc5gB,KAAKsb,YAActb,KAAKqb,OAE/DtV,IAASA,EADW/F,KAAKkR,MAAM1D,KAAK9K,EAAU1C,KAAKsb,aAC7BgF,EAAOM,UAI9B,GAAIza,EAAA,SAAema,EAAOO,YAAc7gB,KAAK0b,YAAc1b,KAAKyb,OAE/DtO,IAASA,EADWnN,KAAKoR,MAAMzD,KAAKjL,EAAU1C,KAAK0b,aAC7B4E,EAAOO,UAG9BP,EAAOQ,QAAS/a,EAAGA,EAAGoH,EAAGA,SAGzBmT,EAAOzB,SAAU,IASVlG,EAAArY,UAAAmgB,mBAAV,SAA6BH,EAAgB5P,GAC5C,IAAIqQ,EAAyBT,EAAOM,UAChCle,EAAW4d,EAAO5d,SAItB,OAHKyD,EAAA,SAAe4a,KACnBA,EAAiBre,EAASsL,iBAAiB0C,IAErCqQ,GAQEpI,EAAArY,UAAAqgB,mBAAV,SAA6BL,EAAgB5P,GAC5C,IAAIqQ,EAAyBT,EAAOO,UAChCne,EAAW4d,EAAO5d,SAItB,OAHKyD,EAAA,SAAe4a,KACnBA,EAAiBre,EAASsL,iBAAiB0C,IAErCqQ,GASR3gB,OAAAC,eAAWsY,EAAArY,UAAA,eAOX,WACC,OAAON,KAAKO,iBAAiB,gBAR9B,SAAmBkZ,GAClBzZ,KAAKS,iBAAiB,UAAWgZ,GAAS,oCAiB3CrZ,OAAAC,eAAWsY,EAAArY,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKS,iBAAiB,cAAeD,oCAiB/BmY,EAAArY,UAAA0gB,KAAP,SAAY1U,GAAZ,IAEK6L,EAFLrY,EAAAE,KAGKA,KAAKkR,iBAAiBxP,EAAA,GAAa1B,KAAKkR,OAASlR,KAAKyF,WACzD0S,EAASnY,KAAK+Y,eAGX/Y,KAAKoR,iBAAiB1P,EAAA,GAAa1B,KAAKoR,OAASpR,KAAKyF,WACzD0S,EAASnY,KAAKgZ,eAGf,IASIiI,EATArb,EAAqB5F,KAAK4F,WAC1BK,EAAmBjG,KAAKiG,SACxBib,EAAgB,EAEhBC,EAAwBnhB,KAAKohB,aAAaC,mBAC1Clb,EAAA,SAAemG,KAClB6U,EAAwB7U,GAIzBhH,EAAA,KAAWA,EAAA,QAActF,KAAK6F,UAAUL,YAAa,SAAC8b,GACrD,IAAIxN,EAAIwN,EAAE,GACN5e,EAAW4e,EAAE,GAEbxhB,EAAKyhB,wBAA0BJ,EAAwB,IAC1DD,EAAQphB,EAAK0hB,4BAA8B1N,EAAIqN,GAAyBrN,EAAIlO,IAAeK,EAAWL,IAEvGqb,EAAOve,EAASse,KAAKG,EAAuBD,EAAO/I,KAGpD,IAAIsJ,EAAY7hB,EAAAU,UAAM0gB,KAAIjhB,KAAAC,KAACsM,GAM3B,OAJI2U,IAASA,EAAKS,eACjBD,EAAYR,GAGNQ,GASD9I,EAAArY,UAAAqhB,KAAP,SAAYrV,GAAZ,IAEK6L,EACA3X,EAHLV,EAAAE,KAIKkR,EAAclR,KAAKkR,MAEnBA,aAAiBxP,EAAA,GAAawP,GAASlR,KAAKyF,WAC/C0S,EAASnY,KAAK+Y,cAGbvY,EADGR,KAAKyZ,SAAYvI,EAAM0Q,UAAY,GAAK1Q,EAAMlL,UAAY,GAAMhG,KAAKue,cAChE,EAGArN,EAAMhO,KAIhB,IAAIkO,EAAcpR,KAAKoR,MACnBA,aAAiB1P,EAAA,GAAa0P,GAASpR,KAAKyF,WAC/C0S,EAASnY,KAAKgZ,cAGbxY,EADGR,KAAKyZ,SAAYrI,EAAMwQ,UAAY,GAAKxQ,EAAMpL,UAAY,GAAMhG,KAAKue,cAChE,EAGAnN,EAAMlO,KAKhB,IAAI0C,EAAqB5F,KAAK4F,WAC1BK,EAAmBjG,KAAKiG,SAExBkb,EAAwBnhB,KAAK6hB,YAAYR,mBACzClb,EAAA,SAAemG,KAClB6U,EAAwB7U,GAGzB,IACI2U,EADAC,EAAgB,EAGpB5b,EAAA,KAAWA,EAAA,QAActF,KAAK6F,UAAUL,YAAa,SAAC8b,GACrD,IAAIxN,EAAIwN,EAAE,GACN5e,EAAW4e,EAAE,GAEY,GAAzBH,EACHze,EAASif,KAAK,EAAG,EAAGnhB,EAAO2X,IAGvBrY,EAAKyhB,wBAA0BJ,EAAwB,IAC1DD,EAAQphB,EAAK0hB,4BAA8B1N,EAAIqN,GAAyBrN,EAAIlO,IAAeK,EAAWL,IAEvGqb,EAAOve,EAASif,KAAKR,EAAuBD,EAAO1gB,EAAO2X,MAI5D,IAAIsJ,EAAY7hB,EAAAU,UAAMqhB,KAAI5hB,KAAAC,KAACmhB,GAY3B,OAXIM,IAAcA,EAAUC,cAC3BD,EAAUP,MAAMA,GAGbD,IAASA,EAAKS,eACjBD,EAAYR,GAIbjhB,KAAK8hB,uBAEEL,GAQD9I,EAAArY,UAAAyhB,iCAAP,SAAwCrf,EAA8BiY,GACrE/a,EAAAU,UAAMyhB,iCAAgChiB,KAAAC,KAAC0C,EAAUiY,GAGjD,IAAIqH,EAA6ChiB,KAAKyF,SAASF,OAE/DD,EAAA,KAAW0c,EAAWxc,WAAY,SAACD,GAC9BA,EAAOkU,SACVlU,EAAO0c,6BAYHtJ,EAAArY,UAAA2d,cAAP,SAAqBvb,EAA6B0V,GAAlD,IAAAtY,EAAAE,KAIC,GAAKA,KAAKyZ,QAAV,CAKC,IAGI/T,EAHAmM,EAAiB7R,KAAK6R,MACtBxF,EAAgBwF,EAAMtM,OAAOuW,QAAQ9b,MAIrCA,KAAKkR,OAASlR,KAAKyF,UAAYzF,KAAKkR,iBAAiBxP,EAAA,IACxDgE,EAAQ1F,KAAKqb,QAEVrb,KAAKoR,OAASpR,KAAKyF,UAAYzF,KAAKoR,iBAAiB1P,EAAA,IACxDgE,EAAQ1F,KAAKyb,QAId/Y,EAAS6E,mBAAmB7B,EAAO,EAAG,SAEtCJ,EAAA,aAAmBuM,EAAMtM,OAAO+W,MAAM,EAAGjQ,GAAO6V,YAAY1c,WAAY,SAAC2c,GAExE,GAAIA,EAAWjR,OAASpR,EAAKoR,OAASiR,EAAW/Q,OAAStR,EAAKsR,MAAO,CAErE+Q,EAAW5D,cAAgBze,EAE3B,IAAIsiB,EAAeD,EAAWtc,UAAU2G,SAAS9J,EAAS2J,OAE1D,GAAI+V,GAAgBA,EAAa7B,SAASzgB,EAAKiZ,gBAAkBqJ,EAAa7B,SAASzgB,EAAKkZ,eAAgB,CAE3G,IAAIxY,EAAQkC,EAASmL,SAASnI,GAC1B2c,OAAS,EASb,GANCA,EADGjK,EACSgK,EAAa7J,gBAAgB7S,GAAS0c,EAAavU,SAASnI,EAAO,SAGnE0c,EAAavU,SAASnI,GAAS0c,EAAavU,SAASnI,EAAO,SAGpElF,GAAS,GAAK6hB,GAAa,GAAO7hB,EAAQ,GAAK6hB,EAAY,EAI/D,OAFA3f,EAAS6E,mBAAmB7B,EAAO2c,EAAW,UAEvC,OAGJ,IAAKF,EAAW1I,QACpB,OAAO,EAIT,OAAO,MAYVrZ,OAAAC,eAAWsY,EAAArY,UAAA,cAAX,WACC,OAAON,KAAKwa,yCAUbpa,OAAAC,eAAWsY,EAAArY,UAAA,cAAX,WACC,OAAON,KAAKya,yCAUbra,OAAAC,eAAWsY,EAAArY,UAAA,kBAAX,WACC,OAAON,KAAK2b,6CAUbvb,OAAAC,eAAWsY,EAAArY,UAAA,kBAAX,WACC,OAAON,KAAK4b,6CAUbxb,OAAAC,eAAWsY,EAAArY,UAAA,qBASX,WACC,OAAIN,KAAKsiB,eACDtiB,KAAKsiB,eAENtiB,KAAKwa,aAbb,SAAyBha,GACxBR,KAAKsiB,eAAiB9hB,mCAsBvBJ,OAAAC,eAAWsY,EAAArY,UAAA,qBASX,WACC,OAAIN,KAAKuiB,eACDviB,KAAKuiB,eAENviB,KAAKya,aAbb,SAAyBja,GACxBR,KAAKuiB,eAAiB/hB,mCAsBhBmY,EAAArY,UAAA4C,IAAP,SAAWtC,GACV,OAAOZ,KAAKia,MAAMhT,OAAOrG,EAAK4F,MAUxBmS,EAAArY,UAAA0D,IAAP,SAAWpD,GACV,OAAOZ,KAAKka,MAAMjT,OAAOrG,EAAK4F,MAWxBmS,EAAArY,UAAAkiB,aAAP,SAAoB5hB,GACnB,IAAIJ,EAAQR,KAAKma,MAAMlT,OAAOrG,EAAK4F,KAInC,OAHKL,EAAA,SAAe3F,KACnBA,EAAQR,KAAKkD,IAAItC,IAEXJ,GAWDmY,EAAArY,UAAAmiB,aAAP,SAAoB7hB,GACnB,IAAIJ,EAAQR,KAAKoa,MAAMnT,OAAOrG,EAAK4F,KAInC,OAHKL,EAAA,SAAe3F,KACnBA,EAAQR,KAAKgE,IAAIpD,IAEXJ,GASDmY,EAAArY,UAAAoiB,cAAP,SAAqBC,GAEpB,GAAIA,EAAQ,CAuBX,GApBIxc,EAAA,SAAewc,EAAOzR,QAAU/K,EAAA,SAAewc,EAAOzR,SACrDlR,KAAK4iB,IAAItf,OAAOqf,EAAOzR,OAC1ByR,EAAOzR,MAAQlR,KAAK4iB,IAAI3b,OAAO0b,EAAOzR,QAGtClR,KAAK6iB,iBAAiBnR,KAAK,eAAiB1R,KAAK2a,MAAQ,WAAa,uBAA0BgI,EAAOzR,MAAQ,+BACxGyR,EAAOzR,QAGZ/K,EAAA,SAAewc,EAAOvR,QAAUjL,EAAA,SAAewc,EAAOvR,SACrDpR,KAAK4iB,IAAItf,OAAOqf,EAAOvR,OAC1BuR,EAAOvR,MAAQpR,KAAK4iB,IAAI3b,OAAO0b,EAAOvR,QAGtCpR,KAAK6iB,iBAAiBnR,KAAK,eAAiB1R,KAAK2a,MAAQ,WAAa,uBAA0BgI,EAAOvR,MAAQ,+BACxGuR,EAAOvR,QAKZjL,EAAA,SAAewc,EAAOtG,aAAelW,EAAA,QAAcwc,EAAOtG,YAC7D,IAAK,IAAIvI,EAAI,EAAGe,EAAM8N,EAAOtG,WAAWlU,OAAQ2L,EAAIe,EAAKf,IAAK,CAC7D,IAAIwI,EAAQqG,EAAOtG,WAAWvI,GACzB3N,EAAA,SAAemW,EAAMkD,QACzBlD,EAAMkD,KAAO,gBAEVrZ,EAAA,SAAemW,EAAM1b,OAASuF,EAAA,SAAemW,EAAM1b,OAASZ,KAAK4iB,IAAItf,OAAOgZ,EAAM1b,MACrF0b,EAAM3Z,UAAY3C,KAAK4iB,IAAI3b,OAAOqV,EAAM1b,MAEhCuF,EAAA,SAAemW,EAAM3Z,YAAcwD,EAAA,SAAemW,EAAM3Z,YAAc3C,KAAK4iB,IAAItf,OAAOgZ,EAAM3Z,aACpG2Z,EAAM3Z,UAAY3C,KAAK4iB,IAAI3b,OAAOqV,EAAM3Z,YAMtCwD,EAAA,SAAewc,EAAO7M,aAAgB3P,EAAA,SAAewc,EAAO7M,aAChE9V,KAAK6iB,iBAAiBnR,KAAK,wCAA0C1R,KAAK2a,MAAQ,WAAa,KAKjG/a,EAAAU,UAAMoiB,cAAa3iB,KAAAC,KAAC2iB,IAgBXhK,EAAArY,UAAA+e,SAAV,SAAmB3c,EAA4BogB,EAAcC,EAAcnC,EAAoBC,EAAoBmC,EAAoBC,GACtI,IAAIld,EAAY/F,KAAKkR,MAAM1D,KAAK9K,EAAUogB,EAAMlC,GAC5CzT,EAAYnN,KAAKoR,MAAMzD,KAAKjL,EAAUqgB,EAAMlC,GAKhD,OAAS9a,EAHTA,EAAIsE,EAAA,WAAiBtE,GAAI,IAAO,KAGjBoH,EAFfA,EAAI9C,EAAA,WAAiB8C,GAAI,IAAO,OASvBwL,EAAArY,UAAAia,qBAAV,WACC,IAAI3Q,EAAO,GACX1C,EAAA,KAAalH,KAAK8V,WAAY,SAAC3O,EAAK+b,GACnCtZ,GAAQ,IAAMzC,EAAM,OAErBnH,KAAKmjB,eAAiBvZ,GAiBvBxJ,OAAAC,eAAWsY,EAAArY,UAAA,4BAOX,WACC,OAAON,KAAKO,iBAAiB,6BAR9B,SAAgCC,GAC/BR,KAAKS,iBAAiB,uBAAwBD,oCAsB/CJ,OAAAC,eAAWsY,EAAArY,UAAA,0BAOX,WACC,OAAON,KAAKO,iBAAiB,2BAR9B,SAA8BC,GAC7BR,KAAKS,iBAAiB,qBAAsBD,oCAU9CmY,EAh7CA,CAA8BF,EAAA,GAw7C9BxX,EAAA,EAASC,kBAA4B,SAAIwX,EACzCzX,EAAA,EAASC,kBAAoC,iBAAImW,0CCv3DjD+L,EAAA,SAAAxjB,GA0FC,SAAAyjB,IAAA,IAAAvjB,EAGCF,EAAAG,KAAAC,OAAOA,KA7DDF,EAAAiN,OAAkBhH,EAAG,EAAGoH,EAAG,GAoCxBrN,EAAAwjB,OAAmC,OA0B5CxjB,EAAKG,UAAY,SAGjBH,EAAK4c,MAAQtc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KACrBN,EAAK6c,OAASvc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KACtBN,EAAK0jB,aAAc,EAEnB1jB,EAAK6hB,KAAK,GAEV7hB,EAAK2jB,WAAY,EACjB3jB,EAAK4jB,WAAY,EAEjB5jB,EAAKmZ,YAAa,EAIlB,IAAM0K,EAAcvjB,OAAAwjB,EAAA,EAAAxjB,UACpBN,EAAKyT,WAAW7B,KAAKiS,EAAYE,KAAKjK,OAAOC,GAAG,OAAQ/Z,EAAKgkB,iBAAkBhkB,IAC/EA,EAAKyT,WAAW7B,KAAKiS,EAAYE,KAAKjK,OAAOC,GAAG,KAAM/Z,EAAKikB,eAAgBjkB,IAC3EA,EAAKyT,WAAW7B,KAAKiS,EAAYE,KAAKjK,OAAOC,GAAG,QAAS/Z,EAAKkkB,iBAAkBlkB,IAGhFA,EAAKI,eAgSP,OApZ4BC,EAAA,EAAAkjB,EAAAzjB,GA8HpByjB,EAAA/iB,UAAA0jB,iBAAP,SAAwBC,GAEvB,GAAKjkB,KAAKkkB,oBAAV,CAGA,IAA+B,QAAzBlkB,KAAKmkB,kBAAuD,OAAzBnkB,KAAKmkB,mBAA+BnkB,KAAKokB,WAAehkB,OAAAwjB,EAAA,EAAAxjB,GAAiBikB,eAAeJ,EAAMK,QAAStkB,KAAKuZ,MAAMgL,IAAKvkB,KAAKwG,KAArK,CAQA,IAAIsK,EAAgByK,EAAA,sBAA6B0I,EAAMK,QAAQvX,MAAO/M,MAatE,MAXmB,QAAfA,KAAKsjB,QAAoBtjB,KAAKwkB,cACjC1T,EAAQ9Q,KAAKwkB,aAGK,QAAfxkB,KAAKsjB,QAAoBtjB,KAAKwkB,cAC5BxkB,KAAKykB,aAAa3T,KACtBA,EAAQ9Q,KAAKwkB,cAIfxkB,KAAK0kB,YAAY5T,GACVA,EAnBD9Q,KAAKigB,UAAajgB,KAAK8e,UAC3B9e,KAAK2hB,SA4BE0B,EAAA/iB,UAAAqkB,SAAV,SAAmBrY,GAClB,GAAoB,QAAftM,KAAKsjB,QAAmC,QAAftjB,KAAKsjB,SAAqBtjB,KAAKwkB,YAG7D,OAAO5kB,EAAAU,UAAMqkB,SAAQ5kB,KAAAC,KAACsM,IAsBhB+W,EAAA/iB,UAAAokB,YAAP,SAAmB3X,EAAe6X,GAEjC7X,EAAMhH,EAAIsE,EAAA,MAAY0C,EAAMhH,EAAG,GAC/BgH,EAAMI,EAAI9C,EAAA,MAAY0C,EAAMI,EAAG,GAE3ByX,IACH5kB,KAAKsjB,OAASsB,GAGF,QAATA,GAA4B,QAATA,IACtB5kB,KAAKwkB,YAAczX,GAGpB/M,KAAK6kB,gBAAgB9X,IAQZsW,EAAA/iB,UAAAukB,gBAAV,SAA0B9X,GACrB/M,KAAK+M,MAAMhH,GAAKgH,EAAMhH,GAAK/F,KAAK+M,MAAMI,GAAKJ,EAAMI,IACpDnN,KAAK+M,MAAQA,EACb/M,KAAK8kB,qBAED9kB,KAAKykB,aAAa1X,GACrB/M,KAAKghB,KAAK,GAILhhB,KAAKokB,WACTpkB,KAAK2hB,KAAK,GAIR3hB,KAAK6e,UACR7e,KAAK+kB,eAEL/kB,KAAKglB,SAAS,4BAUV3B,EAAA/iB,UAAA2kB,YAAP,SAAmBlY,GAClB/M,KAAKklB,gBAAgBnY,IAQZsW,EAAA/iB,UAAA4kB,gBAAV,SAA0BnY,GACzB,OAAQ/M,KAAKmkB,kBACZ,IAAK,OACJnkB,KAAKwe,oBAAoB,eACzB,MACD,IAAK,SACJxe,KAAKwe,oBAAoB,iBACzB,MACD,IAAK,MACJxe,KAAKwe,oBAAoB,cACzBpe,OAAAwjB,EAAA,EAAAxjB,GAAiB+kB,eAAeC,EAAA,EAAiBC,YAU7ChC,EAAA/iB,UAAAglB,UAAP,SAAiBvY,GAChB/M,KAAKulB,cAAcxY,IAQVsW,EAAA/iB,UAAAilB,cAAV,SAAwBxY,GAEvB/M,KAAKwlB,YAAYxlB,KAAKylB,SACtB,IAAI9B,EAAcvjB,OAAAwjB,EAAA,EAAAxjB,GAElB,GAAIiK,EAAA,YAAkBrK,KAAK0lB,aAAc1lB,KAAK2lB,gBAAkBhC,EAAYiC,aAAa5lB,KAAK6lB,aAAc,gBAAiB,CAC5H,OAAQ7lB,KAAKmkB,kBACZ,IAAK,OACJnkB,KAAKwe,oBAAoB,aACzB,MAED,IAAK,SACJxe,KAAKwe,oBAAoB,eACzB,MAED,IAAK,MACJxe,KAAKwe,oBAAoB,YACzBmF,EAAYwB,eAAeC,EAAA,EAAiBU,SAG9C9lB,KAAKokB,eAAYrc,EACjB/H,KAAK+lB,uBAGL/lB,KAAKwe,oBAAoB,oBACzBmF,EAAYwB,eAAeC,EAAA,EAAiBU,SAC5C9lB,KAAKokB,eAAYrc,GASZsb,EAAA/iB,UAAAylB,gBAAP,aAMU1C,EAAA/iB,UAAAykB,aAAV,WAEC/kB,KAAK2e,UAAY3e,KAAK+M,MAAMhH,EAAI/F,KAAKgmB,WACrChmB,KAAK4e,UAAY,EAAI5e,KAAK+M,MAAMI,EAAInN,KAAKimB,aASnC5C,EAAA/iB,UAAAwjB,iBAAP,SAAwBG,GAEvB,GAAKjkB,KAAKkkB,qBAAwB9jB,OAAAwjB,EAAA,EAAAxjB,GAAiBikB,eAAeJ,EAAMK,QAAStkB,KAAKuZ,MAAMgL,IAAKvkB,KAAKwG,KAAtG,CAIA,IAAIsK,EAAgByK,EAAA,sBAA6B0I,EAAMK,QAAQvX,MAAO/M,MAEtEA,KAAK2lB,gBAAmB5f,EAAG+K,EAAM/K,EAAGoH,EAAG2D,EAAM3D,GAGzC8W,EAAMA,MAAMiC,YAAclmB,KAAKmmB,yBAA2BnmB,KAAKykB,aAAa3T,IAC/EmT,EAAMA,MAAMmC,iBAIbpmB,KAAK0kB,YAAY5T,GACjB9Q,KAAKilB,YAAYnU,KAURuS,EAAA/iB,UAAA6lB,sBAAV,WACC,OAAO,GAOE9C,EAAA/iB,UAAAklB,YAAV,SAAsBzY,KASfsW,EAAA/iB,UAAAyjB,eAAP,SAAsBE,GACrB,GAAKjkB,KAAKkkB,uBAGqB,QAAzBlkB,KAAKmkB,kBAAuD,OAAzBnkB,KAAKmkB,mBAA+BnkB,KAAKokB,WAAehkB,OAAAwjB,EAAA,EAAAxjB,GAAiBikB,eAAeJ,EAAMK,QAAStkB,KAAKuZ,MAAMgL,IAAKvkB,KAAKwG,MAArK,CAGA,IAAIsK,EAAgByK,EAAA,sBAA6B0I,EAAMK,QAAQvX,MAAO/M,MACtEA,KAAK0lB,cAAiB3f,EAAG+K,EAAM/K,EAAGoH,EAAG2D,EAAM3D,GAE3CnN,KAAK0kB,YAAY5T,GACjB9Q,KAAKslB,UAAUxU,KAQhB1Q,OAAAC,eAAWgjB,EAAA/iB,UAAA,aAUX,WACC,OAAON,KAAKgb,YAXb,SAAiBxa,GAChBR,KAAKgb,OAASxa,EACV2F,EAAA,SAAqBnG,KAAKgb,OAAQqL,gBACrCjmB,OAAAwjB,EAAA,EAAAxjB,GAAiBkmB,YAAkBtmB,KAAKgb,OAAQqL,cAAcR,+CAUjExC,EApZA,CAA4BkD,EAAA,GA4Z5BtlB,EAAA,EAASC,kBAA0B,OAAIkiB,8BC7ZvCoD,EAAA,SAAA5mB,GA8DC,SAAA6mB,IAAA,IAAA3mB,EAGCF,EAAAG,KAAAC,OAAOA,KA7CEF,EAAA4mB,OAAS,IAAI7N,EAAA,EAKb/Y,EAAA6mB,OAAS,IAAI9N,EAAA,EAoBb/Y,EAAA8Y,OAAS,IAAIC,EAAA,EAKb/Y,EAAAgZ,OAAS,IAAID,EAAA,EAgBtB/Y,EAAKG,UAAY,WAGjBH,EAAK8mB,SAAW,QAEhB9mB,EAAK+mB,UAAY,GAEjB,IAAIC,EAAkB,IAAIC,EAAA,EAGtBC,EAAoBlnB,EAAKmnB,YAAY5N,EAAA,GACzC2N,EAAUxD,aAAc,EACxBwD,EAAUE,YAAc,GACxBF,EAAUxb,KAAOsb,EAAgBK,OAAO,yBACxCH,EAAU/N,YAAa,EACvB+N,EAAU9C,qBAAsB,EAChCpkB,EAAKknB,UAAYA,EACjBlnB,EAAKyT,WAAW7B,KAAK5R,EAAKknB,WAG1B,IAAII,EAAgBtnB,EAAKmnB,YAAY5N,EAAA,GACrC+N,EAAM5D,aAAc,EACpB4D,EAAMC,OAASP,EAAgBK,OAAO,QACtCC,EAAM5b,KAAOpL,OAAAknB,EAAA,EAAAlnB,GACbgnB,EAAMG,gBAAkB,MACxBH,EAAMnO,YAAa,EACnBmO,EAAMI,cAAgB,GACtBJ,EAAMlD,qBAAsB,EAC5BkD,EAAMja,EAAI,EACVrN,EAAKsnB,MAAQA,EACbtnB,EAAKyT,WAAW7B,KAAK5R,EAAKsnB,OAG1B,IAAIK,EAAgB3nB,EAAKmnB,YAAY5N,EAAA,UACrCoO,EAAMjE,aAAc,EACpBiE,EAAMJ,OAASP,EAAgBK,OAAO,QACtCM,EAAMjc,KAAOpL,OAAAknB,EAAA,EAAAlnB,GACbqnB,EAAMF,gBAAkB,MACxBE,EAAMxO,YAAa,EACnBwO,EAAMD,cAAgB,GACtBC,EAAMvD,qBAAsB,EAC5BuD,EAAM1hB,EAAI,EACVjG,EAAK2nB,MAAQA,EACb3nB,EAAKyT,WAAW7B,KAAK5R,EAAK2nB,OAG1B3nB,EAAK8Z,OAAOC,GAAG,cAAe/Z,EAAK4nB,WAAY5nB,GAAM,GAErDA,EAAKyT,WAAW7B,KAAK5R,EAAK4mB,QAC1B5mB,EAAKyT,WAAW7B,KAAK5R,EAAK6mB,QAC1B7mB,EAAKyT,WAAW7B,KAAK5R,EAAK8Y,QAC1B9Y,EAAKyT,WAAW7B,KAAK5R,EAAKgZ,QAE1BhZ,EAAK4L,KAAO5L,EAGZA,EAAKI,eAurBP,OAjzB8BC,EAAA,EAAAsmB,EAAA7mB,GAmItB6mB,EAAAnmB,UAAAonB,WAAP,WACK1nB,KAAKonB,QACRpnB,KAAKonB,MAAM5K,KAAOC,EAAA,QAAe1W,EAAG,EAAGoH,EAAG,IAAOsP,EAAA,QAAe1W,EAAG,EAAGoH,EAAGnN,KAAKimB,eAE3EjmB,KAAKynB,QACRznB,KAAKynB,MAAMjL,KAAOC,EAAA,QAAe1W,EAAG,EAAGoH,EAAG,IAAOsP,EAAA,QAAe1W,EAAG/F,KAAKgmB,WAAY7Y,EAAG,MASlFsZ,EAAAnmB,UAAAylB,gBAAP,WACC,GAAI/lB,KAAK2nB,eAAgB,CACxB,IAAIvD,EAAoBpkB,KAAKokB,UAE7B,GAAIA,EAAW,CACd,IAAIrX,EAAgB/M,KAAK+M,MAErB/M,KAAKonB,QACRra,EAAMhH,EAAI/F,KAAKonB,MAAMtK,QAGlB9c,KAAKynB,QACR1a,EAAMI,EAAInN,KAAKynB,MAAM5K,QAGtB,IAAImK,EAAoBhnB,KAAKgnB,UAEzBjhB,EAAY/C,KAAKE,IAAI6J,EAAMhH,EAAGqe,EAAUre,GACxCoH,EAAYnK,KAAKE,IAAI6J,EAAMI,EAAGiX,EAAUjX,GAExCya,EAAYvd,EAAA,MAAYrH,KAAKyL,IAAI2V,EAAUre,EAAIgH,EAAMhH,GAAI/F,KAAK6nB,oBAC9DC,EAAYzd,EAAA,MAAYrH,KAAKyL,IAAI2V,EAAUjX,EAAIJ,EAAMI,GAAInN,KAAK6nB,oBAElE,OAAQ7nB,KAAK4mB,UACZ,IAAK,QACJzZ,EAAI,EACJ2a,EAAI9nB,KAAK+nB,YACT,MACD,IAAK,QACJhiB,EAAI,EACJ6hB,EAAI5nB,KAAKgoB,WACT,MACD,IAAK,UACJ7a,EAAI,EACJ2a,EAAI9nB,KAAK+nB,YACT,MACD,IAAK,UACJhiB,EAAI,EACJ6hB,EAAI5nB,KAAKgoB,WAIXhB,EAAUjhB,EAAIA,EACdihB,EAAU7Z,EAAIA,EAEd6Z,EAAUxK,KAAOC,EAAA,UAAgBmL,EAAGE,GAEpCd,EAAUiB,wBAGVjoB,KAAKgnB,UAAUrF,SAWR8E,EAAAnmB,UAAA4nB,SAAV,SAAmBnb,GAMlB,OALAA,EAAMhH,EAAI/C,KAAKgB,IAAI,EAAG+I,EAAMhH,GAC5BgH,EAAMI,EAAInK,KAAKgB,IAAI,EAAG+I,EAAMI,GAC5BJ,EAAMhH,EAAI/C,KAAKE,IAAIlD,KAAKgoB,WAAYjb,EAAMhH,GAC1CgH,EAAMI,EAAInK,KAAKE,IAAIlD,KAAK+nB,YAAahb,EAAMI,GAEpCJ,GASE0Z,EAAAnmB,UAAAukB,gBAAV,SAA0B9X,GACzBnN,EAAAU,UAAMukB,gBAAe9kB,KAAAC,KAAC+M,GAEjB/M,KAAKmoB,eAAiBnoB,KAAKmoB,aAAalI,UAI5CjgB,KAAKooB,oBAAoBrb,GAGtB/M,KAAKokB,WAAa/Z,EAAA,YAAkBrK,KAAKokB,UAAWrX,GAAS,GACnC,OAAzB/M,KAAKmkB,mBACRnkB,KAAKqoB,mBACLroB,KAAKglB,SAAS,aASPyB,EAAAnmB,UAAA8nB,oBAAV,SAA8Brb,GAC7BA,EAAQ/M,KAAKkoB,SAASloB,KAAK+M,OAEvB/M,KAAKonB,OAASpnB,KAAKonB,MAAMvI,UAAY7e,KAAKkR,QAC7ClR,KAAKonB,MAAMrhB,EAAIgH,EAAMhH,GAElB/F,KAAKynB,OAASznB,KAAKynB,MAAM5I,UAAY7e,KAAKoR,QAC7CpR,KAAKynB,MAAMta,EAAIJ,EAAMI,GAEtBnN,KAAK+lB,mBAIIU,EAAAnmB,UAAA4kB,gBAAV,SAA0BnY,GACzB,GAAI/M,KAAK6e,UAAY7e,KAAK8e,SAEzB,GAAI9e,KAAKykB,aAAa1X,GAAQ,CAC7B/M,KAAKokB,WAAcre,EAAGgH,EAAMhH,EAAGoH,EAAGJ,EAAMI,GAExCnN,KAAKwlB,YAAYzY,GAIjB/M,KAAK+M,MAAMhH,EAAI/F,KAAKokB,UAAUre,EAC9B/F,KAAK+M,MAAMI,EAAInN,KAAKokB,UAAUjX,EAE9B,IAAI6Z,EAAoBhnB,KAAKgnB,UACzBsB,EAAqBtoB,KAAKokB,UAAUre,EACpCwiB,EAAqBvoB,KAAKokB,UAAUjX,EAEpCnN,KAAK2nB,iBACRX,EAAUjhB,EAAIuiB,EACdtB,EAAU7Z,EAAIob,EACdvB,EAAUxK,KAAO,GACjBwK,EAAUhG,QAEXphB,EAAAU,UAAM4kB,gBAAenlB,KAAAC,KAAC+M,QAGtB/M,KAAKokB,eAAYrc,OAIlB/H,KAAKokB,eAAYrc,GAQT0e,EAAAnmB,UAAAklB,YAAV,SAAsBzY,GACjB/M,KAAKonB,QACRra,EAAMhH,EAAI/F,KAAKonB,MAAMtK,QAElB9c,KAAKynB,QACR1a,EAAMI,EAAInN,KAAKynB,MAAM5K,SAKb4J,EAAAnmB,UAAAilB,cAAV,SAAwBxY,GACnB1C,EAAA,YAAkBrK,KAAK0lB,aAAc1lB,KAAK2lB,gBAAkBvlB,OAAAwjB,EAAA,EAAAxjB,GAAiBwlB,aAAa5lB,KAAK6lB,aAAc,gBAC5G7lB,KAAKokB,YACRpkB,KAAKylB,QAAU1Y,EAEf/M,KAAKwlB,YAAYxlB,KAAKylB,SAEtBzlB,KAAKwoB,YAEgB,WAAjBxoB,KAAK4mB,UAA0C,WAAjB5mB,KAAK4mB,UAA0C,YAAjB5mB,KAAK4mB,UAIpE5mB,KAAKgnB,UAAUrF,OAEhB/hB,EAAAU,UAAMilB,cAAaxlB,KAAAC,KAAC+M,KAIrB/M,KAAKgnB,UAAUrF,KAAK,GAGS,OAAzB3hB,KAAKmkB,kBACU/jB,OAAAwjB,EAAA,EAAAxjB,GACN+kB,eAAeC,EAAA,EAAiBU,UAG9C9lB,KAAKokB,eAAYrc,GASR0e,EAAAnmB,UAAA+nB,iBAAV,WAEC,IAAII,EAASpe,EAAA,MAAYrK,KAAKokB,UAAUre,EAAI/F,KAAKgmB,WAAY,GACzD0C,EAASre,EAAA,MAAYrK,KAAKokB,UAAUjX,EAAInN,KAAKimB,YAAa,GAK1D0C,EAASF,EAHEpe,EAAA,MAAYrK,KAAK+M,MAAMhH,EAAI/F,KAAKgmB,WAAY,GAIvD4C,GAAUF,EAHCre,EAAA,MAAYrK,KAAK+M,MAAMI,EAAInN,KAAKimB,YAAa,GAK5DjmB,KAAK6oB,QAAWhlB,MAAO8kB,EAAQ7kB,IAAK,EAAI6kB,GACxC3oB,KAAK8oB,QAAWjlB,MAAO+kB,EAAQ9kB,IAAK,EAAI8kB,GAEnB,QAAjB5oB,KAAK4mB,WACR5mB,KAAK8oB,OAAOjlB,MAAQ,EACpB7D,KAAK8oB,OAAOhlB,IAAM,GAEE,QAAjB9D,KAAK4mB,WACR5mB,KAAK6oB,OAAOhlB,MAAQ,EACpB7D,KAAK6oB,OAAO/kB,IAAM,IASV2iB,EAAAnmB,UAAAkoB,UAAV,WACKxoB,KAAKonB,QACRpnB,KAAKylB,QAAQ1f,EAAI/F,KAAKonB,MAAMtK,QAEzB9c,KAAKynB,QACRznB,KAAKylB,QAAQtY,EAAInN,KAAKynB,MAAM5K,QAI7B7c,KAAKgnB,UAEL,IAAIyB,EAAiBpe,EAAA,MAAYrK,KAAKokB,UAAUre,EAAI/F,KAAKgmB,WAAY,GACjE+C,EAAe1e,EAAA,MAAarK,KAAKylB,QAAS,EAAIzlB,KAAKgmB,WAAY,GAE/D0C,EAAiBre,EAAA,MAAYrK,KAAKokB,UAAUjX,EAAInN,KAAKimB,YAAa,GAClE+C,EAAe3e,EAAA,MAAarK,KAAKylB,QAAS,EAAIzlB,KAAKimB,YAAa,GAEpEjmB,KAAK6oB,QAAWhlB,MAAOwG,EAAA,IAAUoe,EAAQM,GAAOjlB,IAAKuG,EAAA,IAAUoe,EAAQM,IACvE/oB,KAAK8oB,QAAWjlB,MAAOwG,EAAA,IAAUqe,EAAQM,GAAOllB,IAAKuG,EAAA,IAAUqe,EAAQM,KAsBxE5oB,OAAAC,eAAWomB,EAAAnmB,UAAA,gBAsBX,WACC,OAAON,KAAKO,iBAAiB,iBAvB9B,SAAoBC,GACnBR,KAAKS,iBAAiB,WAAYD,GAAO,GAEzCR,KAAK2nB,gBAAiB,GAEQ,GAA1BnnB,EAAMsb,QAAQ,UACjB9b,KAAKmkB,iBAAmB,OACxBnkB,KAAK2nB,gBAAiB,IAES,GAA5BnnB,EAAMsb,QAAQ,YACjB9b,KAAKmkB,iBAAmB,SACxBnkB,KAAK2nB,gBAAiB,IAEM,GAAzBnnB,EAAMsb,QAAQ,SACjB9b,KAAKmkB,iBAAmB,MACxBnkB,KAAK2nB,gBAAiB,oCAkBdlB,EAAAnmB,UAAA6lB,sBAAV,WACC,MAAwB,QAAjBnmB,KAAK4mB,UAYbxmB,OAAAC,eAAWomB,EAAAnmB,UAAA,sBAOX,WACC,OAAON,KAAKO,iBAAiB,uBAR9B,SAA0BC,GACzBR,KAAKS,iBAAiB,iBAAkBD,oCAmBzCJ,OAAAC,eAAWomB,EAAAnmB,UAAA,sBAOX,WACC,OAAON,KAAKO,iBAAiB,uBAR9B,SAA0BC,GACzBR,KAAKS,iBAAiB,iBAAkBD,oCAgBzCJ,OAAAC,eAAWomB,EAAAnmB,UAAA,iBAOX,WACC,OAAON,KAAKO,iBAAiB,kBAR9B,SAAqBC,GACpBR,KAAKS,iBAAiB,YAAaD,oCAuBpCJ,OAAAC,eAAWomB,EAAAnmB,UAAA,aAYX,WACC,OAAON,KAAK4Y,OAAOqE,WAbpB,SAAiBrc,GACZZ,KAAK4Y,OAAOqE,OAASrc,GACxBZ,KAAK4Y,OAAO2E,IAAI3c,EAAM,IAAIiY,EAAA,GACzBjY,EAAK8Y,QAAQE,OAAOC,GAAG,kBAAmB7Z,KAAKipB,uBAAwBjpB,MAAM,uCA0BhFI,OAAAC,eAAWomB,EAAAnmB,UAAA,aAYX,WACC,OAAON,KAAK8Y,OAAOmE,WAbpB,SAAiBrc,GACZZ,KAAK8Y,OAAOmE,OAASrc,GACxBZ,KAAK8Y,OAAOyE,IAAI3c,EAAM,IAAIiY,EAAA,GACzBjY,EAAK8Y,QAAQE,OAAOC,GAAG,kBAAmB7Z,KAAKkpB,uBAAwBlpB,MAAM,uCAmBtEymB,EAAAnmB,UAAA2oB,uBAAV,SAAiChF,GAChC,IAAIvK,EAAmB1Z,KAAKkR,MAAMwI,QAC9B3M,EAAgBwO,EAAA,kBAA0BxV,EAAG2T,EAAQoD,OAAQ3P,EAAGuM,EAAQmD,QAAU7c,MAClF+F,EAAYgH,EAAMhH,EAStB,GAPI/F,KAAKonB,QACRpnB,KAAKonB,MAAMrhB,EAAIA,EACV/F,KAAKykB,aAAa1X,IACtB/M,KAAK2hB,QAIH3hB,KAAKkR,OAASlR,KAAKmpB,eAAgB,CACtC,IAAI7e,EAAqBtK,KAAKkR,MAAMkY,sBAChC7e,EAAmBvK,KAAKkR,MAAMmY,oBAClC,GAAI/e,GAAcC,EAAU,CAC3BvK,KAAKonB,MAAMrhB,EAAIA,EACf,IAAI2W,EAAgBnS,EAASxE,EAAIuE,EAAWvE,EAC5C/F,KAAKonB,MAAM5K,KAAOC,EAAA,UAAgBC,EAAO1c,KAAKimB,aAAcvJ,EAAQ,MAW7D+J,EAAAnmB,UAAA4oB,uBAAV,SAAiCjF,GAChC,IAAIvK,EAAmB1Z,KAAKoR,MAAMsI,QAC9B3M,EAAgBwO,EAAA,kBAA0BxV,EAAG2T,EAAQoD,OAAQ3P,EAAGuM,EAAQmD,QAAU7c,MAClFmN,EAAYJ,EAAMI,EAUtB,GARInN,KAAKynB,QACRznB,KAAKynB,MAAMta,EAAIA,EAEVnN,KAAKykB,aAAa1X,IACtB/M,KAAK2hB,QAIH3hB,KAAKoR,OAASpR,KAAKspB,eAAgB,CACtC,IAAIhf,EAAqBtK,KAAKoR,MAAMgY,sBAChC7e,EAAmBvK,KAAKoR,MAAMiY,oBAClC,GAAI/e,GAAcC,EAAU,CAC3BvK,KAAKynB,MAAMta,EAAIA,EACf,IAAIwP,EAAiBpS,EAAS4C,EAAI7C,EAAW6C,EAC7CnN,KAAKynB,MAAMjL,KAAOC,EAAA,UAAgBzc,KAAKgmB,WAAYrJ,EAAQ,GAAIA,EAAS,MAU3Evc,OAAAC,eAAWomB,EAAAnmB,UAAA,aAeX,WACC,OAAON,KAAK0mB,OAAOzJ,WAhBpB,SAAiBmK,GACZA,GACHA,EAAM9N,WAAWtZ,KAAKuZ,MAAMC,IAAI,SAChCxZ,KAAK0mB,OAAOnJ,IAAI6J,EAAOA,EAAMxN,OAAOC,GAAG,kBAAmB7Z,KAAK+lB,gBAAiB/lB,MAAM,IACtFonB,EAAMlD,qBAAsB,EAC5BkD,EAAMpH,OAAShgB,MAGfA,KAAK0mB,OAAO6C,yCAgBdnpB,OAAAC,eAAWomB,EAAAnmB,UAAA,aAeX,WACC,OAAON,KAAK2mB,OAAO1J,WAhBpB,SAAiBwK,GACZA,GACHA,EAAMnO,WAAWtZ,KAAKuZ,MAAMC,IAAI,SAChCxZ,KAAK2mB,OAAOpJ,IAAIkK,EAAOA,EAAM7N,OAAOC,GAAG,kBAAmB7Z,KAAK+lB,gBAAiB/lB,MAAM,IACtFynB,EAAMzH,OAAShgB,KACfynB,EAAMvD,qBAAsB,GAG5BlkB,KAAK2mB,OAAO4C,yCAgBdnpB,OAAAC,eAAWomB,EAAAnmB,UAAA,iBAWX,WACC,OAAON,KAAKwpB,gBAZb,SAAqBxC,GACpBhnB,KAAKwpB,WAAaxC,EACdA,IACHA,EAAUyC,QAAUzpB,KAAKuZ,MAAMC,IAAI,QACnCwN,EAAUhH,OAAShgB,uCAoBdymB,EAAAnmB,UAAAoiB,cAAP,SAAqBC,GAEhBA,IAGCxc,EAAA,SAAewc,EAAOzR,QAAU/K,EAAA,SAAewc,EAAOzR,SACrDlR,KAAK4iB,IAAItf,OAAOqf,EAAOzR,OAC1ByR,EAAOzR,MAAQlR,KAAK4iB,IAAI3b,OAAO0b,EAAOzR,QAGtClR,KAAK6iB,iBAAiBnR,KAAK,+BAAkCiR,EAAOzR,MAAQ,8BACrEyR,EAAOzR,QAGZ/K,EAAA,SAAewc,EAAOvR,QAAUjL,EAAA,SAAewc,EAAOvR,SACrDpR,KAAK4iB,IAAItf,OAAOqf,EAAOvR,OAC1BuR,EAAOvR,MAAQpR,KAAK4iB,IAAI3b,OAAO0b,EAAOvR,QAGtCpR,KAAK6iB,iBAAiBnR,KAAK,+BAAkCiR,EAAOvR,MAAQ,8BACrEuR,EAAOvR,QAIZjL,EAAA,SAAewc,EAAOwF,eAAiBhiB,EAAA,SAAewc,EAAOwF,gBAC5DnoB,KAAK4iB,IAAItf,OAAOqf,EAAOwF,cAC1BxF,EAAOwF,aAAenoB,KAAK4iB,IAAI3b,OAAO0b,EAAOwF,eAG7CnoB,KAAK6iB,iBAAiBnR,KAAK,iCAAoCiR,EAAOwF,aAAe,+BAC9ExF,EAAOwF,gBAMjBvoB,EAAAU,UAAMoiB,cAAa3iB,KAAAC,KAAC2iB,IAWrBviB,OAAAC,eAAWomB,EAAAnmB,UAAA,oBAeX,WACC,OAAON,KAAKO,iBAAiB,qBAhB9B,SAAwBgF,GACnBvF,KAAKS,iBAAiB,eAAgB8E,KACrCvF,KAAK0pB,iBACR1pB,KAAK0pB,gBAAgBrM,UAGlB9X,IACHvF,KAAK0pB,gBAAkBnkB,EAAOqU,OAAOC,GAAG,iBAAkB7Z,KAAK2pB,WAAY3pB,MAAM,sCAkB7EymB,EAAAnmB,UAAAqpB,WAAP,WAEC,IAAIpkB,EAASvF,KAAKmoB,aACdhb,EAAI5H,EAAOga,SACXxZ,EAAIR,EAAO+Z,SAEXtf,KAAKkR,OACJlR,KAAKkR,MAAMjH,SAAS2f,WACvBzc,GAAKnN,KAAK+nB,aAIZ/nB,KAAK+M,OAAUhH,EAAGA,EAAGoH,EAAGA,GACxBnN,KAAK+kB,eAEL,IAAI8E,EAAK9jB,EACL+jB,EAAK3c,EAETpH,GAAK/F,KAAKgoB,WAENhoB,KAAKoR,OACJpR,KAAKoR,MAAMnH,SAAS2f,WACvB7jB,GAAK/F,KAAKgoB,YAIZ,IAAItO,EAAUnU,EAAOmU,QACjBpN,EAAWoN,EAAQqQ,kBACnBC,EAAStQ,EAAQuQ,gBAEjB1kB,EAAOE,UAAYF,EAAO2L,OAC7B3L,EAAO6L,MAAMP,sBAAsB7Q,KAAK4e,WAGrCrZ,EAAOE,UAAYF,EAAO6L,OAC7B7L,EAAO2L,MAAML,sBAAsB7Q,KAAK2e,WAGzC3e,KAAKonB,MAAM8C,UAAWC,SAAU,IAAKC,GAAIjd,IAAMb,EAAU0d,GACzDhqB,KAAKynB,MAAMyC,UAAWC,SAAU,IAAKC,GAAIrkB,IAAMuG,EAAU0d,GAEpDhqB,KAAKkR,OACTlR,KAAKonB,MAAM8C,UAAWC,SAAU,IAAKC,GAAIP,IAAOvd,EAAU0d,GAEtDhqB,KAAKoR,OACTpR,KAAKynB,MAAMyC,UAAWC,SAAU,IAAKC,GAAIN,IAAOxd,EAAU0d,IAG7DvD,EAjzBA,CAA8BrD,GAyzB9BniB,EAAA,EAASC,kBAA4B,SAAIslB,0CCt2BzC6D,EAAA,SAAAzqB,GA0CC,SAAA0qB,IAAA,IAAAxqB,EACCF,EAAAG,KAAAC,OAAOA,KAlBEF,EAAAkb,OAAS,IAAInC,EAAA,EAmBtB/Y,EAAKG,UAAY,mBAEjB,IAAI6mB,EAAkB,IAAIC,EAAA,EAC1BjnB,EAAKyqB,QAAQ,EAAG,EAAG,EAAG,GAEtB,IAAIC,EAA0B1qB,EAAKmnB,YAAYwD,GAC/CD,EAAehH,aAAc,EAC7BgH,EAAeE,OAAO,EAAG,EAAG,EAAG,GAC/BF,EAAeD,QAAQ,EAAG,EAAG,EAAG,GAChCC,EAAetG,qBAAsB,EAErCpkB,EAAK6qB,gBAAkBH,EACvB1qB,EAAKyT,WAAW7B,KAAK5R,EAAK6qB,iBAE1B7qB,EAAK8qB,UAAY,GACjB9qB,EAAK+qB,SAAW,GAEhB,IAAIC,EAA4BhrB,EAAKmnB,YAAY5N,EAAA,GACjDyR,EAAkBtH,aAAc,EAChCsH,EAAkBxR,WAAWxZ,EAAKyZ,MAAMC,IAAI,SAC5CsR,EAAkBtf,KAAOsb,EAAgBK,OAAO,cAChD2D,EAAkB5D,YAAc,GAChC4D,EAAkB5G,qBAAsB,EACxC4G,EAAkB7R,YAAa,EAC/B6R,EAAkBC,SAClBjrB,EAAKkrB,mBAAqBF,EAC1BhrB,EAAKyT,WAAW7B,KAAK5R,EAAKkrB,oBAE1BR,EAAeO,SAEfjrB,EAAKmrB,WAAWC,aAAa,EAAG,EAAG,EAAG,GAEtC,IAAIC,EAAkBrrB,EAAKsrB,MAAMH,WACjCE,EAAgBD,aAAa,EAAG,EAAG,EAAG,GACtCC,EAAgBjE,YAAc,EAC9BiE,EAAgB3f,KAAOsb,EAAgBK,OAAO,cAE9C,IAAIkE,EAAaF,EAAgBG,OAAOrkB,OAAO,SAC3CokB,IACHA,EAAWrY,WAAWkU,YAAc,IAGrC,IAAIqE,EAAYJ,EAAgBG,OAAOrkB,OAAO,eAC1CskB,IACHA,EAAUvY,WAAWkU,YAAc,IAGpCpnB,EAAKyT,WAAW7B,KAAK5R,EAAKkb,QAE1Blb,EAAKI,eAkUP,OA/ZsCC,EAAA,EAAAmqB,EAAA1qB,GAsGrCQ,OAAAC,eAAWiqB,EAAAhqB,UAAA,cAAX,WAMC,OALKN,KAAKyT,UACTzT,KAAKyT,QAAU,IAAI3R,EAAA,EACnB9B,KAAKuT,WAAW7B,KAAK1R,KAAKyT,QAAQmG,OAAOC,GAAG,WAAY7Z,KAAKwrB,kBAAmBxrB,MAAM,IACtFA,KAAKuT,WAAW7B,KAAK1R,KAAKyT,QAAQmG,OAAOC,GAAG,UAAW7Z,KAAKyrB,oBAAqBzrB,MAAM,KAEjFA,KAAKyT,yCAQH6W,EAAAhqB,UAAAkrB,kBAAV,SAA4BvH,GAC3B,IAAIyH,EAAyBzH,EAAM0H,SAC/BnB,EAA0BxqB,KAAKwqB,eACnCA,EAAeoB,cAAcxgB,UAAW,EAExCpL,KAAK6R,MAAQ6Z,EAAa7Z,MAE1B,IAAIga,GAAoB,EACpBC,GAAoB,EAGxBxmB,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GAC/BA,GAAUmmB,IACTnmB,EAAO2L,OAASwa,EAAaxa,QAChC2a,GAAW,GAERtmB,EAAO6L,OAASsa,EAAata,QAChC0a,GAAW,MAKd,IAAIhF,EAAkB,IAAIC,EAAA,EAEtBxhB,EAA6BmmB,EAAaK,QAE9C,GAAIF,EAAU,CAEb,IAAI3a,EAAQwa,EAAaxa,MAAM6a,QAC/BvB,EAAetN,MAAMtS,UAAUsG,GAC/BA,EAAM8a,MAAM5gB,UAAW,EACvB8F,EAAM+a,oBAAsB,EAC5B/a,EAAMgb,GAAKR,EAAallB,KACpByD,EAAWiH,EAAMjH,UACZgG,MAAMlB,SAAS3D,UAAW,EACnCnB,EAASkiB,QAAS,EAClBliB,EAASiG,OAAOnB,SAASod,QAAS,EAClCliB,EAASmiB,KAAK5E,cAAgB,EAC9Bvd,EAASoiB,iBAAmB,IAC5BpiB,EAASqiB,iBAAmB,IAC5BriB,EAASmiB,KAAKhhB,UAAW,EACzBnB,EAASsiB,UAAUxd,SAAS3D,UAAW,EACvCnB,EAASkG,SAAS/E,UAAW,EAC7BnB,EAASqB,KAAKyD,SAASyY,cAAgB,IACvCvd,EAAS4gB,cAAW9iB,EACpBkC,EAAS2gB,eAAY7iB,EACrBkC,EAASsgB,QAAQ,EAAE,EAAE,EAAE,GACvBtgB,EAASygB,OAAO,EAAE,EAAE,EAAE,GAEDzgB,EAASiG,OAAOnB,SACtBmY,YAAc,GAE7B3hB,EAAO2L,MAAQA,EAOhB,GAAI4a,EAAU,CACb,IAKI7hB,EALAmH,EAAoBsa,EAAata,MAAM2a,QAC3CvB,EAAe/M,MAAM7S,UAAUwG,GAC/BA,EAAM4a,MAAM5gB,UAAW,EACvBgG,EAAM6a,oBAAsB,GAExBhiB,EAAWmH,EAAMnH,UACZgG,MAAMlB,SAAS3D,UAAW,EACnCnB,EAASkiB,QAAS,EAClBliB,EAASiG,OAAOnB,SAASod,QAAS,EAClCliB,EAASmiB,KAAK5E,cAAgB,EAC9Bvd,EAASoiB,iBAAmB,IAC5BpiB,EAASqiB,iBAAmB,IAC5BriB,EAASmiB,KAAKhhB,UAAW,EACzBnB,EAASsiB,UAAUxd,SAAS3D,UAAW,EACvCnB,EAASqB,KAAKyD,SAASsY,OAASP,EAAgBK,OAAO,cACvDld,EAASkG,SAAS/E,UAAW,EAC7BnB,EAASqB,KAAKyD,SAASyY,cAAgB,IACvCvd,EAAS4gB,cAAW9iB,EACpBkC,EAAS2gB,eAAY7iB,EACrBkC,EAASsgB,QAAQ,EAAE,EAAE,EAAE,GACvBtgB,EAASygB,OAAO,EAAE,EAAE,EAAE,GAEDzgB,EAASiG,OAAOnB,SACtBmY,YAAc,GAE7B3hB,EAAO6L,MAAQA,EAMhB7L,EAAO0mB,oBAAsB,EAC7B1mB,EAAO4b,sBAAwB,EAC/B5b,EAAO6b,aAAaC,mBAAqB,EACzC9b,EAAOinB,YAAa,EAEpBxsB,KAAKuT,WAAW7B,KAAKnM,EAAOqU,OAAOC,GAAG,YAAa7Z,KAAKysB,YAAazsB,MAAM,IAG3EA,KAAKuT,WAAW7B,KAAKga,EAAa9R,OAAOC,GAAG,gBAAiB,WACxDtU,EAAO+U,MAAQoR,EAAapR,OAC/B/U,EAAO+U,KAAOoR,EAAapR,YAE1BvS,GAAW,IACdxC,EAAO6b,aAAapO,WAAW6L,SAAU,EAEzCtZ,EAAOmnB,QAAQhb,KAAK,IAAIib,EAAA,GACxBnC,EAAejlB,OAAOmM,KAAKnM,GAE3BvF,KAAK4sB,uBAMItC,EAAAhqB,UAAAssB,oBAAV,eAAA9sB,EAAAE,KACKA,KAAK2qB,kBACRrlB,EAAA,KAAWtF,KAAK2qB,gBAAgBzN,MAAM1X,WAAY,SAAC0L,GAClD,IAAIjH,EAAWiH,EAAMjH,SACG,YAApBnK,EAAK+sB,aACR5iB,EAASqB,KAAKyD,SAAS3D,UAAW,EAClCnB,EAASiG,OAAOnB,SAAS3D,UAAW,EACpCnB,EAASO,gBAAkB,KAG3BP,EAASqB,KAAKyD,SAAS3D,UAAW,EAClCnB,EAASiG,OAAOnB,SAAS3D,UAAW,EACpCnB,EAASO,gBAAkB0G,EAAM4b,WAAW7iB,SAASO,mBAKvDlF,EAAA,KAAWtF,KAAK2qB,gBAAgBlN,MAAMjY,WAAY,SAAC4L,GAClD,IAAInH,EAAWmH,EAAMnH,SACG,cAApBnK,EAAK+sB,aACR5iB,EAASqB,KAAKyD,SAAS3D,UAAW,EAClCnB,EAASiG,OAAOnB,SAAS3D,UAAW,EACpCnB,EAASO,gBAAkB,KAG3BP,EAASqB,KAAKyD,SAAS3D,UAAW,EAClCnB,EAASiG,OAAOnB,SAAS3D,UAAW,EACpCnB,EAASO,gBAAkB4G,EAAM0b,WAAW7iB,SAASO,qBAa/C8f,EAAAhqB,UAAAmrB,oBAAV,SAA8BxH,GACAA,EAAM8I,SACtBnT,OAAOoT,IAAI,YAAahtB,KAAKysB,YAAazsB,OAcxDI,OAAAC,eAAWiqB,EAAAhqB,UAAA,sBAAX,WACC,OAAON,KAAK2qB,iDAQbvqB,OAAAC,eAAWiqB,EAAAhqB,UAAA,aAWX,WACC,OAAON,KAAKgb,OAAOiC,WAZpB,SAAiBpL,GACZ7R,KAAKgb,OAAOiC,QAAUpL,IACzB7R,KAAKgb,OAAOuC,IAAI1L,EAAOA,EAAM+H,OAAOC,GAAG,gBAAiB7Z,KAAKitB,kBAAmBjtB,MAAM,IACtFA,KAAKitB,oBACLjtB,KAAK2qB,gBAAgBuC,aAAerb,oCAiB/ByY,EAAAhqB,UAAA2sB,kBAAP,WAEKjtB,KAAK6R,MAAMyI,MAAQta,KAAKwqB,eAAelQ,OAC1Cta,KAAKwqB,eAAelQ,KAAOta,KAAK6R,MAAMyI,OAO9BgQ,EAAAhqB,UAAAmsB,YAAV,WACC,IAAIjC,EAA0BxqB,KAAKwqB,eACnCllB,EAAA,KAAWklB,EAAetN,MAAM1X,WAAY,SAACO,GAC5CA,EAAE5B,MAAON,MAAO,EAAGC,IAAK,IAAK,GAAM,KAEpCwB,EAAA,KAAWklB,EAAe/M,MAAMjY,WAAY,SAAC2H,GAC5CA,EAAEhJ,MAAON,MAAO,EAAGC,IAAK,IAAK,GAAM,MAO3BwmB,EAAAhqB,UAAA6sB,YAAV,WAEC,GADAvtB,EAAAU,UAAM6sB,YAAWptB,KAAAC,MACbA,KAAKgrB,mBAAoB,CAC5B,IAAII,EAAQprB,KAAKorB,MACbrlB,EAAYqlB,EAAMtO,QAAU,EAC5B3P,EAAYie,EAAMvO,QAAU,EAC5B+K,EAAYwD,EAAMpD,YAAc,EAChCF,EAAYsD,EAAMrD,aAAe,EAEjCvL,EAAe,GAEK,cAApBxc,KAAK6sB,aACRrQ,EAAOC,EAAA,YACN1W,GAAI,EACJoH,EAAG,EACHuP,MAAO3W,EACP4W,OAAQmL,IAGTtL,GAAQC,EAAA,YACP1W,EAAGA,EAAI6hB,EACPza,EAAG,EACHuP,OAAQ1c,KAAKgoB,YAAc,GAAKjiB,EAAI6hB,EACpCjL,OAAQmL,MAITtL,EAAOC,EAAA,YACN1W,EAAG,EACHoH,EAAG,EACHuP,MAAOkL,EACPjL,OAAQxP,IAGTqP,GAAQC,EAAA,YACP1W,EAAG,EACHoH,EAAGA,EAAI2a,EACPpL,MAAOkL,EACPjL,QAAS3c,KAAK+nB,aAAe,GAAK5a,EAAI2a,KAIxC9nB,KAAKgrB,mBAAmBxO,KAAOA,IAU1B8N,EAAAhqB,UAAAoiB,cAAP,SAAqBC,GAEpB,GAAIA,GAECxc,EAAA,SAAewc,EAAOpd,SAAWY,EAAA,QAAcwc,EAAOpd,QACzD,IAAK,IAAIuO,EAAI,EAAGe,EAAM8N,EAAOpd,OAAO4C,OAAQ2L,EAAIe,EAAKf,IAAK,CACzD,IAAIvO,EAASod,EAAOpd,OAAOuO,GAC3B,GAAI3N,EAAA,SAAeZ,IAAWY,EAAA,SAAeZ,GAAS,CACrD,IAAIvF,KAAK4iB,IAAItf,OAAOiC,GAInB,MAAMmV,MAAM,2CAA6CnV,EAAS,qBAHlEod,EAAOpd,OAAOuO,GAAK9T,KAAK4iB,IAAI3b,OAAO1B,IAWxC3F,EAAAU,UAAMoiB,cAAa3iB,KAAAC,KAAC2iB,IAGtB2H,EA/ZA,CAAsC8C,EAAA,GAuatCnsB,EAAA,EAASC,kBAAoC,iBAAImpB,kBCpbjDgD,EAAA,SAAAztB,GAUC,SAAA0tB,IAAA,IAAAxtB,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,kBACjBH,EAAKI,eAGP,OAhBqCC,EAAA,EAAAmtB,EAAA1tB,GAgBrC0tB,EAhBA,CAAqCC,EAAA,GA2MrC9C,EAAA,SAAA7qB,GAiJC,SAAA4tB,IAAA,IAAA1tB,EAGCF,EAAAG,KAAAC,OAAOA,KA9CEF,EAAA2tB,eAAuCC,EAAA,EAKvC5tB,EAAA6tB,eAAuCC,EAAA,EA2ChD9tB,EAAKG,UAAY,UAIjBH,EAAK+tB,aAAc,EACnB/tB,EAAKguB,iBAAkB,EAGvB,IAAIC,EAAiBjuB,EAAKiuB,eAC1BA,EAAeC,OAAS,WACxBluB,EAAKyqB,QAAQ,GAAI,GAAI,GAAI,IAGzB,IAAI0D,EAAcF,EAAe9G,YAAYV,EAAA,GAC7C0H,EAAYzK,aAAc,EAC1ByK,EAAYD,OAAS,WACrBC,EAAYvR,MAAQtc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAC5B6tB,EAAYC,OAAS,EACrBpuB,EAAKquB,iBAAmBF,EAMxB,IAAIG,EAAmBL,EAAe9G,YAAYV,EAAA,GAClD6H,EAAiB5K,aAAc,EAC/B4K,EAAiBJ,OAAS,aAC1BI,EAAiB1R,MAAQtc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KACjCguB,EAAiBzR,OAASvc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAClCguB,EAAiBF,OAAS,EAC1BpuB,EAAKuuB,sBAAwBD,EAG7B,IAAIE,EAAiBP,EAAe9G,YAAYV,EAAA,GAChD+H,EAAe9K,aAAc,EAC7B8K,EAAe5R,MAAQtc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAC/BkuB,EAAeN,OAAS,WACxBM,EAAeJ,OAAS,EACxBpuB,EAAKyuB,oBAAsBD,EAG3B,IAAIE,EAAeJ,EAAiBnH,YAAYV,EAAA,GAChDiI,EAAahL,aAAc,EAC3BgL,EAAaR,OAAS,aACtBQ,EAAa7R,OAASvc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAC9BouB,EAAaC,aAAe,QAC5BD,EAAa5U,OAAOC,GAAG,cAAe/Z,EAAK4uB,mBAAoB5uB,GAAM,GACrE0uB,EAAaN,OAAS,EACtBpuB,EAAK6uB,kBAAoBH,EAGzB,IAAII,EAAWR,EAAiBnH,YAAYV,EAAA,GAC5CqI,EAASpL,aAAc,EACvBoL,EAASjS,OAASvc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAC1BwuB,EAASlS,MAAQtc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAGzBwuB,EAAS3D,WAAW/D,YAAc,EAClCpnB,EAAKumB,cAAgBuI,EAGrB9uB,EAAK+uB,mBAAqB,OAE1B/uB,EAAKgvB,iBAAmBF,EAGxB,IAAIG,EAAgBX,EAAiBnH,YAAYV,EAAA,GACjDwI,EAAcvL,aAAc,EAC5BuL,EAAcf,OAAS,aACvBe,EAAcpS,OAASvc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAC/B2uB,EAAcb,OAAS,EACvBa,EAAcnV,OAAOC,GAAG,cAAe/Z,EAAK4uB,mBAAoB5uB,GAAM,GACtEA,EAAKkvB,mBAAqBD,EAE1BjvB,EAAKmvB,gBAAgBjP,OAAS4O,EAC9B9uB,EAAKovB,iBAAiBlP,OAAS4O,EAE/B,IAAIhD,EAAgBgD,EAAS3H,YAAYkI,EAAA,UACzCvD,EAAcpI,aAAc,EAC5BoI,EAAcwD,MAAQ,QACtBxD,EAAcyD,OAAS,MACvBzD,EAAcsC,OAAS7nB,OAAOipB,iBAC9B1D,EAAc2D,UAAY,EAC1B3D,EAAc4D,YAAc,EAE5B5D,EAAcjK,KAAK,GACnB7hB,EAAK8rB,cAAgBA,EAErB9rB,EAAK2vB,YAAc3vB,EAAKumB,cAGxBvmB,EAAKI,eAygDP,OA1vD6BC,EAAA,EAAAqtB,EAAA5tB,GAyPlB4tB,EAAAltB,UAAA+C,sBAAV,WAECzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MAC3BA,KAAK4rB,cAAc8D,YAAa,EAG3BvpB,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,eAUtC+pB,EAAAltB,UAAAqvB,KAAP,WACC/vB,EAAAU,UAAMqvB,KAAI5vB,KAAAC,MAEVA,KAAKivB,gBAAgBW,UACrB5vB,KAAKkvB,iBAAiBU,UAElB5vB,KAAK6tB,cACR7tB,KAAKkvB,iBAAiBxjB,KAAO1L,KAAKyvB,aAGnCzvB,KAAK6vB,sBAQCrC,EAAAltB,UAAAwvB,mBAAP,WACCxqB,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GACnCA,EAAO1E,gBAUF2sB,EAAAltB,UAAA4F,aAAP,WAG4B,GAAvBlG,KAAK+vB,iBACRzqB,EAAA,KAAWtF,KAAKkd,MAAM1X,WAAY,SAAC5E,GAClCA,EAAKoZ,qBAGN1U,EAAA,KAAWtF,KAAKyd,MAAMjY,WAAY,SAAC5E,GAClCA,EAAKoZ,qBAGN1U,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GACnCA,EAAOyU,sBAITpa,EAAAU,UAAM4F,aAAYnG,KAAAC,OAQTwtB,EAAAltB,UAAAouB,mBAAV,WAEC,IAAIsB,EAAgBhwB,KAAK2uB,kBAAkBpZ,cACvC0a,EAAiBjwB,KAAKgvB,mBAAmBzZ,cACzC+Y,EAAiBtuB,KAAKuuB,oBAEtBD,EAAe4B,aAAeF,GAAiB1B,EAAe6B,cAAgBF,IACjF3B,EAAe4B,YAAcF,EAC7B1B,EAAe6B,aAAeF,GAG/B,IAAIhC,EAAcjuB,KAAKmuB,iBAEnBF,EAAYiC,aAAeF,GAAiB/B,EAAYkC,cAAgBF,IAC3EhC,EAAYiC,YAAcF,EAC1B/B,EAAYkC,aAAeF,IAWtBzC,EAAAltB,UAAA8vB,kBAAP,SAAyBnM,GACxBjkB,KAAKqwB,YAAYpM,EAAMxE,SAUjB+N,EAAAltB,UAAAgwB,kBAAP,SAAyBrM,GACxBjkB,KAAKuwB,YAAYtM,EAAMxE,SASjB+N,EAAAltB,UAAAkwB,aAAP,SAAoBvM,GAEnB,IAAIrjB,EAAaqjB,EAAM0H,SACvB/qB,EAAKiR,MAAQ7R,KAETY,EAAKqJ,WACRrJ,EAAKqJ,SAAW,IAAIjK,KAAKytB,eACzB7sB,EAAKqJ,SAASwmB,SAAS,WAAY,SAAU,WAAY,mBAAoBzwB,KAAKowB,kBAAmBpwB,MAAM,IAE5GY,EAAKuN,WAAa,IAElBvN,EAAKgZ,OAAOC,GAAG,eAAgB7Z,KAAK0wB,uBAAwB1wB,MAAM,GAClEY,EAAKgZ,OAAOC,GAAG,aAAc7Z,KAAK0wB,uBAAwB1wB,MAAM,GAKhEY,EAAKssB,aAAeltB,KAEpBA,KAAKqwB,YAAYzvB,EAAKqJ,UACtBjK,KAAK2wB,YAAY/vB,IAUX4sB,EAAAltB,UAAAswB,aAAP,SAAoB3M,GAEnB,IAAIrjB,EAAaqjB,EAAM0H,SACvB/qB,EAAKiR,MAAQ7R,KACTY,EAAKqJ,WACRrJ,EAAKqJ,SAAW,IAAIjK,KAAK2tB,eACzB/sB,EAAKqJ,SAASwmB,SAAS,WAAY,SAAU,WAAY,mBAAoBzwB,KAAKswB,kBAAmBtwB,MAAM,IAE5GY,EAAKuN,WAAa,IAElBvN,EAAKgZ,OAAOC,GAAG,eAAgB7Z,KAAK6wB,uBAAwB7wB,MAAM,GAClEY,EAAKgZ,OAAOC,GAAG,aAAc7Z,KAAK6wB,uBAAwB7wB,MAAM,GAKhEY,EAAKssB,aAAeltB,KAEpBA,KAAKuwB,YAAY3vB,EAAKqJ,UACtBjK,KAAK2wB,YAAY/vB,IAOR4sB,EAAAltB,UAAAowB,uBAAV,WACC,IAAIpU,EAAgBtc,KAAK8wB,mBAAmB9wB,KAAKkd,OAC7Cld,KAAK+wB,YACR/wB,KAAKgxB,SAAShxB,KAAKkd,MAAOZ,GAAO,GAElCtc,KAAKixB,sBACLjxB,KAAKkxB,gBAAgBlxB,KAAK+wB,WAAYzU,IAO7BkR,EAAAltB,UAAA2wB,oBAAV,WACC,GAAIjxB,KAAK4rB,cAAe,CACvB,IAAIuF,GAAO,EAEX7rB,EAAA,aAAmBtF,KAAKkd,MAAM1X,WAAY,SAAC5E,GAC1C,OAAkC,GAA9ByJ,EAAA,MAAYzJ,EAAKiD,MAAO,IAAuC,GAA5BwG,EAAA,MAAYzJ,EAAKkD,IAAK,KAC5DqtB,GAAO,GACA,KAIT7rB,EAAA,aAAmBtF,KAAKyd,MAAMjY,WAAY,SAAC5E,GAC1C,OAAkC,GAA9ByJ,EAAA,MAAYzJ,EAAKiD,MAAO,IAAuC,GAA5BwG,EAAA,MAAYzJ,EAAKkD,IAAK,KAC5DqtB,GAAO,GACA,KAKJnxB,KAAKoxB,iBACTD,GAAO,GAGJA,EACHnxB,KAAK4rB,cAAc5K,OAGnBhhB,KAAK4rB,cAAcjK,SASZ6L,EAAAltB,UAAA8wB,eAAV,WACC,IAAI3S,GAAoB,EAOxB,OANAnZ,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GACnC,IAAKA,EAAOkZ,SAEX,OADAA,GAAW,GACJ,IAGFA,GAOE+O,EAAAltB,UAAAuwB,uBAAV,WACC,IAAIvU,EAAgBtc,KAAK8wB,mBAAmB9wB,KAAKyd,OAE7Czd,KAAKqxB,YACRrxB,KAAKgxB,SAAShxB,KAAKyd,MAAOnB,GAAO,GAElCtc,KAAKixB,sBACLjxB,KAAKkxB,gBAAgBlxB,KAAKqxB,WAAY/U,IAS7BkR,EAAAltB,UAAA4wB,gBAAV,SAA0BI,EAAsBhV,GAC3CgV,IACHA,EAAUC,kBACVD,EAAUztB,MAAQyY,EAAMzY,MACxBytB,EAAUxtB,IAAMwY,EAAMxY,MAajB0pB,EAAAltB,UAAAwwB,mBAAP,SAA0BU,GACzB,IAAI3tB,EACAC,EAmBJ,OAjBAwB,EAAA,KAAWksB,EAAKhsB,WAAY,SAAC5E,GAC5B,IAAI6wB,EAAY7wB,EAAKiD,MACjB6tB,EAAU9wB,EAAKkD,IAEflD,EAAKqJ,SAAS0nB,WACjBF,EAAY,EAAI7wB,EAAKkD,IACrB4tB,EAAU,EAAI9wB,EAAKiD,SAGfsC,EAAA,SAAetC,IAAW4tB,EAAY5tB,KAC1CA,EAAQ4tB,KAEJtrB,EAAA,SAAerC,IAAS4tB,EAAU5tB,KACtCA,EAAM4tB,MAIC7tB,MAAOA,EAAOC,IAAKA,IAStB0pB,EAAAltB,UAAA+vB,YAAP,SAAmBpmB,GAClB,IAAIrJ,EAAOqJ,EAASrJ,KAChBqJ,EAAS2f,UACZhpB,EAAKof,OAAShgB,KAAKmuB,iBACnBvtB,EAAKgvB,YAGLhvB,EAAKof,OAAShgB,KAAKuuB,oBACnB3tB,EAAKmqB,UAEFnqB,EAAKqJ,UACRrJ,EAAKqJ,SAAS2nB,mBAUTpE,EAAAltB,UAAAiwB,YAAP,SAAmBtmB,GAClB,IAAIrJ,EAAOqJ,EAASrJ,KAChBqJ,EAAS2f,UACZhpB,EAAKof,OAAShgB,KAAKgvB,mBACnBpuB,EAAKmqB,WAGLnqB,EAAKof,OAAShgB,KAAK2uB,kBACnB/tB,EAAKgvB,WAEFhvB,EAAKqJ,UACRrJ,EAAKqJ,SAAS2nB,mBAUNpE,EAAAltB,UAAAqwB,YAAV,SAAsB/vB,GAAtB,IAAAd,EAAAE,KAEKY,aAAgBuS,GACnBnT,KAAK6xB,WAAWjnB,UAAUhK,GAG3B,IAAIqJ,EAAyBrJ,EAAKqJ,SAElCA,EAAS6nB,cAAc9R,OAAShgB,KAAKqmB,cACrCpc,EAAS6nB,cAAc/G,SAEvB9gB,EAAS8nB,eAAe/R,OAAShgB,KAAKqmB,cACtCpc,EAAS8nB,eAAenC,UACxB3lB,EAAS8nB,eAAe7D,OAAS,GAEjCttB,EAAKoxB,YAAY,IAAInZ,EAAA,EAAS,WAC7B/Y,EAAKmyB,UAAU3U,YAAY1c,MAG5BZ,KAAKqmB,cAAczM,OAAOC,GAAG,iBAAkB,WAC1C/Z,EAAKoyB,QACRtxB,EAAK0R,uBAEJ1R,GAAM,IAQVR,OAAAC,eAAWmtB,EAAAltB,UAAA,aAAX,WAOC,OANKN,KAAKmyB,SACTnyB,KAAKmyB,OAAS,IAAIrwB,EAAA,EAClB9B,KAAKmyB,OAAOvY,OAAOC,GAAG,WAAY7Z,KAAKwwB,aAAcxwB,MAAM,GAC3DA,KAAKmyB,OAAOvY,OAAOC,GAAG,UAAW7Z,KAAKoyB,kBAAmBpyB,MAAM,IAGzDA,KAAKmyB,wCAMH3E,EAAAltB,UAAA8xB,kBAAV,SAA4BnO,GAC3B,IAAIrjB,EAAOqjB,EAAM8I,SACjB/sB,KAAKiyB,UAAU3U,YAAY1c,GACvBA,EAAKyxB,aACRzxB,EAAKyc,WASPjd,OAAAC,eAAWmtB,EAAAltB,UAAA,aAAX,WAOC,OANKN,KAAKsyB,SACTtyB,KAAKsyB,OAAS,IAAIxwB,EAAA,EAClB9B,KAAKsyB,OAAO1Y,OAAOC,GAAG,WAAY7Z,KAAK4wB,aAAc5wB,MAAM,GAC3DA,KAAKsyB,OAAO1Y,OAAOC,GAAG,UAAW7Z,KAAKoyB,kBAAmBpyB,MAAM,IAGzDA,KAAKsyB,wCAUN9E,EAAAltB,UAAAkrB,kBAAP,SAAyBvH,GACxB,IACCrkB,EAAAU,UAAMkrB,kBAAiBzrB,KAAAC,KAACikB,GACxB,IAAI1e,EAAmB0e,EAAM0H,SAEL,GAArB3rB,KAAKkd,MAAM/U,QAAoC,GAArBnI,KAAKyd,MAAMtV,SACvClH,EAAA,EAASsxB,4BAA4BhtB,GACrCA,EAAOitB,aAAc,GAGtBjtB,EAAO2L,MACP3L,EAAO6L,WAEYrJ,GAAfxC,EAAOiG,OACVjG,EAAOiG,KAAOxL,KAAKyyB,OAAO5S,aAGN9X,GAAjBxC,EAAO8hB,SACV9hB,EAAO8hB,OAAS9hB,EAAOiG,MAGzB,MAAOuP,GACN/a,KAAKib,mBAAmBF,KAS1B3a,OAAAC,eAAWmtB,EAAAltB,UAAA,cA8BX,WACC,OAAON,KAAK0yB,aA/Bb,SAAkBC,GACb3yB,KAAK0yB,SAAWC,IACf3yB,KAAK0yB,SACR1yB,KAAK4yB,cAAc5yB,KAAK0yB,SAGzB1yB,KAAK0yB,QAAUC,EAEXA,IAEH3yB,KAAKuT,WAAW7B,KAAKihB,GACrBA,EAAO9gB,MAAQ7R,KACf2yB,EAAOnP,aAAc,EACrBmP,EAAO3S,OAAShgB,KAAK8uB,iBACrB6D,EAAO/Y,OAAOC,GAAG,wBAAyB7Z,KAAK6yB,2BAA4B7yB,MAAM,GACjF2yB,EAAO/Y,OAAOC,GAAG,cAAe7Z,KAAK8yB,sBAAuB9yB,MAAM,GAClE2yB,EAAO/Y,OAAOC,GAAG,YAAa7Z,KAAK+yB,oBAAqB/yB,MAAM,GAC9D2yB,EAAO/Y,OAAOC,GAAG,aAAc7Z,KAAKgzB,qBAAsBhzB,MAAM,GAChE2yB,EAAO/Y,OAAOC,GAAG,UAAW7Z,KAAKizB,oBAAqBjzB,MAAM,GAC5D2yB,EAAO/Y,OAAOC,GAAG,WAAY7Z,KAAKkzB,mBAAoBlzB,MAAM,GAC5D2yB,EAAO/Y,OAAOC,GAAG,mBAAoB7Z,KAAKmzB,qBAAsBnzB,MAAM,GACtE2yB,EAAO/Y,OAAOC,GAAG,SAAU7Z,KAAKozB,iBAAkBpzB,MAAM,GACxD2yB,EAAOzE,OAAS7nB,OAAOipB,iBAAmB,qCAiBnC9B,EAAAltB,UAAA+yB,aAAV,WACC,OAAO,IAAI7M,GASLgH,EAAAltB,UAAAuyB,2BAAP,WAEC,IAAIF,EAAS3yB,KAAK2yB,OAElB,GAAIA,EAAO9T,UAAY8T,EAAO7T,SAAU,CACvC,IAAIH,EAAoB3e,KAAK2yB,OAAOhU,UAChCC,EAAoB5e,KAAK2yB,OAAO/T,UAEpC5e,KAAKszB,mBACJvtB,EAAG4Y,EACHxR,EAAGyR,IAGJ,IAAI2U,OAAU,EACVpL,EAAewK,EAAOxK,aACtBA,IACCA,EAAa1iB,UAAY0iB,EAAajX,QACzCqiB,EAAapL,EAAa/W,OAEvB+W,EAAa1iB,UAAY0iB,EAAa/W,QACzCmiB,EAAapL,EAAajX,QAI5BlR,KAAKwzB,gBAAgBxzB,KAAKkd,MAAOyB,EAAW4U,GAC5CvzB,KAAKwzB,gBAAgBxzB,KAAKyd,MAAOmB,EAAW2U,KASvC/F,EAAAltB,UAAA8yB,iBAAP,WACCpzB,KAAKyzB,kBAAkBzzB,KAAKkd,OAC5Bld,KAAKyzB,kBAAkBzzB,KAAKyd,OAC5Bzd,KAAKyzB,kBAAkBzzB,KAAKuF,QAE5BvF,KAAK6vB,sBAQCrC,EAAAltB,UAAAuvB,mBAAP,WACCvqB,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GACnCA,EAAOyZ,uBAUFwO,EAAAltB,UAAAmzB,kBAAP,SAAyB9T,GACxBra,EAAA,KAAWqa,EAAQna,WAAY,SAACua,GAC/BA,EAAOnO,YAAY,MAcd4b,EAAAltB,UAAAgzB,kBAAP,SAAyBvoB,GAAzB,IAAAjL,EAAAE,KAEC,GAAK+K,EAAL,CAOA,IAAI2oB,KAEJ1zB,KAAKuF,OAAOgB,KAAK,SAAChB,GAGjB,GAAKA,EAAO2L,iBAAiBvP,GAAY4D,EAAO2L,MAAM5O,aAAiBiD,EAAO6L,iBAAiBzP,GAAY4D,EAAO6L,MAAM9O,iBAGnH,CACJ,IAAIyK,EAAQxH,EAAOsL,sBAAsB9F,EAAShF,EAAGgF,EAASoC,GAC1DJ,IACHxH,EAAOmU,QAAQia,WAAY5tB,EAAG,EAAGoH,EAAG,EAAGuP,MAAO5c,EAAKkoB,WAAYrL,OAAQ7c,EAAKioB,cAC5E2L,EAAahiB,MAAOnM,OAAQA,EAAQwH,MAAOA,QAO1C/M,KAAK8tB,iBACR9tB,KAAK8R,mBAAmB4hB,QA1BxB1zB,KAAKuF,OAAOgB,KAAK,SAAChB,GACjBA,EAAOqM,iBAiCH4b,EAAAltB,UAAAwR,mBAAP,SAA0B4hB,GAEzB,IAAIE,EAAUrY,EAAA,kBAA0BxV,GAAI,GAAKoH,GAAI,IAAOnN,KAAKqmB,eAC7DwN,EAActY,EAAA,kBAA0BxV,EAAG/F,KAAKqmB,cAAc2B,WAAa,GAAK7a,EAAGnN,KAAKqmB,cAAc0B,YAAc,IAAO/nB,KAAKqmB,eAEhIyN,EAAM,EACNC,KACJzb,EAAA,KAAYob,EAAc,SAACM,GAC1B,IAAIjnB,EAAQinB,EAAYjnB,MACpBA,GAAS1C,EAAA,cAAoB0C,GAAShH,EAAG6tB,EAAQ7tB,EAAGoH,EAAGymB,EAAQzmB,EAAGuP,MAAOmX,EAAY9tB,EAAI6tB,EAAQ7tB,EAAG4W,OAAQkX,EAAY1mB,EAAIymB,EAAQzmB,MACvI4mB,EAAqBriB,MAAO3E,MAAOA,EAAOxH,OAAQyuB,EAAYzuB,SAC9DuuB,GAAO/mB,EAAMI,MAIfumB,EAAeK,GAEFE,KAAK,SAAC3S,EAAGtM,GACrB,OAAIsM,EAAEvU,MAAMI,EAAI6H,EAAEjI,MAAMI,EAChB,EAECmU,EAAEvU,MAAMI,EAAI6H,EAAEjI,MAAMI,GACpB,EAGD,IAIT,IAAI+mB,EAAWJ,EAAMJ,EAAavrB,OAC9B6V,EAAOzC,EAAA,oBAA4BxV,EAAG,EAAGoH,EAAG,GAAKnN,KAAKm0B,aAAaC,cAAcjnB,EAErF,GAAIumB,EAAavrB,OAAS,EAAG,CAE5B,IAAIksB,EAAMT,EAAQzmB,EACdmnB,EAAST,EAAY1mB,EAGzBoO,EAAA,uBAA+BxV,EAAG,EAAGoH,EAAGknB,GAAOr0B,MAE/C,IAAIu0B,GAAU,EAEd,GAAIL,EAAWG,GAAOC,EAASD,GAAO,EAErC,IADA,IAAIG,EAAaF,EACRxgB,EAAI4f,EAAavrB,OAAS,EAAG2L,GAAK,EAAGA,IAAK,CAClD,IACI4F,GADAnU,EAASmuB,EAAa5f,GAAGvO,QACRmU,QACjB+a,EAASf,EAAa5f,GAAG/G,MAAMI,EAWnC,GATAuM,EAAQia,WAAY5tB,EAAG,EAAGoH,GAAI6Q,EAAMtB,MAAO1c,KAAKgoB,WAAYrL,OAAQ6X,EAAaxW,IAE7EtE,EAAQrF,SACXqF,EAAQvF,WAGTuF,EAAQqR,UACRyJ,EAAajZ,EAAA,kBAA0BxV,EAAG,EAAGoH,EAAGuM,EAAQ/N,MAAMkR,OAASnD,EAAQmD,OAAS4X,EAAS/a,EAAQgb,gBAAkBhb,GAASvM,IAElH6Q,EAAM,CACvBuW,GAAU,EACV,OAKH,GAAIL,GAAYG,GAAOC,EAASD,GAAO,GAAKE,EAE3C,IADA,IAAII,EAAQN,EACIxf,GAAPf,EAAI,EAAS4f,EAAavrB,QAAQ2L,EAAIe,EAAKf,IAAK,CACxD,IAAIvO,EAASmuB,EAAa5f,GAAGvO,OACzBkvB,EAASf,EAAa5f,GAAG/G,MAAMI,GAC/BuM,EAAUnU,EAAOmU,SACbia,WAAY5tB,EAAG,EAAGoH,EAAGwnB,EAAOjY,MAAO1c,KAAKgoB,WAAYrL,OAAQ2X,IAEhE5a,EAAQrF,SACXqF,EAAQvF,WAGTuF,EAAQqR,SAER4J,EAAQpZ,EAAA,kBAA0BxV,EAAG,EAAGoH,EAAGuM,EAAQ/N,MAAMkR,OAASnD,EAAQ/N,MAAM6J,eAAiBkE,EAAQmD,OAAS4X,EAAS/a,EAAQkb,mBAAqBlb,GAASvM,KAgB9JqgB,EAAAltB,UAAAkzB,gBAAP,SAAuBhC,EAAkBzmB,EAAkB8pB,GAA3D,IAAA/0B,EAAAE,KACCsF,EAAA,KAAWksB,EAAKhsB,WAAY,SAAC5E,GACxBA,GAAQi0B,IACP/0B,EAAK+F,UAAUsC,OAAS,GAAKvH,EAAKiF,UAAUsC,OAAS,IACxDvH,EAAKiQ,sBAAsB9F,MAaxByiB,EAAAltB,UAAAw0B,gBAAP,SAAuBl0B,EAAwC0b,GAE9D,GAAK1b,EAAL,CAIA,IAAIiD,EACAC,EACA6tB,EAAW/wB,EAAKqJ,SAAS0nB,SAEzB/wB,EAAKqJ,oBAAoB2jB,EAAA,IAC5BtR,EAAQjS,EAAA,YAAkBiS,IAGvBqV,GACHtnB,EAAA,YAAkBiS,GAElBzY,EAAQ,EAAIjD,EAAKkD,IACjBA,EAAM,EAAIlD,EAAKiD,QAGfA,EAAQjD,EAAKiD,MACbC,EAAMlD,EAAKkD,KAGZ,IAAI0K,EAAqB1K,EAAMD,EAE/B,OACCA,MAAOA,EAAQyY,EAAMzY,MAAQ2K,EAC7B1K,IAAKD,EAAQyY,EAAMxY,IAAM0K,KAUjBgf,EAAAltB,UAAAyyB,oBAAV,SAA8B9O,GAC7B,IAAI0O,EAAmB3yB,KAAK2yB,OACxB/L,EAAW+L,EAAO/L,SACtB,GAAgB,SAAZA,GAAmC,UAAZA,EAAsB,CAChD,IAAIiC,EAAiB8J,EAAO9J,OACxBA,GAAU7oB,KAAKkd,MAAM/U,OAAS,KACjC0gB,EAAS7oB,KAAK80B,gBAAgB90B,KAAKkd,MAAM1Q,SAAS,GAAIqc,IAC/CkM,SAAW,QAClB/0B,KAAKgxB,SAAShxB,KAAKkd,MAAO2L,IAI5B,GAAgB,SAAZjC,GAAmC,UAAZA,EAAsB,CAChD,IAAIkC,EAAiB6J,EAAO7J,OACxBA,GAAU9oB,KAAKyd,MAAMtV,OAAS,KACjC2gB,EAAS9oB,KAAK80B,gBAAgB90B,KAAKyd,MAAMjR,SAAS,GAAIsc,IAC/CiM,SAAW,QAClB/0B,KAAKgxB,SAAShxB,KAAKyd,MAAOqL,IAI5B9oB,KAAKozB,oBASI5F,EAAAltB,UAAA0yB,qBAAV,SAA+B/O,GAC9B,IAAI/S,EAAQlR,KAAKkd,MAAM1Q,SAAS,GAC5B0E,IACHlR,KAAKg1B,iBAAoBnxB,MAAOqN,EAAMrN,MAAOC,IAAKoN,EAAMpN,MAGzD,IAAIsN,EAAQpR,KAAKyd,MAAMjR,SAAS,GAC5B4E,IACHpR,KAAKi1B,iBAAoBpxB,MAAOuN,EAAMvN,MAAOC,IAAKsN,EAAMtN,OAShD0pB,EAAAltB,UAAA4yB,mBAAV,SAA6BjP,GAC5B,IACI2C,EADmB5mB,KAAK2yB,OACN/L,SAEtB,GAAI5mB,KAAKk1B,gBAA8B,QAAZtO,GAAkC,SAAZA,GAAsB,CACtE,IACIuO,EAAQ,GADRC,EAAcp1B,KAAKk1B,eAEPrxB,MAAQ,IACvBsxB,EAAQC,EAAYvxB,OAEjBuxB,EAAYtxB,IAAM,IACrBqxB,EAAQC,EAAYtxB,IAAM,GAE3B9D,KAAKgxB,SAAShxB,KAAKkd,OAASrZ,MAAOuxB,EAAYvxB,MAAQsxB,EAAOrxB,IAAKsxB,EAAYtxB,IAAMqxB,IAAS,GAAO,GACrGn1B,KAAKk1B,mBAAgBntB,EACrB/H,KAAKg1B,qBAAkBjtB,EAExB,GAAI/H,KAAKq1B,gBAA8B,QAAZzO,GAAkC,SAAZA,GAAsB,CACtE,IAAIwO,EAEAD,EAAQ,GAFRC,EAAcp1B,KAAKq1B,eAGPxxB,MAAQ,IACvBsxB,EAAQC,EAAYvxB,OAEjBuxB,EAAYtxB,IAAM,IACrBqxB,EAAQC,EAAYtxB,IAAM,GAG3B9D,KAAKgxB,SAAShxB,KAAKyd,OAAS5Z,MAAOuxB,EAAYvxB,MAAQsxB,EAAOrxB,IAAKsxB,EAAYtxB,IAAMqxB,IAAS,GAAO,GACrGn1B,KAAKq1B,mBAAgBttB,EACrB/H,KAAKi1B,qBAAkBltB,IAIfylB,EAAAltB,UAAA6yB,qBAAV,WACCnzB,KAAKk1B,mBAAgBntB,EACrB/H,KAAKg1B,qBAAkBjtB,GAQdylB,EAAAltB,UAAA2yB,oBAAV,SAA8BhP,GAC7B,IAAI0O,EAAmB3yB,KAAK2yB,OACxB/L,EAAW+L,EAAO/L,SAClBC,EAAY8L,EAAO9L,UACvB,GAAI7mB,KAAKg1B,kBAAgC,QAAZpO,GAAkC,SAAZA,GAAsB,CACxE,IAAI0O,EAAgBt1B,KAAKg1B,gBACrB1Y,EAAQqW,EAAO9J,OAEf0M,EAAYv1B,KAAK8wB,mBAAmB9wB,KAAKkd,OAEzC1O,EAAc8mB,EAAcxxB,IAAMwxB,EAAczxB,MAChDsxB,EAAQ7Y,EAAMzY,OAAS0xB,EAAUzxB,IAAMyxB,EAAU1xB,OAEjD2xB,EAAWxyB,KAAKgB,KAAK6iB,EAAWsO,EAAQG,EAAczxB,OACtD4xB,EAASzyB,KAAKE,IAAIiyB,EAAQG,EAAcxxB,IAAK,EAAI+iB,GAEjD2O,GAAY,IACfC,EAASD,EAAWhnB,GAGjBinB,GAAU,IACbD,EAAWC,EAASjnB,GAGrB,IAAIknB,GACH7xB,MAAO2xB,EACP1xB,IAAK2xB,GAENz1B,KAAKk1B,cAAgBQ,EAErB11B,KAAKgxB,SAAShxB,KAAKkd,MAAOwY,GAAU,GAAO,EAAO/C,EAAO9L,WAG1D,GAAI7mB,KAAKi1B,kBAAgC,QAAZrO,GAAkC,SAAZA,GAAsB,CACpE0O,EAAgBt1B,KAAKi1B,gBACrB3Y,EAAQqW,EAAO7J,OAEfyM,EAAYv1B,KAAK8wB,mBAAmB9wB,KAAKyd,OAEzCjP,EAAa8mB,EAAcxxB,IAAMwxB,EAAczxB,MAC/CsxB,EAAQ7Y,EAAMzY,OAAS0xB,EAAUzxB,IAAMyxB,EAAU1xB,OAEjD2xB,EAAWxyB,KAAKgB,KAAK6iB,EAAWsO,EAAQG,EAAczxB,OACtD4xB,EAASzyB,KAAKE,IAAIiyB,EAAQG,EAAcxxB,IAAK,EAAI+iB,GAEjD2O,GAAY,IACfC,EAASD,EAAWhnB,GAGjBinB,GAAU,IACbD,EAAWC,EAASjnB,GAGjBknB,GACH7xB,MAAO2xB,EACP1xB,IAAK2xB,GAENz1B,KAAKq1B,cAAgBK,EACrB11B,KAAKgxB,SAAShxB,KAAKyd,MAAOiY,GAAU,GAAO,EAAO/C,EAAO9L,WAG1D7mB,KAAKozB,oBASI5F,EAAAltB,UAAAwyB,sBAAV,SAAgC7O,KAahC7jB,OAAAC,eAAWmtB,EAAAltB,UAAA,kBA6BX,WACC,OAAON,KAAK21B,iBA9Bb,SAAsBrE,GAAtB,IAAAxxB,EAAAE,KACKA,KAAK21B,aACR31B,KAAK4yB,cAAc5yB,KAAK21B,aAEzB31B,KAAK21B,YAAcrE,EAEfA,IACHtxB,KAAKuT,WAAW7B,KAAK4f,GACrBA,EAAUtR,OAAShgB,KAAKmuB,iBACxBmD,EAAU9N,aAAc,EACxB8N,EAAUsE,UAAUlG,YAAa,EACjC4B,EAAUuE,QAAQnG,YAAa,EAC/B4B,EAAUvG,SACVuG,EAAUzE,YAAc,aACxByE,EAAU1X,OAAOC,GAAG,eAAgB7Z,KAAK81B,uBAAwB91B,MAAM,GAEvEsxB,EAAU/hB,QAAQiK,IAAI,gBAAiB,SAACuc,GACvC,IAAI7kB,EAAQpR,EAAKod,MAAM1Q,SAAS,GAIhC,OAHI0E,IACH6kB,EAAIv1B,MAAQ0Q,EAAM5B,iBAAiBymB,EAAIhrB,WAEjCgrB,sCAiBV31B,OAAAC,eAAWmtB,EAAAltB,UAAA,kBA6BX,WACC,OAAON,KAAKg2B,iBA9Bb,SAAsB1E,GAAtB,IAAAxxB,EAAAE,KACKA,KAAKg2B,aACRh2B,KAAK4yB,cAAc5yB,KAAKg2B,aAEzBh2B,KAAKg2B,YAAc1E,EAEfA,IACHtxB,KAAKuT,WAAW7B,KAAK4f,GACrBA,EAAUtR,OAAShgB,KAAKgvB,mBACxBsC,EAAUsE,UAAUlG,YAAa,EACjC4B,EAAU9N,aAAc,EACxB8N,EAAUuE,QAAQnG,YAAa,EAC/B4B,EAAU1B,UACV0B,EAAUzE,YAAc,WACxByE,EAAU1X,OAAOC,GAAG,eAAgB7Z,KAAKi2B,uBAAwBj2B,MAAM,GAEvEsxB,EAAU/hB,QAAQiK,IAAI,gBAAiB,SAACuc,GACvC,IAAI3kB,EAAQtR,EAAK2d,MAAMjR,SAAS,GAIhC,OAHI4E,IACH2kB,EAAIv1B,MAAQ4Q,EAAM9B,iBAAiBymB,EAAIhrB,WAEjCgrB,sCAkBAvI,EAAAltB,UAAAw1B,uBAAV,SAAiC7R,GAChC,GAAIjkB,KAAKkyB,OAAQ,CAChB,IAAIZ,EAAuBrN,EAAMxE,OAC7BnD,EAAQgV,EAAUhV,MACL,GAAbA,EAAMxY,MACTwY,EAAMyY,SAAW,OAEC,GAAfzY,EAAMzY,QACTyY,EAAMyY,SAAW,SAElBzY,EAAQtc,KAAKgxB,SAAShxB,KAAKkd,MAAOZ,GAClCgV,EAAU4E,SAAS5Z,KAUXkR,EAAAltB,UAAA21B,uBAAV,SAAiChS,GAChC,GAAIjkB,KAAKkyB,OAAQ,CAChB,IAAIZ,EAAuBrN,EAAMxE,OAC7BnD,EAAQgV,EAAUhV,MACL,GAAbA,EAAMxY,MACTwY,EAAMyY,SAAW,OAEC,GAAfzY,EAAMzY,QACTyY,EAAMyY,SAAW,SAElBzY,EAAQtc,KAAKgxB,SAAShxB,KAAKyd,MAAOnB,GAClCgV,EAAU4E,SAAS5Z,KAaXkR,EAAAltB,UAAA0wB,SAAV,SAAmBQ,EAA8ClV,EAAehM,EAAqBrN,EAAiBkzB,GACrH,IAAIC,GAAsBvyB,MAAO,EAAGC,IAAK,GA2BzC,OAzBA9D,KAAKszB,oBAEAtzB,KAAKwyB,aACTltB,EAAA,KAAWksB,EAAKhsB,WAAY,SAAC5E,GAO5B,GANIA,EAAKqJ,SAAS0nB,WACjBrV,EAAQjS,EAAA,YAAkBiS,IAG3B1b,EAAKgR,YAAY,GAEb3O,EAAO,CACV,IAAIozB,EAAO/Z,EAAMxY,IAAMwY,EAAMzY,MAC7ByY,EAAMzY,MAAQjD,EAAK6O,cAAc6M,EAAMzY,MAAQ,KAAQ,GACvDyY,EAAMxY,IAAMwY,EAAMzY,MAAQwyB,EAG3B,IAAId,EAAoB30B,EAAKuD,KAAKmY,EAAOhM,EAAWA,EAAW6lB,GAE3Dv1B,EAAKqJ,SAAS0nB,WACjB4D,EAAYlrB,EAAA,YAAkBkrB,IAG/Ba,EAAYb,IAGPa,GAYRh2B,OAAAC,eAAWmtB,EAAAltB,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKS,iBAAiB,cAAeD,GAAO,oCAwB7CJ,OAAAC,eAAWmtB,EAAAltB,UAAA,uBAOX,WACC,OAAON,KAAKO,iBAAiB,wBAR9B,SAA2BC,GAC1BR,KAAKS,iBAAiB,kBAAmBD,GAAO,oCAgBvCgtB,EAAAltB,UAAAg2B,YAAV,SAAsBrS,GACrB,IAAIoC,EAAgBrmB,KAAKqmB,cACrBkQ,EAAmBhb,EAAA,mBAA0B0I,EAAMlX,MAAO/M,KAAKw2B,cAAex2B,KAAKm0B,aAAasC,UAChGC,EAAYnb,EAAA,iBAAwBgb,EAAUlQ,GAC9CsQ,EAAQ1S,EAAM0S,MAAMxpB,EAEpBypB,EAAiB52B,KAAK8wB,mBAAmB9wB,KAAKkd,OAC9C2Z,EAAiB72B,KAAK8wB,mBAAmB9wB,KAAKyd,OAM9CoR,EAAqB7uB,KAAK6uB,mBAE9B,GAA0B,QAAtBA,GAAsD,SAAtBA,EAA+B,CAElE,IAAIiI,EAAcF,EAAO9yB,IAAM8yB,EAAO/yB,MAElCkzB,EAAY/zB,KAAKgB,KARN,EAQsB4yB,EAAO/yB,MAV7B,IAUiD8yB,EAAQ,KACpEK,EAAUh0B,KAAKE,IAAI0zB,EAAO9yB,IAXf,IAWiC6yB,EAAQ,IAAK,GAEzDI,GAAa,IAChBC,EAAUD,EAAYD,GAGnBE,GAAW,IACdD,EAAYC,EAAUF,GAGvB92B,KAAKgxB,SAAShxB,KAAKkd,OAASrZ,MAAOkzB,EAAWjzB,IAAKkzB,IAGpD,GAA0B,QAAtBnI,GAAsD,SAAtBA,EAA+B,CAClE8H,IAAU,EACV,IAAIM,EAAcJ,EAAO/yB,IAAM+yB,EAAOhzB,MAElCqzB,EAAYl0B,KAAKgB,KA1BN,EA0BsB6yB,EAAOhzB,MA5B7B,IA4BiD8yB,EAAQ,KACpEQ,EAAUn0B,KAAKE,IAAI2zB,EAAO/yB,IA7Bf,IA6BiC6yB,EAAQ,IAAK,GAEzDO,GAAa,IAChBC,EAAUD,EAAYD,GAGnBE,GAAW,IACdD,EAAYC,EAAUF,GAGvBj3B,KAAKgxB,SAAShxB,KAAKyd,OAAS5Z,MAAOqzB,EAAWpzB,IAAKqzB,IAGpD,GAA0B,SAAtBtI,GAAuD,UAAtBA,EAAgC,CACpE,IAAIjO,EAAY8V,EAAU3wB,EAAIsgB,EAAc+Q,SAExCL,EAAY/zB,KAAKgB,KA3CN,EA2CsB4yB,EAAO/yB,MA7C7B,IA6CiD8yB,EAAQ,IAAM/V,GAC9EmW,EAAY/zB,KAAKE,IAAI6zB,EAAWnW,GAE5BoW,EAAUh0B,KAAKE,IAAI0zB,EAAO9yB,IAhDf,IAgDiC6yB,EAAQ,KAAO,EAAI/V,GAAY,GAC/EoW,EAAUh0B,KAAKgB,IAAIgzB,EAASpW,GAE5B5gB,KAAKgxB,SAAShxB,KAAKkd,OAASrZ,MAAOkzB,EAAWjzB,IAAKkzB,IAGpD,GAA0B,SAAtBnI,GAAuD,UAAtBA,EAAgC,CACpE,IAAIhO,EAAY6V,EAAUvpB,EAAIkZ,EAAcgR,UAExCH,EAAYl0B,KAAKgB,KAvDN,EAuDsB6yB,EAAOhzB,MAzD7B,IAyDiD8yB,EAAQ,KAAO,EAAI9V,IACnFqW,EAAYl0B,KAAKE,IAAIg0B,EAAWrW,GAE5BsW,EAAUn0B,KAAKE,IAAI2zB,EAAO/yB,IA5Df,IA4DiC6yB,EAAQ,IAAM9V,EAAW,GACzEsW,EAAUn0B,KAAKgB,IAAImzB,EAAStW,GAE5B7gB,KAAKgxB,SAAShxB,KAAKyd,OAAS5Z,MAAOqzB,EAAWpzB,IAAKqzB,MAYrD/2B,OAAAC,eAAWmtB,EAAAltB,UAAA,0BAoBX,WACC,OAAON,KAAKO,iBAAiB,2BArB9B,SAA8BC,GAEzBR,KAAKS,iBAAiB,qBAAsBD,KAClC,QAATA,GACHR,KAAKs3B,oBAAsBt3B,KAAKqmB,cAAczM,OAAOC,GAAG,QAAS7Z,KAAKs2B,YAAat2B,MAAM,GACzFA,KAAKuT,WAAW7B,KAAK1R,KAAKs3B,sBAGtBt3B,KAAKs3B,sBACRt3B,KAAKqmB,cAAckR,WAAY,EAC/Bv3B,KAAKqmB,cAAcmR,WAAY,EAC/Bx3B,KAAKs3B,oBAAoBja,6CAqBnBmQ,EAAAltB,UAAAm3B,qBAAV,SAA+Btf,GAA/B,IAAArY,EAAAE,KAaC,OAXAmY,EAASvY,EAAAU,UAAMm3B,qBAAoB13B,KAAAC,KAACmY,GAGpC7S,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GACnC4S,EAASrY,EAAK43B,yBACbvf,EACK5S,EAAOuQ,YACX,QAAS,QAAS,YAAa,gBAI3BqC,GAWEqV,EAAAltB,UAAAq3B,uBAAV,SAAiCxf,GAAjC,IAAArY,EAAAE,KAYC,OAXAmY,EAASvY,EAAAU,UAAMm3B,qBAAoB13B,KAAAC,KAACmY,GAGpC7S,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GACnC4S,EAASrY,EAAK43B,yBACbvf,EACK5S,EAAOuQ,YACX,SAAU,SAAU,aAAc,iBAI9BqC,GASDqV,EAAAltB,UAAAoiB,cAAP,SAAqBC,GAEpB,GAAIA,EAAQ,CAGX,IAAIzF,KACAO,KAGJ,GAAItX,EAAA,SAAewc,EAAOzF,QAAU/W,EAAA,QAAcwc,EAAOzF,OACxD,IAAK,IAAIpJ,EAAI,EAAGe,EAAM8N,EAAOzF,MAAM/U,OAAQ2L,EAAIe,EAAKf,IAAK,CACxD,IAAK6O,EAAOzF,MAAMpJ,GAAG0L,KACpB,MAAM9E,MAAM,yCAA2C5G,EAAI,MAEnD3N,EAAA,SAAewc,EAAOzF,MAAMpJ,GAAe,cACnDoJ,EAAMxL,MACL2K,WAAYsG,EAAOzF,MAAMpJ,GAAe,WACxCzH,MAAOyH,WAEA6O,EAAOzF,MAAMpJ,GAAgB,YAIxC,GAAI3N,EAAA,SAAewc,EAAOlF,QAAUtX,EAAA,QAAcwc,EAAOlF,OACxD,IAAS3J,EAAI,EAAGe,EAAM8N,EAAOlF,MAAMtV,OAAQ2L,EAAIe,EAAKf,IAAK,CACxD,IAAK6O,EAAOlF,MAAM3J,GAAG0L,KACpB,MAAM9E,MAAM,yCAA2C5G,EAAI,MAEnD3N,EAAA,SAAewc,EAAOlF,MAAM3J,GAAe,cACnD2J,EAAM/L,MACL2K,WAAYsG,EAAOlF,MAAM3J,GAAe,WACxCzH,MAAOyH,WAEA6O,EAAOlF,MAAM3J,GAAgB,YAMxC,GAAI3N,EAAA,SAAewc,EAAOpd,SAAWY,EAAA,QAAcwc,EAAOpd,QACzD,IAASuO,EAAI,EAAGe,EAAM8N,EAAOpd,OAAO4C,OAAQ2L,EAAIe,EAAKf,IACpD6O,EAAOpd,OAAOuO,GAAG0L,KAAOmD,EAAOpd,OAAOuO,GAAG0L,MAAQ,aAwBnD,GAnBIrZ,EAAA,SAAewc,EAAOgQ,UAAYxsB,EAAA,SAAewc,EAAOgQ,OAAOnT,QAClEmD,EAAOgQ,OAAOnT,KAAO,YAIlBrZ,EAAA,SAAewc,EAAOoO,cAAgB5qB,EAAA,SAAewc,EAAOoO,WAAWvR,QAC1EmD,EAAOoO,WAAWvR,KAAO,aAGtBrZ,EAAA,SAAewc,EAAO0O,cAAgBlrB,EAAA,SAAewc,EAAO0O,WAAW7R,QAC1EmD,EAAO0O,WAAW7R,KAAO,aAG1B5f,EAAAU,UAAMoiB,cAAa3iB,KAAAC,KAAC2iB,GAMhBlF,EAAMtV,OACT,IAAS2L,EAAI,EAAGe,EAAM4I,EAAMtV,OAAQ2L,EAAIe,EAAKf,IAC5C9T,KAAKyd,MAAMjR,SAASiR,EAAM3J,GAAGzH,OAAOsW,QACnCtG,WAAYoB,EAAM3J,GAAGuI,YAIxB,GAAIa,EAAM/U,OACT,IAAS2L,EAAI,EAAGe,EAAMqI,EAAM/U,OAAQ2L,EAAIe,EAAKf,IAC5C9T,KAAKkd,MAAM1Q,SAAS0Q,EAAMpJ,GAAGzH,OAAOsW,QACnCtG,WAAYa,EAAMpJ,GAAGuI,cAkBhBmR,EAAAltB,UAAAs3B,YAAV,SAAsBtW,EAAWtM,GAChC,OAAIsM,GAAKtM,EACD,EAGM,cAALsM,EACD,EAEM,cAALtM,GACA,EAEK,cAALsM,EACD,EAEM,cAALtM,GACA,EAEK,UAALsM,EACD,EAEM,UAALtM,GACA,EAEK,UAALsM,EACD,EAEM,UAALtM,GACA,EAGDpV,EAAAU,UAAMs3B,YAAW73B,KAAAC,KAACshB,EAAGtM,IASpBwY,EAAAltB,UAAAu3B,aAAV,WACC,OAAO,IAAInf,GAWZtY,OAAAC,eAAWmtB,EAAAltB,UAAA,qBAaX,WACC,OAAON,KAAK83B,oBAdb,SAAyBC,GAAzB,IAAAj4B,EAAAE,KACCA,KAAK83B,eAAiBC,EAClBA,GACHA,EAAOne,OAAOC,GAAG,MAAO,WACvB/Z,EAAKkxB,SAASlxB,EAAKod,OAASrZ,MAAO,EAAGC,IAAK,IAC3ChE,EAAKkxB,SAASlxB,EAAK2d,OAAS5Z,MAAO,EAAGC,IAAK,UACzCiE,GAAW,oCAiBTylB,EAAAltB,UAAAqQ,SAAP,SAAgBC,GAAhB,IAAA9Q,EAAAE,KAEC4Q,EAAOsM,MAAM3W,KAAK,SAAC3F,GAClBd,EAAKod,MAAMxL,KAAK9Q,EAAKmrB,WAGtBnb,EAAO6M,MAAMlX,KAAK,SAAC3F,GAClBd,EAAK2d,MAAM/L,KAAK9Q,EAAKmrB,WAMtBnsB,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GAIZA,EAAO+hB,SACT3yB,KAAK2yB,OAAS/hB,EAAO+hB,OAAO5G,SAG1Bnb,EAAOmgB,aACT/wB,KAAK+wB,WAAangB,EAAOmgB,WAAWhF,SAGlCnb,EAAOygB,aACTrxB,KAAKqxB,WAAazgB,EAAOygB,WAAWtF,UAQ/ByB,EAAAltB,UAAAoV,YAAP,WACC9V,EAAAU,UAAMoV,YAAW3V,KAAAC,MAEjB,IAAI+wB,EAAa/wB,KAAK+wB,WAClBA,GAAcA,aAAsB1G,GACvC0G,EAAWvG,eAAe9U,cAG3B,IAAI2b,EAAarxB,KAAKqxB,WAClBA,GAAcA,aAAsBhH,GACvCgH,EAAW7G,eAAe9U,cAG3B1V,KAAKkd,MAAM3W,KAAK,SAAC3F,GAChBA,EAAK8U,gBAGN1V,KAAKyd,MAAMlX,KAAK,SAAC3F,GAChBA,EAAK8U,iBASA8X,EAAAltB,UAAA03B,QAAP,SAAeC,EAAgCC,GAC9Ct4B,EAAAU,UAAM03B,QAAOj4B,KAAAC,KAACi4B,EAAaC,GACvBl4B,KAAK+wB,sBAAsB1G,GAC9BrqB,KAAK+wB,WAAWvG,eAAewN,QAAQC,EAAaC,GAEjDl4B,KAAKqxB,sBAAsBhH,GAC9BrqB,KAAKqxB,WAAW7G,eAAewN,QAAQC,EAAaC,IAGvD1K,EA1vDA,CAA6BD,EAAA,GAkwD7BtsB,EAAA,EAASC,kBAA2B,QAAIupB,EASxC0N,EAAA,EAAazmB,MACZ0mB,SAAUD,EAAA,EAAsBE,QAChCC,MAAO,SAAS7Y,EAAQ8Y,GACvB,GAAI9Y,aAAkBgL,GAAWhL,EAAOsR,WAAY,CACnD,IAAIuH,EAAQ7Y,EAAO6L,OAAOtjB,OAAOuwB,GAGjC,OAFc9Y,EAAOsR,WAAWzF,OAAOtjB,OAAOuwB,GACtCvlB,WAAW5H,UAAW,EACvBktB,EAGR,OAAO,QAOTH,EAAA,EAAazmB,MACZ0mB,SAAUD,EAAA,EAAsBE,QAChCC,MAAO,SAAS7Y,EAAQ8Y,GACvB,GAAI9Y,aAAkBgL,GAAWhL,EAAO4R,WAAY,CACnD,IAAIiH,EAAQ7Y,EAAO6L,OAAOtjB,OAAOuwB,GAGjC,OAFc9Y,EAAO4R,WAAW/F,OAAOtjB,OAAOuwB,GACtCvlB,WAAW5H,UAAW,EACvBktB,EAGR,OAAO,wBC1+DTE,EAAA,SAAA54B,GA8BC,SAAA64B,IAAA,IAAA34B,EAGCF,EAAAG,KAAAC,OAAOA,KACPF,EAAKG,UAAY,oBAGjBH,EAAKmZ,YAAa,EAClBnZ,EAAKokB,qBAAsB,EAC3BpkB,EAAKkuB,OAAS,OAGd,IAAI0K,EAAa54B,EAAKmnB,YAAY5N,EAAA,GAClCvZ,EAAK44B,WAAaA,EAClBA,EAAWlV,aAAc,EACzBkV,EAAWpf,WAAWxZ,EAAKyZ,MAAMC,IAAI,SACrCkf,EAAWzf,YAAa,EACxBnZ,EAAKyT,WAAW7B,KAAKgnB,GAIrB,IAAIC,EAAe74B,EAAKmnB,YAAY5N,EAAA,UACpCvZ,EAAK64B,aAAeA,EACpBA,EAAanV,aAAc,EAC3BmV,EAAarf,WAAWxZ,EAAKyZ,MAAMC,IAAI,SACvCmf,EAAa1f,YAAa,EAC1BnZ,EAAKyT,WAAW7B,KAAKinB,KAwDvB,OAhHuCx4B,EAAA,EAAAs4B,EAAA74B,GAoE/B64B,EAAAn4B,UAAAs4B,YAAP,SAAmBC,EAAkBC,EAAuBC,EAAqBC,GAChF,IAAKh5B,KAAKoL,SACT,GAAIytB,EAAO1wB,OAAS,GAAK2wB,EAAY3wB,OAAS,EAAG,CAEhD,IAAIqU,EAAeC,EAAA,QAAe1W,EAAG8yB,EAAO,GAAG9yB,EAAI,GAAKoH,EAAG0rB,EAAO,GAAG1rB,EAAI,KAASsP,EAAA,OAAaoc,EAAO,IAAM,IAAII,EAAA,EAAmBF,EAAaC,GAAaE,OAAOL,GAE1I,GAAtB74B,KAAKwnB,eAAyD,GAAnCxnB,KAAK24B,aAAanR,gBAIhDxnB,KAAK24B,aAAanc,KAAOA,IAGtBxc,KAAKknB,YAAc,GAAKlnB,KAAK04B,WAAWxR,YAAc,KACzD1K,GAAQC,EAAA,OAAaqc,EAAY,IAAM,IAAIG,EAAA,EAAmBF,EAAaC,GAAaE,OAAOJ,GAC/Ftc,GAAQC,EAAA,OAAaoc,EAAO,IAC5Brc,GAAQC,EAAA,YAERzc,KAAK04B,WAAWlc,KAAOA,QAIxBxc,KAAK04B,WAAWlc,KAAO,GACvBxc,KAAK24B,aAAanc,KAAO,IAUrBic,EAAAn4B,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GAEf,IAAIuoB,EAAcn5B,KAAK24B,aACvBzxB,EAAA,eAAuB0J,EAAQuoB,EAAYnmB,WAAYqG,EAAA,GACvD8f,EAAYjS,YAAc,EAE1B,IAAIkS,EAAcp5B,KAAK04B,WACvBxxB,EAAA,eAAuB0J,EAAQwoB,EAAYpmB,WAAYqG,EAAA,GACvD+f,EAAY5R,cAAgB,GAE9BiR,EAhHA,CAAuClS,EAAA,GAwHvCtlB,EAAA,EAASC,kBAAqC,kBAAIs3B,2CC5IlDa,GAAA,SAAAz5B,GAoBC,SAAA05B,IAAA,IAAAx5B,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBAKnB,OA3BwCE,EAAA,EAAAm5B,EAAA15B,GA2BxC05B,EA3BA,CAAwCjiB,GA6GxCkiB,GAAA,SAAA35B,GAsEC,SAAA45B,IAAA,IAAA15B,EACCF,EAAAG,KAAAC,OAAOA,YAbDF,EAAA25B,YAAsB,GAe5B35B,EAAK45B,SAAW,IAAI53B,EAAA,EAAgChC,EAAK65B,iBACzD75B,EAAK45B,SAAS3qB,SAAS6qB,eAAgB,EAEvC95B,EAAKyT,WAAW7B,KAAK,IAAI5P,EAAA,EAAahC,EAAK45B,WAC3C55B,EAAKyT,WAAW7B,KAAK5R,EAAK45B,SAAS3qB,UAEnCjP,EAAK+5B,kBAAoB,IAAIv0B,EAAA,aAAsCxF,EAAK45B,SAAU,WAAM,OAAA55B,EAAK45B,SAAS1xB,WACtGlI,EAAK+5B,kBAAkBC,gBAAiB,EAExCh6B,EAAKG,UAAY,aAEjBH,EAAK0nB,cAAgB,EACrB1nB,EAAKonB,YAAc,EAEnBpnB,EAAKmS,SAAU,EAEfnS,EAAKi6B,SAAW,EAChBj6B,EAAKk6B,SAAW,EAEhBl6B,EAAKoS,aAAe,IAEpBpS,EAAKm6B,kBAAoBn6B,EAAKsZ,cAAc6N,YAAYV,EAAA,GACxDzmB,EAAKm6B,kBAAkBhhB,YAAa,EAMpCnZ,EAAKovB,iBAAiBU,UAEtB9vB,EAAKI,eA2oBP,OAlvBgCC,EAAA,EAAAq5B,EAAA55B,GA8GrB45B,EAAAl5B,UAAA+C,sBAAV,WACCzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MACtBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,iBAOnC+1B,EAAAl5B,UAAAq5B,cAAV,WACC,OAAO,IAAInB,GASFgB,EAAAl5B,UAAAoD,eAAV,WACC,OAAO,IAAI21B,IAUFG,EAAAl5B,UAAAwa,wBAAV,SAAkCpY,GAGjC,IAAI0O,EAAcpR,KAAK8Y,OAAOmE,MAC1B/L,EAAclR,KAAK4Y,OAAOqE,MAE9B,GAAIjd,KAAKye,UAAYze,KAAK6e,QAAS,CAElC,IAAIqb,EAAqCl6B,KAAK6F,UAAU2G,SAAS9J,EAAS2J,MAAQ,GAIlF,GAFA3J,EAASC,UAAY3C,KAEjBA,KAAKyF,UAAYyL,GAChBE,aAAiB1P,EAAA,EAAW,CAC/B,IAAIy4B,EAAmB/oB,EAAMwQ,UACzBsY,IACHC,EAAWD,EAAiB74B,OAAe,OAAE+4B,cAI9C13B,EAAS23B,gBAAgB,SAAUF,EAAU,GAC7Cz3B,EAAS23B,gBAAgB,SAAU33B,EAASrB,OAAOmW,OAAOhX,OAEtD0Q,aAAiBvP,IACpBe,EAAS43B,mBAAmB,QAAS53B,EAASmQ,UAAU1B,MAAQ,EAAG,GACnEzO,EAAS43B,mBAAmB,QAAS53B,EAASmQ,UAAU1B,QAI3D,GAAInR,KAAKyF,UAAY2L,GAChBF,aAAiBxP,EAAA,EAAW,CAC/B,IAAI64B,EAAmBrpB,EAAM0Q,UACzBsY,IACHK,EAAWL,EAAiB74B,OAAe,OAAE+4B,cAG9C13B,EAAS23B,gBAAgB,SAAUE,EAAU,GAC7C73B,EAAS23B,gBAAgB,SAAU33B,EAASrB,OAAOkW,OAAO/W,OAEtD4Q,aAAiBzP,IACpBe,EAAS43B,mBAAmB,QAAS53B,EAASmQ,UAAU1B,MAAQ,EAAG,GACnEzO,EAAS43B,mBAAmB,QAAS53B,EAASmQ,UAAUxB,cAMvDrR,KAAKyF,UAAYyL,GAChBE,aAAiB1P,EAAA,IAChBwP,aAAiBvP,GACpBe,EAAS43B,mBAAmB,QAAS53B,EAASmQ,UAAU1B,OAErDD,aAAiBiC,GACpBzQ,EAAS43B,mBAAmB,YAAa53B,EAASmQ,UAAU6D,YAI3D1W,KAAKyF,UAAY2L,GAChBF,aAAiBxP,EAAA,IAChB0P,aAAiBzP,GACpBe,EAAS43B,mBAAmB,QAAS53B,EAASmQ,UAAUxB,OAErDD,aAAiB+B,GACpBzQ,EAAS43B,mBAAmB,YAAa53B,EAASmQ,UAAU8D,aAc1D6iB,EAAAl5B,UAAA0e,kBAAP,SAAyBtc,GACxB9C,EAAAU,UAAM0e,kBAAiBjf,KAAAC,KAAC0C,GAEpBA,GAAYA,EAAS83B,UACxBx6B,KAAKy6B,mBAAqB/3B,EAAS83B,UAS9BhB,EAAAl5B,UAAA6T,SAAP,eAAArU,EAAAE,KAECJ,EAAAU,UAAM6T,SAAQpU,KAAAC,MAEdA,KAAK65B,kBAAkBtQ,QAEvBvpB,KAAK06B,mBAAmB16B,KAAK26B,qBAE7Br1B,EAAA,KAAWtF,KAAKqc,WAAW7W,WAAY,SAAC8W,GACvCxc,EAAK46B,mBAAmB56B,EAAK66B,oBAAqBre,KAGnDhX,EAAA,KAAWtF,KAAK65B,kBAAkBr0B,WAAY,SAACg1B,GAC9CA,EAAQp3B,YAAa,KASbo2B,EAAAl5B,UAAAs6B,UAAV,WAOC,IANA,IAAIh1B,EAAqB5F,KAAK4F,WAC1BK,EAAmBjG,KAAKiG,SAKnB6N,EAAI9T,KAAK4F,WAAa,EAAGkO,GAAK,EAAGA,IAAK,CAE9C,IADIpR,EAAW1C,KAAK6F,UAAU2G,SAASsH,KACvBpR,EAAS6d,SAASvgB,KAAK+Y,gBAAkBrW,EAAS6d,SAASvgB,KAAKgZ,eAAgB,CAC/FpT,EAAakO,EACb,OAGF9T,KAAK26B,oBAAsB36B,KAAK66B,kBAAkBj1B,GAAa,SAAU,cAAe,kBAAmB,gBAAiB,OAAQ,cAAe,YAI1IkO,EAAI9T,KAAKiG,SAAlB,IAAK,IAAuB4O,EAAM7U,KAAK6F,UAAUsC,OAAQ2L,EAAIe,EAAKf,IAAK,CACtE,IAAIpR,EACJ,IADIA,EAAW1C,KAAK6F,UAAU2G,SAASsH,KACvBpR,EAAS6d,SAASvgB,KAAK+Y,gBAAkBrW,EAAS6d,SAASvgB,KAAKgZ,eAAgB,CAC/F/S,EAAW6N,EAAI,EACf,OAIF9T,KAAK86B,mBAAqBl1B,EAC1B5F,KAAK+6B,iBAAmB90B,GAMfuzB,EAAAl5B,UAAAu6B,kBAAV,SAA4BG,EAAuBhoB,GAAnD,IAAAlT,EAAAE,KACKi7B,EAAsBj7B,KAAKi7B,eAC3Br1B,EAAao1B,EAejB,OAbA1iB,EAAA,KAAYtF,EAAY,SAACmX,GACxB,GAAIhkB,EAAA,SAAe80B,EAAe9Q,IACjC,IAAK,IAAIrW,EAAIlO,EAAYkO,GAAK,EAAGA,IAAK,CACrC,IAAIpR,EAAW5C,EAAK+F,UAAU2G,SAASsH,GACvC,GAAI3N,EAAA,SAAezD,EAASsQ,WAAWmX,IAAY,CAC9C6Q,EAAgBlnB,IACnBknB,EAAgBlnB,GAEjB,UAKGknB,GAUExB,EAAAl5B,UAAAo6B,mBAAV,SAA6BQ,EAAmB3F,GAC/C,IAAI4F,GACH9uB,MAAS6uB,EACT3F,UAAaA,GAEd,GACC4F,EAASn7B,KAAKo7B,YAAYD,EAAO9uB,MAAO8uB,EAAO5F,iBACvC4F,IAUA3B,EAAAl5B,UAAA86B,YAAV,SAAsBF,EAAmB3F,GACxC,IAAI8F,GAAa,EACbxC,KACJqC,EAAYl4B,KAAKE,IAAIg4B,EAAWl7B,KAAK6F,UAAUsC,QAC/C,IAGImzB,EAHAr1B,EAAmBjD,KAAKE,IAAIlD,KAAK+6B,iBAAkB/6B,KAAK6F,UAAUsC,QACtEnI,KAAK+6B,iBAAmB/3B,KAAKE,IAAIlD,KAAK+6B,iBAAkB/6B,KAAK6F,UAAUsC,QAGvE,IAAIozB,GAA6B,EAE7Bf,EAA6Bx6B,KAAK65B,kBAAkB2B,WACxDhB,EAAQp3B,YAAa,EAEjBmyB,GACHiF,EAAQxa,OAASuV,EAAUkG,SAC3Bv0B,EAAA,eAAuBquB,EAAUkG,SAAUjB,EAASnhB,EAAA,KAGpDnS,EAAA,eAAuBlH,KAAMw6B,EAASnhB,EAAA,GACtCmhB,EAAQ9N,QAAQ/kB,QAChB6yB,EAAQxa,OAAShgB,KAAKi6B,mBAGvB,IAAK,IAAInmB,EAAYonB,EAAWpnB,EAAI7N,EAAU6N,IAAK,CAElD,IAAIpR,EAA8B1C,KAAK6F,UAAU2G,SAASsH,GAc1D,GAbApR,EAAS83B,QAAUA,EAEf93B,EAASg5B,gBAER5nB,GAAKonB,EACRl7B,KAAK27B,wBAAwBj5B,EAASsQ,WAAYwnB,GAIlDe,EAAoBv7B,KAAK27B,wBAAwBj5B,EAASsQ,WAAYwnB,GAAS,IAI7E93B,EAAS6d,SAASvgB,KAAK+Y,gBAAkBrW,EAAS6d,SAASvgB,KAAKgZ,eACnEhZ,KAAK47B,UAAU/C,EAAQn2B,EAAU1C,KAAKqb,OAAQrb,KAAKyb,YAE/C,CAEJ,GAAI3H,GAAKonB,EACR,SAOA,IAJuBl7B,KAAKiS,QAId,CACbqpB,EAAaxnB,EACb,OAOH,GAFAwnB,EAAaxnB,EAET9T,KAAKyF,oBAAoB9D,EAAU,CACtC,IAAIke,EAAO7f,KAAK6F,UAAU2G,SAASsH,EAAI,GACvC,GAAI+L,GAAQ7f,KAAKyF,SAASsM,QAAQ8N,EAAMnd,GAAW,CAClD24B,GAAa,EACb,OAIF,GAAIE,EACH,MAGF,OAAOv7B,KAAK67B,aAAarB,EAAS3B,EAAQqC,EAAWI,EAAY/F,EAAW8F,IAanE7B,EAAAl5B,UAAAs7B,UAAV,SAAoB/C,EAAkBn2B,EAA6B2Y,EAAgBI,EAAgByG,GAClG,IAAInV,EAAQ/M,KAAKqf,SAAS3c,EAAU2Y,EAAQI,EAAQ/Y,EAASsL,iBAAiBqN,GAAS3Y,EAASsL,iBAAiByN,IAC5GyG,IACJxf,EAASqK,MAAQA,GAElB8rB,EAAOnnB,KAAK3E,IAaHysB,EAAAl5B,UAAAu7B,aAAV,SAAuBrB,EAA4B3B,EAAkBqC,EAAmBI,EAAoB/F,EAA0B/b,GACrI,IAAIsf,KAEJ,GAAI94B,KAAK8V,WAAsC9V,KAAK2b,cACnD3b,KAAK8V,WAAsC9V,KAAK4b,cAChD5b,KAAKyZ,QACL,IAAK,IAAI3F,EAAYwnB,EAAYxnB,GAAKonB,EAAWpnB,IAAK,CACrD,IAAIpR,EAA8B1C,KAAK6F,UAAU2G,SAASsH,GACtDpR,EAAS6d,SAASvgB,KAAK+Y,gBAAkBrW,EAAS6d,SAASvgB,KAAKgZ,gBACnEhZ,KAAK47B,UAAU9C,EAAap2B,EAAU1C,KAAKsb,WAAYtb,KAAK0b,YAAY,OAItE,CACJ,IAAIjW,EAAiBzF,KAAKyF,SACtBrD,EAAgBy2B,EAAO1wB,OACvB+I,EAAclR,KAAKkR,MACnBE,EAAcpR,KAAKoR,MACnBhP,EAAQ,IACPqD,GAAYyL,GACf4nB,EAAYpnB,MAAO3L,EAAG8yB,EAAOz2B,EAAQ,GAAG2D,EAAGoH,EAAGiE,EAAM6F,UAAU9J,IAC9D2rB,EAAYpnB,MAAO3L,EAAG8yB,EAAO,GAAG9yB,EAAGoH,EAAGiE,EAAM6F,UAAU9J,MAGtD2rB,EAAYpnB,MAAO3L,EAAGmL,EAAM+F,UAAUlR,EAAGoH,EAAG0rB,EAAOz2B,EAAQ,GAAG+K,IAC9D2rB,EAAYpnB,MAAO3L,EAAGmL,EAAM+F,UAAUlR,EAAGoH,EAAG0rB,EAAO,GAAG1rB,MAWzD,OANAnN,KAAK44B,YAAY4B,EAAS3B,EAAQC,GAE9Btf,GACH8hB,IAGGA,EAAat7B,KAAK+6B,iBAAmB,GAC/B1uB,MAASivB,EAAY/F,UAAaA,GAEpC,MAWCiE,EAAAl5B,UAAAs4B,YAAV,SAAsB4B,EAA4B3B,EAAkBC,GACnE0B,EAAQ5B,YAAYC,EAAQC,EAAa94B,KAAK+5B,SAAU/5B,KAAKg6B,WAepDR,EAAAl5B,UAAAq7B,wBAAV,SAAkCG,EAA0CtB,EAA4BuB,GACvG,IAAIC,GAAmB,EAyCvB,OAvCA90B,EAAA,KAAa40B,EAAgB,SAACG,EAAcz7B,GAE3C,GAAI2F,EAAA,SAAe3F,GAAQ,CAC1B,IAAI07B,EAAqB1B,EAASyB,GAC9BE,OAAe,EAGfD,IAEFC,EADGD,EAAa10B,SACE00B,EAAa10B,WAGb00B,GAIpB,IAAIE,OAAQ,EAER57B,IAEF47B,EADG57B,EAAMgH,SACEhH,EAAMgH,WAGNhH,GAIT07B,GAAgB17B,QAA6BuH,GAAnBo0B,QAA4Cp0B,GAAZq0B,GAAyBD,GAAmBC,IAIpGL,IACEvB,EAASyB,GAAgBz7B,GAEhCw7B,GAAU,MAKNA,GAiBR57B,OAAAC,eAAWm5B,EAAAl5B,UAAA,eASX,WACC,OAAON,KAAKO,iBAAiB,gBAV9B,SAAmBC,GACdR,KAAKS,iBAAiB,UAAWD,IACpCR,KAAKa,8CAgCPT,OAAAC,eAAWm5B,EAAAl5B,UAAA,gBAOX,WACC,OAAON,KAAKO,iBAAiB,iBAR9B,SAAoBC,GACnBR,KAAKS,iBAAiB,WAAYD,GAAO,oCA+B1CJ,OAAAC,eAAWm5B,EAAAl5B,UAAA,gBAOX,WACC,OAAON,KAAKO,iBAAiB,iBAR9B,SAAoBC,GACnBR,KAAKS,iBAAiB,WAAYD,GAAO,oCA4BnCg5B,EAAAl5B,UAAA+7B,mBAAP,SAA0BC,GAA1B,IAAAx8B,EAAAE,KAEK4nB,EAAY0U,EAAOtU,WACnBF,EAAYwU,EAAOvU,YAEvBuU,EAAOC,kBAEP,IAAInQ,EAAakQ,EAAOrV,YAAYuV,EAAA,GASpC,GARApQ,EAAK5I,aAAc,EAEnBtc,EAAA,eAAuBlH,KAAMosB,EAAM/S,EAAA,GAEnC+S,EAAKqQ,GAAK7U,EACVwE,EAAKjf,EAAI2a,EAAI,EACbsE,EAAKvN,SAAU,EAEX7e,KAAKknB,YAAc,EAAG,CACzB,IAAI1b,EAAkB8wB,EAAOrV,YAAYyV,GAAA,GAEzCx1B,EAAA,eAAuBlH,KAAMwL,EAAM6N,EAAA,GACnC7N,EAAKkR,MAAQkL,EACbpc,EAAKmR,OAASmL,EACdtc,EAAK2B,EAAI,EACT3B,EAAKgc,cAAgB,EACrBhc,EAAKqT,SAAU,EAEfuN,EAAKjf,EAAI,EAGV,IAAIwvB,EAAiCL,EAAO55B,SAC5Ci6B,EAAeC,MAAQ58B,KAAKqnB,OAC5BsV,EAAeE,UAAY78B,KAAKwL,KAEhClG,EAAA,aAAmBtF,KAAK88B,QAAQt3B,WAAY,SAAC8a,GAC5C,GAAIA,EAAOyc,mBAAoB,CAG9B,IAAIC,GAAqB,EAQzB,GAPA13B,EAAA,KAAWgb,EAAO2c,SAASz3B,WAAY,SAAC03B,GACvC,GAAIA,aAAiBC,EAAA,EAEpB,OADAH,GAAY,GACL,KAIJA,EAAW,CACf,IAAIjR,EAAwBzL,EAAOyL,QAsBnC,OArBAA,EAAM/L,OAASsc,EACfvQ,EAAM9S,YAAa,EACnB8S,EAAMpa,iBAAc5J,EACpBgkB,EAAMhmB,EAAI6hB,EAAI,EACV9nB,EAAKonB,YAAc,EACtB6E,EAAM5e,EAAI,EAGV4e,EAAM5e,EAAI2a,EAAI,EAEfiE,EAAMlN,SAAU,EAGX1Y,EAAA,SAAe4lB,EAAMvgB,QACzBugB,EAAMvgB,KAAO1L,EAAK0L,MAGdrF,EAAA,SAAe4lB,EAAM1E,UACzB0E,EAAM1E,OAASvnB,EAAKunB,SAGd,OASJmS,EAAAl5B,UAAAoV,YAAP,WACC9V,EAAAU,UAAMoV,YAAW3V,KAAAC,MACjBA,KAAK05B,SAAS/xB,SAUfvH,OAAAC,eAAWm5B,EAAAl5B,UAAA,oBAOX,WACC,OAAON,KAAKO,iBAAiB,qBAR9B,SAAwBC,GACvBR,KAAKS,iBAAiB,eAAgBD,GAAO,oCAU/Cg5B,EAlvBA,CAAgC9gB,GA0vBhCzX,EAAA,EAASC,kBAA8B,WAAIq4B,GAC3Ct4B,EAAA,EAASC,kBAAsC,mBAAIm4B,GCj3BnD,IAAA+D,GAAA,SAAAx9B,GAUC,SAAAy9B,IAAA,IAAAv9B,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,sBAEjBH,EAAK+X,YAAY,QAAS,EAAG,GAC7B/X,EAAK+X,YAAY,QAAS,EAAG,GAE7B/X,EAAK+X,YAAY,YAAa,EAAG,GACjC/X,EAAK+X,YAAY,YAAa,EAAG,GAEjC/X,EAAKI,eAGP,OAvByCC,EAAA,EAAAk9B,EAAAz9B,GAuBzCy9B,EAvBA,CAAyChE,IAiFzCiE,GAAA,SAAA19B,GAmCC,SAAA29B,IAAA,IAAAz9B,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,cACjBH,EAAK09B,aAAc,EACnB19B,EAAKI,eA+IP,OAtLiCC,EAAA,EAAAo9B,EAAA39B,GA+CzB29B,EAAAj9B,UAAA6T,SAAP,WAGKnU,KAAK6R,MAAMwC,SACdrU,KAAK6R,MAAMsC,WAGZvU,EAAAU,UAAM6T,SAAQpU,KAAAC,OASLu9B,EAAAj9B,UAAAoD,eAAV,WACC,OAAO,IAAI05B,IAeFG,EAAAj9B,UAAA+e,SAAV,SAAmB3c,EAA+BogB,EAAcC,EAAcnC,EAAoBC,EAAoBmC,EAAoBC,GACpID,IACJA,EAAY,UAERC,IACJA,EAAY,UAGb,IAAIld,EAAY/F,KAAKoR,MAAM5D,KAAK9K,EAAUqgB,EAAMlC,EAAWoC,GACvD9V,EAAYnN,KAAKoR,MAAMzD,KAAKjL,EAAUqgB,EAAMlC,EAAWoC,GAEvDwa,EAAiBpzB,EAAA,aAAoBtE,EAAGA,EAAGoH,EAAGA,IAGrC,GAAVswB,IACFA,EAAS,MAGV,IAAIxwB,EAAgBjN,KAAKkR,MAAMpD,SAASpL,EAAUogB,EAAMlC,EAAWoC,GAE/D0a,EAAa19B,KAAK6R,MAAM6rB,WACxBC,EAAW39B,KAAK6R,MAAM8rB,SAG1B,OAAI1wB,EAAQywB,GAAczwB,EAAQ0wB,OACjC,GAGS53B,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,KAerDswB,EAAAj9B,UAAAs7B,UAAV,SAAoB/C,EAAkBn2B,EAA6B2Y,EAAgBI,EAAgByG,GAClG,IAAInV,EAAQ/M,KAAKqf,SAAS3c,EAAU2Y,EAAQI,EAAQ/Y,EAASmQ,UAAUwI,GAAS3Y,EAASmQ,UAAU4I,IAC/F1O,GACH8rB,EAAOnnB,KAAK3E,IASJwwB,EAAAj9B,UAAA8b,YAAV,WACC,IAAInS,EAAmDjK,KAAKoR,MAAMnH,SAClE,OAAOwS,EAAA,IAAUxS,EAASyzB,WAAYzzB,EAAS0zB,SAAW1zB,EAASyzB,WAAYzzB,EAAS2zB,YAAa3zB,EAAS4zB,mBAWrGN,EAAAj9B,UAAAs4B,YAAV,SAAsB4B,EAA4B3B,EAAkBC,GACnE,IACI7uB,EADajK,KAAKoR,MACsCnH,SAExDjK,KAAKw9B,aAAoE,KAArDx6B,KAAKyL,IAAIxE,EAAS0zB,SAAW1zB,EAASyzB,cAEzD19B,KAAK8V,WAAsC9V,KAAK2b,cACnD3b,KAAK8V,WAAsC9V,KAAK4b,cAChD5b,KAAKyZ,WACLof,EAAOnnB,KAAKmnB,EAAO,IACfC,EAAY3wB,OAAS,GACxB2wB,EAAYgF,QAAQhF,EAAYA,EAAY3wB,OAAS,KAIxDvI,EAAAU,UAAMs4B,YAAW74B,KAAAC,KAACw6B,EAAS3B,EAAQC,IAUpC14B,OAAAC,eAAWk9B,EAAAj9B,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKS,iBAAiB,cAAeD,GAAO,oCAS9C+8B,EAtLA,CAAiChE,IA8LjCt4B,EAAA,EAASC,kBAA+B,YAAIo8B,GAC5Cr8B,EAAA,EAASC,kBAAuC,oBAAIk8B,oBChOpDW,GAAA,SAAAn+B,GA4BC,SAAAo+B,IAAA,IAAAl+B,EAGCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,cACjBH,EAAK29B,OAASr9B,OAAAmjB,EAAA,EAAAnjB,CAAQ,KACtBN,EAAKm+B,YAAc79B,OAAAmjB,EAAA,EAAAnjB,CAAQ,GAG3BN,EAAKI,aAELJ,EAAK4L,UAAO3D,IAubd,OA9diC5H,EAAA,EAAA69B,EAAAp+B,GAiDzBo+B,EAAA19B,UAAAmkB,aAAP,SAAoB1X,GACnB,IAAI0wB,EAASpzB,EAAA,YAAkB0C,GAK/B,OAAI0wB,EAASz9B,KAAKk+B,gBAAkB,GAAKT,EAASz9B,KAAK69B,iBAAmB,GAW3Ez9B,OAAAC,eAAW29B,EAAA19B,UAAA,kBAOX,WACC,OAAON,KAAKO,iBAAiB,mBAR9B,SAAsBC,GACrBR,KAAKS,iBAAiB,aAAcD,GAAO,oCAe5CJ,OAAAC,eAAW29B,EAAA19B,UAAA,gBAOX,WACC,OAAON,KAAKO,iBAAiB,iBAR9B,SAAoBC,GACnBR,KAAKS,iBAAiB,WAAYD,GAAO,oCAWhCw9B,EAAA19B,UAAAukB,gBAAV,SAA0B9X,GAEpB/M,KAAKkR,SAAUlR,KAAKkR,OAAWlR,KAAKkR,MAAMgI,uBAAwBlZ,KAAKkR,MAAMwI,QAAQtO,WACzFpL,KAAKm+B,YAAYn+B,KAAK+M,OAElB/M,KAAKoR,SAAUpR,KAAKoR,OAAWpR,KAAKoR,MAAM8H,uBAAwBlZ,KAAKoR,MAAMsI,QAAQtO,WACzFpL,KAAKo+B,YAAYp+B,KAAK+M,OAGvB/M,KAAK+lB,kBACLnmB,EAAAU,UAAMukB,gBAAe9kB,KAAAC,KAAC+M,IAQbixB,EAAA19B,UAAA69B,YAAV,SAAsBpxB,GAErB,IAAI0wB,EAAiBz9B,KAAK49B,YACtBF,EAAqB19B,KAAK09B,WAC1BC,EAAmB39B,KAAK29B,SACxBM,EAAsBj+B,KAAK69B,iBAE/B,GAAIJ,EAAS,GAAKt3B,EAAA,SAAeu3B,IAAev3B,EAAA,SAAew3B,IAAax3B,EAAA,SAAe83B,GAAc,CACxG,IAAIhxB,EAAgB5C,EAAA,gBAAsBA,EAAA,SAAe0C,GAAQ2wB,EAAYC,GACzEnhB,OAAI,EAER,GAAIxc,KAAKonB,OAASpnB,KAAKonB,MAAMvI,QAAS,CAKrC,GAHA7e,KAAKonB,MAAMtG,QAAS/a,EAAG,EAAGoH,EAAG,IAGzBnN,KAAKkR,OAASlR,KAAKmpB,eAAgB,CAEtC,IAAI7e,EAAqBtK,KAAKkR,MAAMkY,sBAChC7e,EAAmBvK,KAAKkR,MAAMmY,oBAElC,GAAI/e,GAAcC,EAAU,CAC3B,IAAI8zB,EAAyBh0B,EAAA,gBAAsBA,EAAA,SAAeC,GAAaozB,EAAYC,GAGvFW,EAFuBj0B,EAAA,gBAAsBA,EAAA,SAAeE,GAAWmzB,EAAYC,GAEtDU,EAI7BX,EAAaC,EACZW,EAAM,IACTA,GAAO,KAKJA,EAAM,IACTA,GAAO,KAITrxB,GAASqxB,EAAM,EAEf9hB,EAAOC,EAAA,QAAe1W,EAAGk4B,EAAc5zB,EAAA,IAAU4C,GAAQE,EAAG8wB,EAAc5zB,EAAA,IAAU4C,KACjFwP,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,KACnEwP,EAAA,MAAYxP,EAAOqxB,EAAKb,GACxBhhB,EAAA,QAAe1W,EAAGk4B,EAAc5zB,EAAA,IAAU4C,EAAQqxB,GAAMnxB,EAAG8wB,EAAc5zB,EAAA,IAAU4C,EAAQqxB,KAC3F7hB,EAAA,MAAYxP,EAAQqxB,GAAMA,EAAKL,IAK/BzhB,IACJA,EAAOC,EAAA,QAAe1W,EAAGk4B,EAAc5zB,EAAA,IAAU4C,GAAQE,EAAG8wB,EAAc5zB,EAAA,IAAU4C,KAAYwP,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,MAGpKjN,KAAKonB,MAAM5K,KAAOA,KAUXwhB,EAAA19B,UAAA89B,YAAV,SAAsBrxB,GACrB,GAAI/M,KAAKynB,OAASznB,KAAKynB,MAAM5I,QAAS,CACrC,IAAI6e,EAAa19B,KAAK09B,WAClBC,EAAW39B,KAAK29B,SAChBO,EAAkBl+B,KAAKk+B,gBACvBT,EAASpzB,EAAA,WAAiBA,EAAA,YAAkB0C,GAAQ,EAAG/M,KAAKk+B,iBAChE,GAAI/3B,EAAA,SAAes3B,IAAWt3B,EAAA,SAAeu3B,GAAa,CACzD19B,KAAKynB,MAAM3G,QAAS/a,EAAG,EAAGoH,EAAG,IAE7B,IAAIqP,OAAI,EACJ8hB,EAAcX,EAAWD,EAE7B,GAAI19B,KAAKoR,OAASpR,KAAKspB,eAAgB,CAEtC,IAAIhf,EAAqBtK,KAAKoR,MAAMgY,sBAChC7e,EAAmBvK,KAAKoR,MAAMiY,oBAElC,GAAI/e,GAAcC,EAAU,CAC3B,IAAI0zB,EAAsB5zB,EAAA,WAAiBA,EAAA,YAAkBC,GAAa,EAAG4zB,GAC7ET,EAASpzB,EAAA,WAAiBA,EAAA,YAAkBE,GAAW,EAAG2zB,GAE1D1hB,EAAOC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAUqzB,GAAavwB,EAAGswB,EAASpzB,EAAA,IAAUqzB,KAAiBjhB,EAAA,MAAYihB,EAAYY,EAAKb,GAC7HjhB,GAAQC,EAAA,QAAe1W,EAAGk4B,EAAc5zB,EAAA,IAAUszB,GAAWxwB,EAAG8wB,EAAc5zB,EAAA,IAAUszB,KAAelhB,EAAA,MAAYkhB,GAAWW,EAAKL,IAIhIzhB,IACJA,EAAOC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAUqzB,GAAavwB,EAAGswB,EAASpzB,EAAA,IAAUqzB,KAAiBjhB,EAAA,MAAYihB,EAAYC,EAAWD,EAAYD,IAGhJz9B,KAAKynB,MAAMjL,KAAOA,KAUdwhB,EAAA19B,UAAAylB,gBAAP,WACC,GAAI/lB,KAAK2nB,eAAgB,CACxB,IAAIvD,EAAoBpkB,KAAKokB,UAE7B,GAAIA,EAAW,CAEd,IAAIrX,EAAgB/M,KAAK+M,MAErB0wB,EAAiBz9B,KAAK49B,YACtBM,EAA0Bl+B,KAAKk+B,gBAC/BD,EAAsBj+B,KAAK69B,iBAE3BH,EAAqB16B,KAAKE,IAAIlD,KAAK09B,WAAY19B,KAAK29B,UACpDA,EAAmB36B,KAAKgB,IAAIhE,KAAK09B,WAAY19B,KAAK29B,UAElDY,EAAoBl0B,EAAA,gBAAsBA,EAAA,SAAe+Z,GAAYsZ,EAAYC,GACjF1wB,EAAgB5C,EAAA,gBAAsBA,EAAA,SAAe0C,GAAQ2wB,EAAYC,GAEzEa,EAAqBn0B,EAAA,YAAkB+Z,GAC3C,GAAIoa,EAAaN,EAAiB,CAEjC,IAAIO,EAAgBp0B,EAAA,WAAiBA,EAAA,YAAkB0C,GAAQ,EAAGmxB,GAElEl+B,KAAK0+B,WAAazxB,EAElB,IAAIuP,EAAeC,EAAA,QAAe1W,EAAG,EAAGoH,EAAG,IAEvCwxB,EAAkBt0B,EAAA,IAAUk0B,GAC5BK,EAAkBv0B,EAAA,IAAUk0B,GAE5BM,EAAcx0B,EAAA,IAAU4C,GACxB6xB,EAAcz0B,EAAA,IAAU4C,GAExB2Z,EAAW5mB,KAAK4mB,SACJ,SAAZA,GAAmC,WAAZA,EAC1BpK,GAAQC,EAAA,QAAe1W,EAAG03B,EAASmB,EAASzxB,EAAGswB,EAASkB,IAAaliB,EAAA,MAAY8hB,EAAWtxB,EAAQsxB,EAAWd,GAAUhhB,EAAA,QAAe1W,EAAGk4B,EAAca,EAAK3xB,EAAG8wB,EAAcY,IAASpiB,EAAA,MAAYxP,EAAOsxB,EAAYtxB,EAAOgxB,GAE1M,SAAZrX,GAAmC,WAAZA,EAC/BpK,EAAOC,EAAA,QAAe1W,EAAG04B,EAAgBp0B,EAAA,IAAUqzB,GAAavwB,EAAGsxB,EAAgBp0B,EAAA,IAAUqzB,KAAiBjhB,EAAA,MAAYihB,EAAYC,EAAWD,EAAYe,GAAiBhiB,EAAA,QAAe1W,EAAGy4B,EAAan0B,EAAA,IAAUszB,GAAWxwB,EAAGqxB,EAAan0B,EAAA,IAAUszB,KAAelhB,EAAA,MAAYkhB,EAAUD,EAAaC,EAAUa,GAAc/hB,EAAA,YAElT,UAAZmK,IACRpK,EAAOC,EAAA,QAAe1W,EAAG04B,EAAgBp0B,EAAA,IAAUk0B,GAAYpxB,EAAGsxB,EAAgBp0B,EAAA,IAAUk0B,KAAgB9hB,EAAA,MAAY8hB,EAAWtxB,EAAQsxB,EAAWE,GAAiBhiB,EAAA,QAAe1W,EAAGy4B,EAAan0B,EAAA,IAAU4C,GAAQE,EAAGqxB,EAAan0B,EAAA,IAAU4C,KAAYwP,EAAA,MAAYxP,EAAOsxB,EAAYtxB,EAAOuxB,GAAc/hB,EAAA,aAGnTzc,KAAKgnB,UAAUxK,KAAOA,EAEvBxc,KAAKgnB,UAAUlG,QAAS/a,EAAG,EAAGoH,EAAG,OAQ1B6wB,EAAA19B,UAAAykB,aAAV,WAGC,GADwB/kB,KAAK6R,MAClB,CACV,IAAIosB,EAAcj+B,KAAK69B,iBACnBJ,EAAiBz9B,KAAKk+B,gBAAkBD,EAExCP,EAAqB19B,KAAK09B,WAC1BC,EAAmB39B,KAAK29B,SAGxBhf,GADgBtU,EAAA,gBAAsBA,EAAA,SAAerK,KAAK+M,OAAQ2wB,EAAYC,GACxDD,IAAeC,EAAWD,GACpD19B,KAAK2e,UAAYA,EAEjB3e,KAAK4e,UAAYvU,EAAA,YAAkBA,EAAA,YAAkBrK,KAAK+M,OAASkxB,GAAeR,EAAQ,EAAG,KASrFO,EAAA19B,UAAAklB,YAAV,SAAsBzY,KASZixB,EAAA19B,UAAA2oB,uBAAV,SAAiChF,GAChC,GAAIjkB,KAAKkR,MAAMgI,qBAAsB,CACpC,IAAIQ,EAAmB1Z,KAAKkR,MAAMwI,QAClC1Z,KAAKm+B,YAAY5iB,EAAA,kBAA0BxV,EAAG2T,EAAQoD,OAAQ3P,EAAGuM,EAAQmD,QAAU7c,SAU3Eg+B,EAAA19B,UAAA4oB,uBAAV,SAAiCjF,GAChC,GAAIjkB,KAAKoR,MAAM8H,qBAAsB,CACpC,IAAIQ,EAAmB1Z,KAAKoR,MAAMsI,QAClC1Z,KAAKo+B,YAAY7iB,EAAA,kBAA0BxV,EAAG2T,EAAQoD,OAAQ3P,EAAGuM,EAAQmD,QAAU7c,SAQ3Eg+B,EAAA19B,UAAA8nB,oBAAV,SAA8Brb,KAUpBixB,EAAA19B,UAAAkoB,UAAV,WACC,IAAIpE,EAAYpkB,KAAKokB,UACrB,GAAIA,EAAW,CACd,IAAIqB,EAAkBzlB,KAAKylB,QAG3B,GADwBzlB,KAAK6R,MAClB,CACV,IAAI4rB,EAAiBz9B,KAAK49B,YACtBF,EAAqB19B,KAAK09B,WAC1BC,EAAmB39B,KAAK29B,SAExBY,EAAoBl0B,EAAA,gBAAsBA,EAAA,SAAe+Z,GAAYpkB,KAAK09B,WAAY19B,KAAK29B,UAC3FoB,EAAkB10B,EAAA,gBAAsBA,EAAA,SAAeob,GAAUzlB,KAAK09B,WAAY19B,KAAK29B,UAEvFa,EAAan0B,EAAA,WAAiBA,EAAA,YAAkB+Z,GAAY,EAAGqZ,GAC/DuB,EAAW30B,EAAA,WAAiBA,EAAA,YAAkBob,GAAU,EAAGgY,GAE3DhV,EAAiB,EACjBM,EAAe,EAEfL,EAAiB,EACjBM,EAAe,EAEfpC,EAAW5mB,KAAK4mB,SACpB,GAAgB,SAAZA,GAAmC,WAAZA,GAAqC,UAAZA,GAAoC,YAAZA,EAAwB,CACnG,IAAI0X,EAAcX,EAAWD,EAC7BjV,EAASpe,EAAA,OAAak0B,EAAYb,GAAcY,EAAK,GACrDvV,EAAO1e,EAAA,OAAa00B,EAAUrB,GAAcY,EAAK,GAGlC,SAAZ1X,GAAmC,WAAZA,GAAqC,UAAZA,GAAoC,YAAZA,IAC3E8B,EAASre,EAAA,MAAYm0B,EAAaf,EAAQ,GAC1CzU,EAAO3e,EAAA,MAAY20B,EAAWvB,EAAQ,IAGvCz9B,KAAK6oB,QAAWhlB,MAAOb,KAAKE,IAAIulB,EAAQM,GAAOjlB,IAAKd,KAAKgB,IAAIykB,EAAQM,IACrE/oB,KAAK8oB,QAAWjlB,MAAOb,KAAKE,IAAIwlB,EAAQM,GAAOllB,IAAKd,KAAKgB,IAAI0kB,EAAQM,IAEhD,WAAjBhpB,KAAK4mB,UAA0C,WAAjB5mB,KAAK4mB,UAA0C,YAAjB5mB,KAAK4mB,UAIpE5mB,KAAKgnB,UAAUrF,UAcZqc,EAAA19B,UAAAonB,WAAP,aAQAtnB,OAAAC,eAAW29B,EAAA19B,UAAA,cAOX,WACC,OAAON,KAAKO,iBAAiB,eAR9B,SAAkBC,GACjBR,KAAKi/B,mBAAmB,SAAUz+B,GAAO,GAAO,EAAO,IAAI,oCAgB5DJ,OAAAC,eAAW29B,EAAA19B,UAAA,mBAAX,WACC,OAAOib,EAAA,sBAA6Bvb,KAAKy9B,OAAQz9B,KAAKk+B,kDAUvD99B,OAAAC,eAAW29B,EAAA19B,UAAA,uBAAX,WACC,OAAOib,EAAA,gBAAuBnb,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAAMiK,EAAA,IAAUrK,KAAKgmB,WAAa,EAAGhmB,KAAKimB,YAAc,qCAS/F7lB,OAAAC,eAAW29B,EAAA19B,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKi/B,mBAAmB,cAAez+B,GAAO,GAAO,EAAO,IAAI,oCAgBjEJ,OAAAC,eAAW29B,EAAA19B,UAAA,wBAAX,WAEC,IAAI29B,EAAcj+B,KAAKi+B,YAMvB,OAJIA,aAAuB1a,EAAA,IAC1B0a,EAAc79B,OAAAmjB,EAAA,EAAAnjB,CAAQ,IAAM69B,EAAYz9B,MAAQR,KAAK6R,MAAMqtB,sBAGrD3jB,EAAA,sBAA6B0iB,EAAaj+B,KAAKk+B,kBAAoB,mCASjEF,EAAA19B,UAAA4nB,SAAV,SAAmBnb,GAElB,OAAOA,GAETixB,EA9dA,CAAiCxX,GAsejCvlB,EAAA,EAASC,kBAA+B,YAAI68B,iCClf5CoB,GAAA,SAAAv/B,GA8BC,SAAAw/B,EAAYx+B,GAAZ,IAAAd,EACCF,EAAAG,KAAAC,KAAMY,IAAKZ,YAEXF,EAAKG,UAAY,mBAEjBH,EAAK2pB,QAAU3pB,EAAKyZ,MAAMC,IAAI,QAE9B1Z,EAAK29B,OAASr9B,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAEtBN,EAAKI,eAiEP,OAxGsCC,EAAA,EAAAi/B,EAAAx/B,GA+C9Bw/B,EAAA9+B,UAAAqvB,KAAP,WAEC,GADA/vB,EAAAU,UAAMqvB,KAAI5vB,KAAAC,MACNA,KAAKY,KAAM,CACd,IAAIqJ,EAAuDjK,KAAKY,KAAKqJ,SACrEjK,KAAKuc,SAAWtS,EAASwM,qBAAqBzW,KAAKsI,cAAetI,KAAKqI,YAAarI,KAAKy9B,OAAQt3B,EAAA,SAAenG,KAAKi+B,aAAej+B,KAAKi+B,YAAch0B,EAASg0B,YAAaj+B,KAAKkrB,cAClLlrB,KAAKwc,KAAOxc,KAAKuc,WASnBnc,OAAAC,eAAW++B,EAAA9+B,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKi/B,mBAAmB,cAAez+B,GAAO,GAAM,EAAO,IAAI,oCAehEJ,OAAAC,eAAW++B,EAAA9+B,UAAA,cAOX,WACC,OAAON,KAAKO,iBAAiB,eAR9B,SAAkBC,GACjBR,KAAKi/B,mBAAmB,SAAUz+B,GAAO,GAAM,EAAO,IAAI,oCAe3DJ,OAAAC,eAAW++B,EAAA9+B,UAAA,oBAOX,WACC,OAAON,KAAKO,iBAAiB,qBAR9B,SAAwBC,GACvBR,KAAKS,iBAAiB,eAAgBD,GAAO,oCAU/C4+B,EAxGA,CAAsCC,GAAA,GAgHtCp+B,EAAA,EAASC,kBAAoC,iBAAIi+B,oBCnHjDG,GAAA,SAAA1/B,GAoBC,SAAA2/B,IAAA,IAAAz/B,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,eACjBH,EAAK0/B,cAAe,EACpB1/B,EAAKI,eAmCP,OA3DkCC,EAAA,EAAAo/B,EAAA3/B,GAgCjCQ,OAAAC,eAAWk/B,EAAAj/B,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKi/B,mBAAmB,cAAez+B,GAAO,GAAM,EAAO,IAAI,oCAehEJ,OAAAC,eAAWk/B,EAAAj/B,UAAA,cAOX,WACC,OAAON,KAAKO,iBAAiB,eAR9B,SAAkBC,GACjBR,KAAKi/B,mBAAmB,SAAUz+B,GAAO,GAAM,EAAO,IAAI,oCAU5D++B,EA3DA,CAAkCE,GAAA,GAoElCx+B,EAAA,EAASC,kBAAgC,aAAIo+B,oBC5C7CI,GAAA,SAAA9/B,GA0CC,SAAA+/B,IAAA,IAAA7/B,EAGCF,EAAAG,KAAAC,OAAOA,YAVDF,EAAA8/B,gBAA0B,EAahC9/B,EAAKkuB,OAAS,OAEdluB,EAAKG,UAAY,uBACjBH,EAAKmZ,YAAa,EAClBnZ,EAAK49B,YAAc,GACnB59B,EAAK69B,SAAW,IAEhB79B,EAAK+/B,gBAAiB,EACtB//B,EAAK29B,OAASr9B,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAEtBN,EAAKmZ,YAAa,EAElBnZ,EAAKwL,KAAKyD,SAASlD,SAAW,EAE9B/L,EAAKoQ,OAAOnB,SAASlD,SAAW,EAChC/L,EAAKoQ,OAAOnB,SAAS0uB,OAAS,GAE9B39B,EAAKmQ,MAAMlB,SAASlD,SAAW,EAC/B/L,EAAKmQ,MAAMlB,SAASywB,cAAe,EACnC1/B,EAAKyR,gBAAkB,EAEvBzR,EAAKssB,KAAK5E,cAAgB,EAE1B1nB,EAAKI,eAgYP,OAvc0CC,EAAA,EAAAw/B,EAAA//B,GA6ElC+/B,EAAAr/B,UAAAw/B,QAAP,SAAel/B,GAAf,IAAAd,EAAAE,KACCJ,EAAAU,UAAMw/B,QAAO//B,KAAAC,KAACY,GACdA,EAAKqY,YAAa,EAGlB,IAAIS,EAAU9Y,EAAK8Y,QAEnBA,EAAQnK,QAAQiK,IAAI,KAAM,SAACzT,EAAG0Z,GAC7B,IAAI1S,EAAgBwO,EAAA,kBAA0BxV,EAAG0Z,EAAO3C,OAAQ3P,EAAGsS,EAAO5C,QAAU/c,GACpF,OAAOA,EAAK89B,YAAc56B,KAAK87B,IAAI97B,KAAK+8B,MAAMhzB,EAAMI,EAAGJ,EAAMhH,IAAMgH,EAAMhH,IAG1E2T,EAAQnK,QAAQiK,IAAI,KAAM,SAACrM,EAAGsS,GAC7B,IAAI1S,EAAgBwO,EAAA,kBAA0BxV,EAAG0Z,EAAO3C,OAAQ3P,EAAGsS,EAAO5C,QAAU/c,GACpF,OAAOA,EAAK89B,YAAc56B,KAAK67B,IAAI77B,KAAK+8B,MAAMhzB,EAAMI,EAAGJ,EAAMhH,IAAMgH,EAAMI,KASpEwyB,EAAAr/B,UAAA6T,SAAP,WAEKnU,KAAK6R,OAAS7R,KAAK6R,MAAMwC,SAC5BrU,KAAK6R,MAAMsC,WAGZvU,EAAAU,UAAM6T,SAAQpU,KAAAC,OAQfI,OAAAC,eAAWs/B,EAAAr/B,UAAA,kBAAX,WACC,OAAO,EAAI0C,KAAKg9B,GAAKhgC,KAAK49B,6CAU3Bx9B,OAAAC,eAAWs/B,EAAAr/B,UAAA,cAWX,WACC,OAAON,KAAKO,iBAAiB,eAZ9B,SAAkBC,GACbR,KAAKi/B,mBAAmB,SAAUz+B,GAAO,GAAO,EAAO,IAAI,IAC1DR,KAAKY,MACRZ,KAAKY,KAAKC,8CAiBbT,OAAAC,eAAWs/B,EAAAr/B,UAAA,mBAAX,WACC,OAAOib,EAAA,sBAA6Bvb,KAAKy9B,OAAQz9B,KAAK4/B,kBAAoB,mCAU3Ex/B,OAAAC,eAAWs/B,EAAAr/B,UAAA,mBAWX,WACC,OAAON,KAAKO,iBAAiB,oBAZ9B,SAAuBC,GAClBR,KAAKi/B,mBAAmB,cAAez+B,GAAO,GAAO,EAAO,IAAI,IAC/DR,KAAKY,MACRZ,KAAKY,KAAKC,8CAmBbT,OAAAC,eAAWs/B,EAAAr/B,UAAA,sBAOX,WACC,OAAON,KAAKO,iBAAiB,uBAR9B,SAA0BC,GACzBR,KAAKS,iBAAiB,iBAAkBD,oCAezCJ,OAAAC,eAAWs/B,EAAAr/B,UAAA,wBAAX,WACC,OAAOib,EAAA,sBAA6Bvb,KAAKi+B,YAAaj+B,KAAK4/B,kBAAoB,mCASzED,EAAAr/B,UAAA0M,gBAAP,SAAuBjC,GACtB,IAAIk1B,EAAqBjgC,KAAKkgC,qBAAqBn1B,GAC/CkC,EAAgBjN,KAAK09B,YAAc19B,KAAK29B,SAAW39B,KAAK09B,YAAcuC,EAAajgC,KAAKuU,WAC5F,OAASxO,EAAG/F,KAAK49B,YAAcvzB,EAAA,IAAU4C,GAAQE,EAAGnN,KAAK49B,YAAcvzB,EAAA,IAAU4C,KAS3E0yB,EAAAr/B,UAAA4M,gBAAP,SAAuBnC,GACtB,IAIIkC,EAJArM,EAAaZ,KAAKY,KAElB09B,GAAet+B,KAAK29B,SAAW39B,KAAK09B,aAAe98B,EAAKkD,IAAMlD,EAAKiD,OAWvE,OANCoJ,EADGrM,EAAKqJ,SAAS0nB,SACT3xB,KAAK09B,YAAc98B,EAAKkD,IAAMiH,GAAYuzB,EAG1Ct+B,KAAK09B,YAAc3yB,EAAWnK,EAAKiD,OAASy6B,EAG9Cj0B,EAAA,MAAY4C,EAAO,IAQpB0yB,EAAAr/B,UAAA6/B,eAAP,WACC,IAAI1C,EAAiBz9B,KAAK49B,YACtBF,EAAqB19B,KAAK09B,WAG1BY,EAFmBt+B,KAAK29B,SAECD,EAC7B19B,KAAKosB,KAAK5P,KAAOC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAUqzB,GAAavwB,EAAGswB,EAASpzB,EAAA,IAAUqzB,KAAiBjhB,EAAA,MAAYihB,EAAYY,EAAKb,EAAQA,IAWzIkC,EAAAr/B,UAAAiL,kBAAP,SAAyBD,EAAoBP,EAAkB1C,GAC9D0C,IAAuB1C,EAAc0C,GAAYO,EAAKO,SAEtD,IAAIkB,EAAgB/M,KAAKgN,gBAAgBjC,GACzC,GAAIO,EAAKme,QAAS,CACjB,IAAIxc,EAAgB5C,EAAA,QAAgBrH,KAAK+8B,MAAMhzB,EAAMI,EAAGJ,EAAMhH,GAC1D03B,EAAiBliB,EAAA,sBAA6BpV,EAAA,SAAemF,EAAKmyB,QAAUnyB,EAAKmyB,OAASr9B,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAAMJ,KAAK49B,aAE7GwC,EAAkB7kB,EAAA,sBAA6BjQ,EAAK2yB,YAAaj+B,KAAK49B,aAC1EtyB,EAAK4iB,OAAS,EAEd,IAAI+P,EAAsB1iB,EAAA,sBAA6BpV,EAAA,SAAei6B,GAAmBA,EAAkBpgC,KAAKi+B,YAAaj+B,KAAK49B,aAAa,GAC/ItyB,EAAKkR,KAAOC,EAAA,QAAe1W,EAAGk4B,EAAc5zB,EAAA,IAAU4C,GAAQE,EAAG8wB,EAAc5zB,EAAA,IAAU4C,KAAYwP,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,KAEzKjN,KAAKqgC,iBAAiB/0B,EAAMP,EAAU,EAAG,IAWnC40B,EAAAr/B,UAAA+K,kBAAP,SAAyBF,EAAgBJ,EAAkB1C,GAE1D0C,IAAuB1C,EAAc0C,GAAYI,EAAKU,SAEtD,IAAIkB,EAAgB/M,KAAKgN,gBAAgBjC,GAEzC,GAAII,EAAKse,QAAS,CACjB,IAAIgU,EAAiBz9B,KAAK49B,YACtB3wB,EAAgB5C,EAAA,QAAgBrH,KAAK+8B,MAAMhzB,EAAMI,EAAGJ,EAAMhH,GAC1Du6B,EAAqBn1B,EAAKhD,OAC1BgD,EAAKghB,SACRmU,GAAcA,GAEfn1B,EAAK+iB,OAAS,EACd/iB,EAAKqR,KAAOC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,KAAYwP,EAAA,QAAe1W,GAAI03B,EAAS6C,GAAcj2B,EAAA,IAAU4C,GAAQE,GAAIswB,EAAS6C,GAAcj2B,EAAA,IAAU4C,KAG7LjN,KAAKqgC,iBAAiBl1B,EAAMJ,EAAU,EAAG,IAWnC40B,EAAAr/B,UAAAwL,mBAAP,SAA0BH,EAA2BZ,EAAkB1C,EAAqBwD,GAEtF1F,EAAA,SAAe0F,KACnBA,EAAWF,EAAME,UAGlBd,IAAuB1C,EAAc0C,GAAYc,EAEjDF,EAAM40B,YAAYvgC,KAAKkN,gBAAgBnC,GAAW/K,KAAK49B,aACvDjyB,EAAMuiB,OAAS,EAEfluB,KAAKqgC,iBAAiB10B,EAAOZ,EAAU/K,KAAKqsB,iBAAkBrsB,KAAKssB,mBAU7DqT,EAAAr/B,UAAAmkB,aAAP,SAAoB1X,GACnB,OAAO,GAQR3M,OAAAC,eAAWs/B,EAAAr/B,UAAA,kBAaX,WACC,OAAON,KAAKO,iBAAiB,mBAd9B,SAAsBC,GAEjBR,KAAKS,iBAAiB,aAAcD,KACvCR,KAAKwgC,sBACDxgC,KAAKY,MACRZ,KAAKY,KAAKE,qDAiBbV,OAAAC,eAAWs/B,EAAAr/B,UAAA,gBAaX,WACC,OAAON,KAAKO,iBAAiB,iBAd9B,SAAoBC,GAEfR,KAAKS,iBAAiB,WAAYD,KACrCR,KAAKwgC,sBACDxgC,KAAKY,MACRZ,KAAKY,KAAKE,qDAsBN6+B,EAAAr/B,UAAAmW,qBAAP,SAA4BnO,EAAuBD,EAAqBo1B,EAA2BQ,EAAgC/S,GAClI,IAAI1O,EAAe,GACnB,GAAIrW,EAAA,SAAemC,IAAkBnC,EAAA,SAAekC,GAAc,CAE5DlC,EAAA,SAAes3B,KACnBA,EAASz9B,KAAKy9B,QAGfn1B,EAAgB+B,EAAA,IAAU/B,EAAetI,KAAKY,KAAKiD,QACnDwE,EAAcgC,EAAA,IAAUhC,EAAarI,KAAKY,KAAKkD,MAE7BwE,IACjBD,EAAcC,GAGf,IAAIs1B,EAAsBriB,EAAA,sBAA6BkiB,EAAQz9B,KAAK49B,aAChEC,EAA2BtiB,EAAA,sBAA6B0iB,EAAaj+B,KAAK49B,aAAa,GAEvFF,EAAqB19B,KAAKkN,gBAAgB5E,GAG1Cg2B,EAFmBt+B,KAAKkN,gBAAgB7E,GAEfq1B,EAE7BlhB,EAAOC,EAAA,IAAUihB,EAAYY,EAAKV,EAAaC,EAAkBD,EAAa1S,GAG/E,OAAO1O,GAQDmjB,EAAAr/B,UAAAmgC,WAAP,WACC,OAAO,IAAInB,IAQLK,EAAAr/B,UAAAogC,WAAP,SAAkB9/B,GACjB,OAAO,IAAIu+B,GAAiBv+B,IAQtB++B,EAAAr/B,UAAAqgC,YAAP,WACC,OAAO,IAAIC,GAAA,GAWLjB,EAAAr/B,UAAAugC,gBAAP,SAAuB9zB,GACtB,IAAIE,EAAQ5C,EAAA,gBAAsBA,EAAA,SAAe0C,GAAQ/M,KAAK09B,WAAY19B,KAAK29B,UAC/E,OAAO39B,KAAK8gC,sBAAsB7zB,EAAQjN,KAAK09B,YAAc,IAAM19B,KAAKuU,aAE1EorB,EAvcA,CAA0CoB,GAAA,GA+c1C9/B,EAAA,EAASC,kBAAwC,qBAAIw+B,oBClcrDsB,GAAA,SAAAphC,GAgCC,SAAAqhC,IAAA,IAAAnhC,EAGCF,EAAAG,KAAAC,OAAOA,YAfEF,EAAAkb,OAAS,IAAInC,EAAA,EAKhB/Y,EAAA8/B,gBAA0B,EAWhC9/B,EAAKG,UAAY,qBACjBH,EAAKmZ,YAAa,EAClBnZ,EAAK49B,YAAc,GACnB59B,EAAK69B,SAAW,IAChB79B,EAAK0K,gBAAkB,GACvB1K,EAAKohC,SAAW,UAChBphC,EAAKqhC,WAAa,GAClBrhC,EAAKmZ,YAAa,EAClBnZ,EAAKkuB,OAAS,OAEdluB,EAAK29B,OAASr9B,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAEtBN,EAAKssB,KAAK5E,cAAgB,EAE1B1nB,EAAKoQ,OAAOnB,SAASqyB,iBAAmB,SAExCthC,EAAKyT,WAAW7B,KAAK5R,EAAKkb,QAE1Blb,EAAKI,eA4eP,OAliBwCC,EAAA,EAAA8gC,EAAArhC,GA8DhCqhC,EAAA3gC,UAAA6T,SAAP,WAEKnU,KAAK6R,OAAS7R,KAAK6R,MAAMwC,SAC5BrU,KAAK6R,MAAMsC,WAGZvU,EAAAU,UAAM6T,SAAQpU,KAAAC,OAQfI,OAAAC,eAAW4gC,EAAA3gC,UAAA,kBAAX,WACC,OAAON,KAAK49B,YAAc59B,KAAK69B,kDAUhCz9B,OAAAC,eAAW4gC,EAAA3gC,UAAA,cAOX,WACC,OAAON,KAAKO,iBAAiB,eAR9B,SAAkBC,GACjBR,KAAKi/B,mBAAmB,SAAUz+B,GAAO,GAAO,EAAO,IAAI,oCAe5DJ,OAAAC,eAAW4gC,EAAA3gC,UAAA,mBAAX,WACC,OAAOib,EAAA,sBAA6Bvb,KAAKy9B,OAAQz9B,KAAK4/B,kBAAoB,mCAU3Ex/B,OAAAC,eAAW4gC,EAAA3gC,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKi/B,mBAAmB,cAAez+B,GAAO,GAAO,EAAO,IAAI,oCAejEJ,OAAAC,eAAW4gC,EAAA3gC,UAAA,wBAAX,WACC,OAAOib,EAAA,sBAA6Bvb,KAAKi+B,YAAaj+B,KAAK4/B,kBAAoB,mCAShFx/B,OAAAC,eAAW4gC,EAAA3gC,UAAA,aAQX,WACC,OAAON,KAAKgb,OAAOiC,WATpB,SAAiBpL,GAChB7R,KAAKgb,OAAOuC,IAAI1L,EAAO,uCAiBjBovB,EAAA3gC,UAAA0M,gBAAP,SAAuBjC,GACtB,IAAI0yB,EAAiBpzB,EAAA,WAAiBrK,KAAKkgC,qBAAqBn1B,GAAW,EAAG8S,KAC9E,OAAS9X,EAAG03B,EAASpzB,EAAA,IAAUrK,KAAKmhC,WAAYh0B,EAAGswB,EAASpzB,EAAA,IAAUrK,KAAKmhC,aAQrEF,EAAA3gC,UAAA6/B,eAAP,WACCngC,KAAKosB,KAAK5P,KAAOC,EAAA,QAAe1W,EAAG/F,KAAK69B,iBAAmBxzB,EAAA,IAAUrK,KAAKmhC,WAAYh0B,EAAGnN,KAAK69B,iBAAmBxzB,EAAA,IAAUrK,KAAKmhC,aAAgB1kB,EAAA,QAAe1W,EAAG/F,KAAK49B,YAAcvzB,EAAA,IAAUrK,KAAKmhC,WAAYh0B,EAAGnN,KAAK49B,YAAcvzB,EAAA,IAAUrK,KAAKmhC,aAErP,IAAInV,EAAQhsB,KAAKY,KAAKorB,MACtBA,EAAMqD,OAAS,OACfrD,EAAMoV,iBAAmB,SACzBpV,EAAMqV,eAAiB,SACvBrV,EAAM7e,GAAMnN,KAAKuU,WAAa,EAC9B,IAAI+sB,EAAmB,GACnBthC,KAAK4pB,SACH5pB,KAAKmsB,SACTmV,GAAY,IAITthC,KAAKmsB,SACRmV,GAAY,IAGdtV,EAAMsV,SAAWA,GAWXL,EAAA3gC,UAAAiL,kBAAP,SAAyBD,EAAYP,EAAkB1C,GACtD0C,IAAuB1C,EAAc0C,GAAYO,EAAKO,SACtD,IACI2Q,EADAzP,EAAgB/M,KAAKgN,gBAAgBjC,GAErC0yB,EAAiBpzB,EAAA,YAAkB0C,GACnC2wB,EAAqB19B,KAAK09B,WAC1BC,EAAmB39B,KAAK29B,SAE5B,GAAIx3B,EAAA,SAAes3B,IAAWnyB,EAAKme,QAAS,CAC3C,IAAI5X,EAAQ7R,KAAK6R,MACbX,EAAQW,EAAMqL,MAAM1Q,SAAS,GAC7BpK,EAAQyP,EAAMhM,UAAUsC,OACxB5C,EAASsM,EAAMtM,OAAOiH,SAAS,GAInC,GAAqB,YAAjBxM,KAAKkhC,UAA0B9+B,EAAQ,GAAKmD,GAAU2L,GAASA,aAAiBiC,EAAc,CACjG,IAAIouB,EAAerwB,EAAMjH,SAASqB,KAAKyD,SAASlD,SAE5CoB,EAAgBiE,EAAMpD,SAASvI,EAAOM,UAAU2G,SAAS,GAAI,YAAa+0B,GAC9E/kB,EAAOC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,KAG1E,IAFA,IAAIu0B,EAAgB3vB,EAAMhM,UAAUsC,OAE3B2L,EAAI,EAAGA,EAAI0tB,EAAO1tB,IAC1B7G,EAAQiE,EAAMpD,SAASvI,EAAOM,UAAU2G,SAASsH,GAAI,YAAaytB,GAClE/kB,GAAQC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,KAG5EA,EAAQiE,EAAMpD,SAASvI,EAAOM,UAAU2G,SAASg1B,EAAQ,GAAI,YAAatwB,EAAMjH,SAASw3B,iBACzFjlB,GAAQC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,UAG3EuP,EAAOC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAUqzB,GAAavwB,EAAGswB,EAASpzB,EAAA,IAAUqzB,KAAiBjhB,EAAA,MAAYihB,EAAYC,EAAWD,EAAYD,EAAQA,GAExJnyB,EAAKkR,KAAOA,EAGbxc,KAAKqgC,iBAAiB/0B,EAAMP,EAAU,EAAG,IAWnCk2B,EAAA3gC,UAAAwL,mBAAP,SAA0BH,EAA2BZ,EAAkB1C,EAAqBwD,GAEtF1F,EAAA,SAAe0F,KACnBA,EAAWF,EAAME,UAGlBd,IAAuB1C,EAAc0C,GAAYc,EAEjD,IAAIkB,EAAgB/M,KAAKgN,gBAAgBjC,GAEzC/K,KAAK0hC,aAAa/1B,EAAOoB,GACzB/M,KAAKqgC,iBAAiB10B,EAAOZ,EAAU/K,KAAKqsB,iBAAkBrsB,KAAKssB,mBAQ7D2U,EAAA3gC,UAAAqhC,sBAAP,aAWOV,EAAA3gC,UAAAmkB,aAAP,SAAoB1X,GACnB,OAAO,GAQR3M,OAAAC,eAAW4gC,EAAA3gC,UAAA,kBAUX,WACC,OAAON,KAAKO,iBAAiB,mBAX9B,SAAsBC,GAEjBR,KAAKS,iBAAiB,aAAcD,IACvCR,KAAKwgC,uDAgBPpgC,OAAAC,eAAW4gC,EAAA3gC,UAAA,gBAUX,WACC,OAAON,KAAKO,iBAAiB,iBAX9B,SAAoBC,GAEfR,KAAKS,iBAAiB,WAAYD,IACrCR,KAAKwgC,uDAgBPpgC,OAAAC,eAAW4gC,EAAA3gC,UAAA,iBAQX,WACC,OAAON,KAAKO,iBAAiB,kBAT9B,SAAqBC,GACpBR,KAAKS,iBAAiB,YAAa4J,EAAA,eAAqB7J,IACxDR,KAAKwgC,uDAsBNpgC,OAAAC,eAAW4gC,EAAA3gC,UAAA,gBAOX,WAEC,OADiBN,KAAK6R,MAAMqL,MAAM1Q,SAAS,aACvB2G,EACZnT,KAAKO,iBAAiB,YAGtB,eAbT,SAAoBC,GACnBR,KAAKS,iBAAiB,WAAYD,GAAO,oCA0BnCygC,EAAA3gC,UAAAmW,qBAAP,SAA4BnO,EAAuBD,GAClD,IAUImU,EAVAqhB,EAAmB79B,KAAK69B,iBACxBD,EAAc59B,KAAKuU,WAAaspB,EAChCI,EAAsB5zB,EAAA,WAAiBrK,KAAKkgC,qBAAqB53B,GAAgBu1B,EAAkBD,GACnGH,EAAiBpzB,EAAA,WAAiBrK,KAAKkgC,qBAAqB73B,GAAcw1B,EAAkBD,GAG5FF,EAAqB19B,KAAK09B,WAE1BY,EADmBt+B,KAAK29B,SACCD,EAIzB7rB,EAAQ7R,KAAK6R,MACbX,EAAQW,EAAMqL,MAAM1Q,SAAS,GAC7BpK,EAAQyP,EAAMhM,UAAUsC,OACxB5C,EAASsM,EAAMtM,OAAOiH,SAAS,GAInC,GAAqB,YAAjBxM,KAAKkhC,UAA0B9+B,EAAQ,GAAKmD,GAAU2L,GAASA,aAAiBiC,EAAc,CACjG,IAAIouB,EAAerwB,EAAMjH,SAASqB,KAAKyD,SAASlD,SAE5CoB,EAAgBiE,EAAMpD,SAASvI,EAAOM,UAAU2G,SAAS,GAAI,YAAa+0B,GAC9E/kB,EAAOC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,KAG1E,IAFA,IAAI20B,EAAgB/vB,EAAMhM,UAAUsC,OAE3B2L,EAAI,EAAGA,EAAI8tB,EAAO9tB,IAC1B7G,EAAQiE,EAAMpD,SAASvI,EAAOM,UAAU2G,SAASsH,GAAI,YAAaytB,GAClE/kB,GAAQC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,KAG5EA,EAAQiE,EAAMpD,SAASvI,EAAOM,UAAU2G,SAASo1B,EAAQ,GAAI,YAAa1wB,EAAMjH,SAASw3B,iBACzFjlB,GAAQC,EAAA,QAAe1W,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,KAE3EuP,GAAQC,EAAA,QAAe1W,EAAGk4B,EAAc5zB,EAAA,IAAU4C,GAAQE,EAAG8wB,EAAc5zB,EAAA,IAAU4C,KAErF,IAAS6G,EAAI8tB,EAAQ,EAAG9tB,GAAK,EAAGA,IAC/B7G,EAAQiE,EAAMpD,SAASvI,EAAOM,UAAU2G,SAASsH,GAAI,YAAaytB,GAClE/kB,GAAQC,EAAA,QAAe1W,EAAGk4B,EAAc5zB,EAAA,IAAU4C,GAAQE,EAAG8wB,EAAc5zB,EAAA,IAAU4C,UAItFuP,EAAOC,EAAA,IAAUihB,EAAYY,EAAKb,EAAQQ,GAE3C,OAAOzhB,GASDykB,EAAA3gC,UAAAuhC,mBAAP,SAA0Bj6B,GAGzB,IAAIoH,EAAsCpH,EAAUoH,UAChDC,EAAoCrH,EAAUqH,QAC9CC,EAAsCtH,EAAUsH,UAEhD5E,EAAqB1C,EAAU0C,WAC/BC,EAAmB3C,EAAU2C,SAEjCyE,EAAUyuB,OAASz6B,KAAKyL,IAAInE,EAAW6C,GACvC8B,EAAQwuB,OAASz6B,KAAKyL,IAAIlE,EAAS4C,GACnC+B,EAAUuuB,OAASz6B,KAAKyL,IAAIlE,EAAS4C,GACrC+B,EAAU+uB,YAAcj7B,KAAKyL,IAAInE,EAAW6C,IAStC8zB,EAAA3gC,UAAAwhC,mBAAP,SAA0Bl6B,GACzBA,EAAUoH,UAAY,IAAI+yB,GAAA,EAC1Bn6B,EAAUqH,QAAU,IAAI8yB,GAAA,EACxBn6B,EAAUsH,UAAY,IAAI6yB,GAAA,GAUpBd,EAAA3gC,UAAA0hC,cAAP,WAEC,GADiBhiC,KAAKY,KACZ,CAET,IAKIugC,EAAoBnhC,KAAKmhC,UACzBA,EAAY,IACfA,GAAa,KAEd,IAAIc,EAAyC,YACxCd,EAAY,IAAMA,EAAY,KAASA,EAAY,KAAOA,EAAY,OAC1Ec,EAAqB,cAEtBjiC,KAAKY,KAAKohC,cAAcC,GAAsBl8B,GAZ3B,IAYmCoH,GAXnC,IAW2CuP,MAV5CwlB,IAUwDvlB,OATxDulB,QAoBbjB,EAAA3gC,UAAA+K,kBAAP,SAAyBF,EAAgBJ,GACxC,IAAIgC,EAAgB/M,KAAKgN,gBAAgBjC,GACzC,GAAII,EAAKse,QAAS,CACjB,IAAIxc,EAAgB5C,EAAA,eAAqBrK,KAAKmhC,UAAY,IACtDl0B,EAAQ,IAAMjK,KAAKC,MAAMgK,EAAQ,IACpC9B,EAAKq0B,cAAe,EAGpBr0B,EAAKq0B,cAAe,EAErB,IAAIc,GAAcn1B,EAAKhD,OACnBgD,EAAKghB,SACRmU,IAAe,GAEhBn1B,EAAKqR,KAAOC,EAAA,QAAe1W,EAAG,EAAGoH,EAAG,IAAOsP,EAAA,QAAe1W,EAAGu6B,EAAaj2B,EAAA,IAAU4C,GAAQE,EAAGmzB,EAAaj2B,EAAA,IAAU4C,KAEvHjN,KAAK0hC,aAAav2B,EAAM4B,GAExB/M,KAAKqgC,iBAAiBl1B,EAAMJ,EAAU,EAAG,IAUnCk2B,EAAA3gC,UAAA4/B,qBAAP,SAA4Bn1B,GAC3B,IAAIk1B,EACAr/B,EAAaZ,KAAKY,KAClBuhC,EAAiBvhC,EAAKuhC,eACtBlE,EAAcj+B,KAAK69B,iBASvB,OANCoC,EADGr/B,EAAKqJ,SAAS0nB,UACH/wB,EAAKkD,IAAMiH,GAAYo3B,EAAiBlE,GAGxClzB,EAAWnK,EAAKiD,OAASs+B,EAAiBlE,EAGlD5zB,EAAA,MAAY41B,EAAY,IAUzBgB,EAAA3gC,UAAAugC,gBAAP,SAAuB9zB,GACtB,IAAIkzB,EAAc51B,EAAA,YAAkB0C,GAAS/M,KAAK69B,iBAClD,OAAO79B,KAAK8gC,qBAAqBb,IAEnCgB,EAliBA,CAAwCrT,EAAA,GA0iBxC3sB,EAAA,EAASC,kBAAsC,mBAAI8/B,GCvmBnD,IAAAoB,GAAA,SAAAxiC,GAUC,SAAAyiC,IAAA,IAAAviC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,qBACjBH,EAAKI,eAGP,OAhBwCC,EAAA,EAAAkiC,EAAAziC,GAgBxCyiC,EAhBA,CAAwChV,GA4FxCiV,GAAA,SAAA1iC,GA6EC,SAAA2iC,IAAA,IAAAziC,EAGCF,EAAAG,KAAAC,OAAOA,KAxCEF,EAAA2tB,eAA8CiS,GAK9C5/B,EAAA6tB,eAA4CqT,GA0B/ClhC,EAAAo/B,oBAA8B,EAUpCp/B,EAAKG,UAAY,aAEjBH,EAAK49B,YAAc,GACnB59B,EAAK69B,SAAW,IAEhB79B,EAAK29B,OAASr9B,OAAAmjB,EAAA,EAAAnjB,CAAQ,IACtBN,EAAKm+B,YAAc,EAEnB,IAAIuE,EAAiB1iC,EAAKumB,cAAcY,YAAYV,EAAA,UACpDic,EAAehf,aAAc,EAC7Bgf,EAAexU,OAAS,WACxBwU,EAAepT,MAAQ,SACvBoT,EAAenT,OAAS,SAExBvvB,EAAKmvB,gBAAgBjP,OAASwiB,EAC9B1iC,EAAK0iC,eAAiBA,EACtB1iC,EAAKovB,iBAAiBlP,OAASwiB,EAE/B1iC,EAAKgvB,iBAAmB0T,EAExB1iC,EAAK2vB,YAAc+S,EAAevb,YAAYwb,GAAA,GAC9C3iC,EAAK2vB,YAAYjM,aAAc,EAC/B1jB,EAAK2vB,YAAYhG,QAAU3pB,EAAKyZ,MAAMC,IAAI,QAC1C1Z,EAAK2vB,YAAYiT,QAAU,EAG3B5iC,EAAKI,eAsUP,OAjbgCC,EAAA,EAAAoiC,EAAA3iC,GAkHrB2iC,EAAAjiC,UAAA+C,sBAAV,WAECzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MAItBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,iBAUnC8+B,EAAAjiC,UAAAqwB,YAAV,SAAsB/vB,GACrBhB,EAAAU,UAAMqwB,YAAW5wB,KAAAC,KAACY,GAClB,IAAIqJ,EAAyBrJ,EAAKqJ,SAClCA,EAAS6nB,cAAc9R,OAAS/V,EAChCA,EAAS8nB,eAAe/R,OAAS/V,EACjCrJ,EAAKof,OAAShgB,KAAKwiC,eACnBv4B,EAAS8gB,UAMAwX,EAAAjiC,UAAAowB,uBAAV,WACC9wB,EAAAU,UAAMowB,uBAAsB3wB,KAAAC,MAC5BsF,EAAA,KAAWtF,KAAKyd,MAAMjY,WAAY,SAAC5E,GAClCA,EAAKC,gBAOG0hC,EAAAjiC,UAAAuwB,uBAAV,WACCjxB,EAAAU,UAAMuwB,uBAAsB9wB,KAAAC,MAC5BsF,EAAA,KAAWtF,KAAKkd,MAAM1X,WAAY,SAAC5E,GAClCA,EAAKC,gBASG0hC,EAAAjiC,UAAA+yB,aAAV,WACC,OAAO,IAAI0K,IASLwE,EAAAjiC,UAAAoiB,cAAP,SAAqBC,GAEpB,GAAIA,IAGCxc,EAAA,SAAewc,EAAOgQ,UAAYxsB,EAAA,SAAewc,EAAOgQ,OAAOnT,QAClEmD,EAAOgQ,OAAOnT,KAAO,eAIlBrZ,EAAA,SAAewc,EAAOpd,SAAWY,EAAA,QAAcwc,EAAOpd,SACzD,IAAK,IAAIuO,EAAI,EAAGe,EAAM8N,EAAOpd,OAAO4C,OAAQ2L,EAAIe,EAAKf,IACpD6O,EAAOpd,OAAOuO,GAAG0L,KAAOmD,EAAOpd,OAAOuO,GAAG0L,MAAQ,cAkBpD5f,EAAAU,UAAMoiB,cAAa3iB,KAAAC,KAAC2iB,IAMX4f,EAAAjiC,UAAAqiC,WAAV,WACC/iC,EAAAU,UAAMqiC,WAAU5iC,KAAAC,MAEhB,IAAIqmB,EAAgBrmB,KAAKqmB,cAErBuc,EAAOv4B,EAAA,WAAiBrK,KAAK09B,WAAY19B,KAAK29B,SAAU,GACxDkF,GAA0B98B,EAAG,EAAGoH,EAAG,EAAGuP,MAAO,EAAGC,OAAQ,GAExDmmB,EAAKzc,EAAcL,WAAa4c,EAAKlmB,MACrCqmB,EAAK1c,EAAcJ,YAAc2c,EAAKjmB,OAEtCshB,EAAcj+B,KAAKi+B,YAEvB,GAAIA,aAAuB1a,EAAA,EAAS,CACnC,IAAI/iB,EAAQy9B,EAAYz9B,MACpBwiC,EAAKhgC,KAAKE,IAAI4/B,EAAIC,GACtBviC,EAAQwC,KAAKgB,IAAIg/B,EAAKxiC,EAAOwiC,EAAKhgC,KAAKE,IAAImjB,EAAcJ,YAAaI,EAAcL,aAAegd,EACnGH,EAAYx4B,EAAA,WAAiBrK,KAAK09B,WAAY19B,KAAK29B,SAAUn9B,GAE7DR,KAAKk/B,oBAAsB1+B,EAAQy9B,EAAYz9B,MAC/Cy9B,EAAc79B,OAAAmjB,EAAA,EAAAnjB,CAAgB,IAARI,GAGvBoiC,EAAOv4B,EAAA,oBAA0Bu4B,EAAMC,IAEvC,IAAII,EAAYjgC,KAAKE,IAAImjB,EAAcL,WAAa4c,EAAKlmB,MAAO2J,EAAcJ,YAAc2c,EAAKjmB,QAE7FumB,EAAkE,EAAvD3nB,EAAA,sBAA6Bvb,KAAKy9B,OAAQwF,IAAkB,EACvExF,EAASyF,EAAW,EACpBxF,EAAa19B,KAAK09B,WAClBC,EAAW39B,KAAK29B,SAEpB39B,KAAKmjC,kBAAoB5nB,EAAA,sBAA6B0iB,EAAaR,GAEnEz9B,KAAKyvB,YAAYjT,KAAOC,EAAA,IAAUihB,EAAYC,EAAWD,EAAYD,EAAQz9B,KAAKmjC,mBAElF79B,EAAA,KAAWtF,KAAKkd,MAAM1X,WAAY,SAAC5E,GAC/BA,EAAKqJ,SAAS41B,iBAChBj/B,EAAKqJ,SAASyzB,WAAaA,EAC3B98B,EAAKqJ,SAAS0zB,SAAWA,GAG1B/8B,EAAK8b,MAAQwmB,EACbtiC,EAAK+b,OAASumB,EAGdtiC,EAAKqJ,SAAS21B,gBAAkBnC,EAChC78B,EAAKqJ,SAASg0B,YAAcA,IAG7B34B,EAAA,KAAWtF,KAAKyd,MAAMjY,WAAY,SAAC5E,GAClCA,EAAKqJ,SAASyzB,WAAaA,EAC3B98B,EAAKqJ,SAAS0zB,SAAWA,EAEzB/8B,EAAK8b,MAAQwmB,EACbtiC,EAAK+b,OAASumB,EAGdtiC,EAAKqJ,SAAS21B,gBAAkBnC,EAChC78B,EAAKqJ,SAASg0B,YAAcA,IAG7B,IAAItL,EAAS3yB,KAAK2yB,OACdA,IACHA,EAAOjW,MAAQwmB,EACfvQ,EAAOhW,OAASumB,EAChBvQ,EAAO+K,WAAaA,EACpB/K,EAAOgL,SAAWA,GAGnB39B,KAAKwiC,eAAeY,aAAgBr9B,EAAG03B,EAASmF,EAAK78B,EAAGoH,EAAGswB,EAASmF,EAAKz1B,EAAGuP,MAAO+gB,EAASmF,EAAKlmB,MAAOC,OAAQ8gB,EAASmF,EAAKjmB,QAC9H3c,KAAKwiC,eAAeva,oBAQXsa,EAAAjiC,UAAAu3B,aAAV,WACC,OAAO,IAAIyF,IA0BZl9B,OAAAC,eAAWkiC,EAAAjiC,UAAA,kBAOX,WACC,OAAON,KAAKO,iBAAiB,mBAR9B,SAAsBC,GACrBR,KAAKS,iBAAiB,aAAcD,GAAO,oCAiC5CJ,OAAAC,eAAWkiC,EAAAjiC,UAAA,gBAOX,WACC,OAAON,KAAKO,iBAAiB,iBAR9B,SAAoBC,GACnBR,KAAKS,iBAAiB,WAAYD,GAAO,oCAiB1CJ,OAAAC,eAAWkiC,EAAAjiC,UAAA,cAOX,WACC,OAAON,KAAKO,iBAAiB,eAR9B,SAAkBC,GACjBR,KAAKi/B,mBAAmB,SAAUz+B,GAAO,GAAM,EAAO,IAAI,oCAa3DJ,OAAAC,eAAWkiC,EAAAjiC,UAAA,wBAAX,WACC,OAAON,KAAKmjC,mDAYb/iC,OAAAC,eAAWkiC,EAAAjiC,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKi/B,mBAAmB,cAAez+B,GAAO,GAAM,EAAO,IAAI,oCAgBzD+hC,EAAAjiC,UAAA+vB,YAAP,SAAmBpmB,GAEdA,GACHA,EAAS2nB,mBAUJ2Q,EAAAjiC,UAAAiwB,YAAP,SAAmBtmB,GAEdA,GACHA,EAAS2nB,mBAIZ2Q,EAjbA,CAAgC9X,GAybhCxpB,EAAA,EAASC,kBAA8B,WAAIohC,oBCvd3Ce,GAAA,SAAAzjC,GAyCC,SAAA0jC,IAAA,IAAAxjC,EAGCF,EAAAG,KAAAC,OAAOA,KAdEF,EAAAyjC,MAAoC,IAAI1qB,EAAA,EAejD/Y,EAAKG,UAAY,YAEjB,IAAI6mB,EAAkB,IAAIC,EAAA,EAE1BjnB,EAAK0L,KAAOsb,EAAgBK,OAAO,yBACnCrnB,EAAKunB,OAASvnB,EAAK0L,KAEnB,IAAIg4B,EAAc,IAAIf,GAAA,EACtBe,EAAI/F,OAAS,EACb39B,EAAK0jC,IAAMA,EACX1jC,EAAKmZ,YAAa,EAElBnZ,EAAK2jC,WAAa,EAClB3jC,EAAK4jC,SAAW,EAEhB5jC,EAAK4c,MAAQtc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KACrBN,EAAK6c,OAASvc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAEtBN,EAAK29B,OAASr9B,OAAAmjB,EAAA,EAAAnjB,CAAQ,KACtBN,EAAKm+B,YAAc79B,OAAAmjB,EAAA,EAAAnjB,CAAQ,GAE3B,IAAIujC,EAAkB,IAAIC,GAAA,SAC1B9jC,EAAK6jC,KAAOA,EAEZ7jC,EAAKyT,WAAW7B,KAAK5R,EAAKyjC,OAG1BzjC,EAAKI,eAkSP,OA1W+BC,EAAA,EAAAmjC,EAAA1jC,GAgFvB0jC,EAAAhjC,UAAA6T,SAAP,WACCvU,EAAAU,UAAM6T,SAAQpU,KAAAC,MACd,IAAI2jC,EAAO3jC,KAAK2jC,KAChBA,EAAKjnB,MAAQ1c,KAAKgoB,WAClB,IAAIF,EAAY9kB,KAAKgB,IAAIhE,KAAKyjC,WAAYzjC,KAAK0jC,UAK/C,GAJAC,EAAKhnB,OAASmL,EACd6b,EAAKE,SAAWzjC,OAAAmjB,EAAA,EAAAnjB,CAAQJ,KAAKyjC,WAAa3b,EAAI,KAC9C6b,EAAKG,UAAY1jC,OAAAmjB,EAAA,EAAAnjB,CAAQJ,KAAK0jC,SAAW5b,EAAI,KAEzC9nB,KAAKY,KAAM,CACd,IAAIqJ,EAAuDjK,KAAKY,KAAKqJ,SAEjE85B,EAAaxoB,EAAA,sBAA6Bvb,KAAKi+B,YAAah0B,EAAS2zB,aACrEoG,EAAazoB,EAAA,sBAA6Bvb,KAAKy9B,OAAQxzB,EAAS2zB,aAEpE+F,EAAK59B,EAAIg+B,EACTJ,EAAKx2B,GAAM2a,EAAI,EAEf6b,EAAKjnB,MAAQsnB,EAAKD,IASpB3jC,OAAAC,eAAWijC,EAAAhjC,UAAA,WAcX,WACC,OAAON,KAAKikC,UAfb,SAAeT,GACVxjC,KAAKikC,MACRjkC,KAAK4yB,cAAc5yB,KAAKikC,MAErBT,IACHxjC,KAAKikC,KAAOT,EACZA,EAAIxjB,OAAShgB,KACbA,KAAKuT,WAAW7B,KAAK8xB,qCAqBvBpjC,OAAAC,eAAWijC,EAAAhjC,UAAA,YAcX,WACC,OAAON,KAAKkkC,WAfb,SAAgBP,GACX3jC,KAAKkkC,OACRlkC,KAAK4yB,cAAc5yB,KAAKkkC,OAErBP,IACH3jC,KAAKkkC,MAAQP,EACbA,EAAK3jB,OAAShgB,KACdA,KAAKuT,WAAW7B,KAAKiyB,qCAmBvBvjC,OAAAC,eAAWijC,EAAAhjC,UAAA,cAOX,WACC,OAAON,KAAKO,iBAAiB,eAR9B,SAAkBC,GACjBR,KAAKi/B,mBAAmB,SAAUz+B,GAAO,GAAM,EAAO,IAAI,oCAkB3DJ,OAAAC,eAAWijC,EAAAhjC,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKi/B,mBAAmB,cAAez+B,GAAO,GAAM,EAAO,IAAI,oCAgBhEJ,OAAAC,eAAWijC,EAAAhjC,UAAA,kBAOX,WACC,OAAON,KAAKO,iBAAiB,mBAR9B,SAAsBC,GACrBR,KAAKS,iBAAiB,aAAcD,GAAO,oCAgB5CJ,OAAAC,eAAWijC,EAAAhjC,UAAA,gBAOX,WACC,OAAON,KAAKO,iBAAiB,iBAR9B,SAAoBC,GACnBR,KAAKS,iBAAiB,WAAYD,GAAO,oCAiB1CJ,OAAAC,eAAWijC,EAAAhjC,UAAA,yBAOX,WACC,OAAON,KAAKO,iBAAiB,0BAR9B,SAA6BC,GAC5BR,KAAKS,iBAAiB,oBAAqBD,oCAsBrC8iC,EAAAhjC,UAAA6jC,UAAP,SAAiB3jC,EAAY8L,EAAmB0d,GAE/C,GADAhqB,KAAKokC,OAAS5jC,OACDuH,GAATvH,IACE2F,EAAA,SAAemG,KACnBA,EAAW,GAGRtM,KAAKY,MAAM,CACd,IACIyjC,EADiCrkC,KAAKY,KAAKqJ,SACvBiD,gBAAgBlN,KAAKY,KAAKiM,cAAcrM,IAC5D8jC,EAAetkC,KAAKshC,SAEM,aAA1BthC,KAAKukC,mBACJF,EAAWC,IACdtkC,KAAKshC,SAAWgD,EAAe,KAGH,oBAA1BtkC,KAAKukC,mBACJF,EAAWC,IACdtkC,KAAKshC,SAAWgD,EAAe,KAIjCtkC,KAAKkqB,SAAUC,SAAU,WAAYC,GAAIia,GAAY/3B,EAAU0d,KAUlE5pB,OAAAC,eAAWijC,EAAAhjC,UAAA,aAOX,WACC,OAAON,KAAKokC,YARb,SAAiB5jC,GAChBR,KAAKmkC,UAAU3jC,oCAiBhBJ,OAAAC,eAAWijC,EAAAhjC,UAAA,YAsBX,WACC,OAAON,KAAKujC,MAAMtmB,WAvBnB,SAAgBrc,GASf,GARIZ,KAAKY,MAAQA,GAChBZ,KAAKujC,MAAMhmB,IAAI3c,EAAM,IAAIiY,EAAA,GACxBjY,EAAKgZ,OAAOC,GAAG,gBAAiB7Z,KAAKwkC,YAAaxkC,MAAM,GACxDY,EAAKgZ,OAAOC,GAAG,mBAAoB7Z,KAAKwkC,YAAaxkC,MAAM,GAC3DY,EAAKgZ,OAAOC,GAAG,qBAAsB7Z,KAAKwkC,YAAaxkC,MAAM,GAC7DY,EAAKgZ,OAAOC,GAAG,kBAAmB7Z,KAAKa,WAAYb,MAAM,MAGvDY,EAAM,CACT,IAAIiR,EAAgCjR,EAAKiR,MACrCA,IACH7R,KAAKshC,SAAWzvB,EAAM6rB,YAGxB19B,KAAKggB,OAASpf,EAAKqJ,SACnBjK,KAAKkuB,OAAS,mCAgBLoV,EAAAhjC,UAAAkkC,YAAV,WACCxkC,KAAKQ,MAAQR,KAAKQ,OASZ8iC,EAAAhjC,UAAAoiB,cAAP,SAAqBC,GAEhBA,GAGCxc,EAAA,SAAewc,EAAO/hB,OAASuF,EAAA,SAAewc,EAAO/hB,OAASZ,KAAK4iB,IAAItf,OAAOqf,EAAO/hB,QACxF+hB,EAAO/hB,KAAOZ,KAAK4iB,IAAI3b,OAAO0b,EAAO/hB,OAKvChB,EAAAU,UAAMoiB,cAAa3iB,KAAAC,KAAC2iB,IAGtB2gB,EA1WA,CAA+B/c,EAAA,GAkX/BtlB,EAAA,EAASC,kBAA6B,UAAImiC,GC9b1C,IAAAoB,GAAA,SAAA7kC,GAUC,SAAA8kC,IAAA,IAAA5kC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,qBACjBH,EAAKI,eAGP,OAhBwCC,EAAA,EAAAukC,EAAA9kC,GAgBxC8kC,EAhBA,CAAwCtC,IAgExCuC,GAAA,SAAA/kC,GA8BC,SAAAglC,IAAA,IAAA9kC,EAGCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,aAEjBH,EAAK49B,WAAa,IAClB59B,EAAK69B,SAAW,IAEhB79B,EAAK+kC,MAAQ,IAAI/iC,EAAA,EAAwB,IAAIuhC,IAC7CvjC,EAAK+kC,MAAMjrB,OAAOC,GAAG,WAAY/Z,EAAKglC,YAAahlC,GAAM,GAEzDA,EAAKyT,WAAW7B,KAAK,IAAI5P,EAAA,EAAahC,EAAK+kC,QAC3C/kC,EAAKyT,WAAW7B,KAAK5R,EAAK+kC,MAAM91B,UAGhCjP,EAAKI,eA+BP,OA7EgCC,EAAA,EAAAykC,EAAAhlC,GAqDrBglC,EAAAtkC,UAAA+C,sBAAV,WAECzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MAItBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,iBAUnCmhC,EAAAtkC,UAAAwkC,YAAV,SAAsB7gB,GACrB,IAAI0f,EAAkB1f,EAAM0H,SACvBgY,EAAK/iC,OACT+iC,EAAK/iC,KAAOZ,KAAKkd,MAAM1Q,SAAS,KAInCo4B,EA7EA,CAAgCtC,IAqFhCrhC,EAAA,EAASC,kBAA8B,WAAIyjC,8CCvJ3CI,GAAA,SAAAnlC,GAqBC,SAAAolC,IAAA,IAAAllC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,sBAEjBH,EAAKuB,OAAO4jC,cAEZnlC,EAAKI,eAmBP,OA9CyCC,EAAA,EAAA6kC,EAAAplC,GAmCxCQ,OAAAC,eAAW2kC,EAAA1kC,UAAA,kBAOX,WACC,OAAON,KAAKqB,OAAmB,WAAEb,WARlC,SAAsBA,GACrBR,KAAK8X,SAAS,aAActX,oCAU9BwkC,EA9CA,CAAyCE,GAAA,GAiHzCC,GAAA,SAAAvlC,GAqCC,SAAAwlC,IAAA,IAAAtlC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,cACjBH,EAAKI,eA0HP,OAlKiCC,EAAA,EAAAilC,EAAAxlC,GAgDtBwlC,EAAA9kC,UAAAoD,eAAV,WACC,OAAO,IAAIqhC,IAMFK,EAAA9kC,UAAA+kC,YAAV,WACC,OAAO,IAAIC,GAAA,GASLF,EAAA9kC,UAAAyJ,oBAAP,SAA2BrH,GAE1B,IAAI6iC,EAA0B7iC,EAAS6iC,MAEnCC,EAAgBxlC,KAAKwlC,MACpBr/B,EAAA,SAAeq/B,KACnBA,EAAQxlC,KAAK6R,MAAM2zB,OAGpB,IAAIC,EAAuB/iC,EAASrB,OAAO4jC,WAAWS,QACjDv/B,EAAA,SAAes/B,KACnBA,EAAe,KAGhBF,EAAMC,MAAQC,EAAeD,EAAQ,IAErC,IAAIv4B,EAAgBjN,KAAKiN,MACpB9G,EAAA,SAAe8G,KACnBA,EAAQjN,KAAK6R,MAAM5E,OAGpBs4B,EAAMt4B,MAAQA,EAEdrN,EAAAU,UAAMyJ,oBAAmBhK,KAAAC,KAAC0C,IAQpB0iC,EAAA9kC,UAAA6T,SAAP,WACCvU,EAAAU,UAAM6T,SAAQpU,KAAAC,MAEd,IAAK,IAAI8T,EAAI9T,KAAK86B,mBAAoBhnB,EAAI9T,KAAK+6B,iBAAkBjnB,IAAK,CACrE,IACIyxB,EADWvlC,KAAK6F,UAAU2G,SAASsH,GACTyxB,MAE1B7H,EAAa6H,EAAM7H,WAGlBA,IAAe,IAAMA,EAAa,GACtC6H,EAAM3V,UAGG8N,GAAc,IACvB6H,EAAMxa,WAUT3qB,OAAAC,eAAW+kC,EAAA9kC,UAAA,aAOX,WACC,OAAON,KAAKO,iBAAiB,cAR9B,SAAiBC,GAChBR,KAAKS,iBAAiB,QAASD,GAAO,oCAevCJ,OAAAC,eAAW+kC,EAAA9kC,UAAA,aAOX,WACC,OAAON,KAAKO,iBAAiB,cAR9B,SAAiBC,GAChBR,KAAKS,iBAAiB,QAASD,oCAgBzB4kC,EAAA9kC,UAAA+f,eAAP,SAAsBC,GACrB1gB,EAAAU,UAAM+f,eAActgB,KAAAC,KAACsgB,GAErB,IACIilB,EADiDjlB,EAAO5d,SACvC6iC,MAErBjlB,EAAOnT,EAAImT,EAAOzD,OAAS0oB,EAAMC,OAEnCJ,EAlKA,CAAiCF,GAAA,GA0KjCjkC,EAAA,EAASC,kBAA+B,YAAIikC,GAC5ClkC,EAAA,EAASC,kBAAuC,oBAAI6jC,GCzRpD,IAAAY,GAAA,SAAA/lC,GAUC,SAAAgmC,IAAA,IAAA9lC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,qBACjBH,EAAKI,eAGP,OAhBwCC,EAAA,EAAAylC,EAAAhmC,GAgBxCgmC,EAhBA,CAAwCC,GAAA,GAwJxCC,GAAA,SAAAlmC,GA8BC,SAAAmmC,IAAA,IAAAjmC,EAGCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,aAEjBH,EAAK0lC,MAAQ,GACb1lC,EAAKmN,MAAQ,GAGbnN,EAAKI,eAsDP,OA9FgCC,EAAA,EAAA4lC,EAAAnmC,GAoD/BQ,OAAAC,eAAW0lC,EAAAzlC,UAAA,aASX,WACC,OAAON,KAAKO,iBAAiB,cAV9B,SAAiBC,GACZR,KAAKS,iBAAiB,QAASD,IAClCR,KAAKgmC,uDAiBP5lC,OAAAC,eAAW0lC,EAAAzlC,UAAA,aAUX,WACC,OAAON,KAAKO,iBAAiB,cAX9B,SAAiBC,GAChBA,EAAQ6J,EAAA,WAAiB7J,EAAO,EAAG,IAC/BR,KAAKS,iBAAiB,QAASD,IAClCR,KAAKgmC,uDAgBGD,EAAAzlC,UAAAu3B,aAAV,WACC,OAAO,IAAIsN,IAGbY,EA9FA,CAAgCF,GAAA,GAsGhC5kC,EAAA,EAASC,kBAA8B,WAAI4kC,oBChQ3CG,GAAA,SAAArmC,GAUC,SAAAsmC,IAAA,IAAApmC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,sBACjBH,EAAKI,eAGP,OAhByCC,EAAA,EAAA+lC,EAAAtmC,GAgBzCsmC,EAhBA,CAAyCC,GAAA,GAgEzCC,GAAA,SAAAxmC,GA8BC,SAAAymC,IAAA,IAAAvmC,EAGCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,cAEjBH,EAAKmvB,gBAAgBjB,OAAS,aAE9BluB,EAAKyqB,QAAQ,GAAI,GAAI,GAAI,IAGzBzqB,EAAKI,eA0BP,OAnEiCC,EAAA,EAAAkmC,EAAAzmC,GAgDtBymC,EAAA/lC,UAAA+C,sBAAV,WAECzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MAItBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,kBAStC4iC,EAAA/lC,UAAA6T,SAAP,WACCvU,EAAAU,UAAM6T,SAAQpU,KAAAC,OAEhBqmC,EAnEA,CAAiCF,GAAA,GA2EjCllC,EAAA,EAASC,kBAA+B,YAAIklC,GAC5CnlC,EAAA,EAASC,kBAAuC,oBAAI+kC,wECrGpDK,GAAA,SAAA1mC,GA6EC,SAAA2mC,IAAA,IAAAzmC,EACCF,EAAAG,KAAAC,OAAOA,KACPF,EAAKG,UAAY,YAEjB,IAAI0L,EAAQ7L,EAAKmnB,YAAY2Z,GAAA,GAC7Bj1B,EAAME,SAAW,GACjBF,EAAM8xB,OAAS,EACf9xB,EAAM/B,KAAO,SACb+B,EAAMuiB,OAAS,EACfviB,EAAM6X,aAAc,EACpB1jB,EAAK6L,MAAQA,EAEb7L,EAAKkuB,OAAS,OAEdluB,EAAK8Z,OAAOC,GAAG,kBAAmB/Z,EAAK0mC,eAAgB1mC,GAAM,GAE7DA,EAAKmZ,YAAa,EAClBnZ,EAAKylC,MAAQzlC,EAAKmnB,YAAYwf,GAAA,GAC9B3mC,EAAKylC,MAAMtsB,YAAa,EAExB,IAAI4I,EAAc/hB,EAAK+hB,mBACvBA,EAAY7O,WAAWxH,MAAO,IAAIub,EAAA,GAAoBI,OAAO,sBAC7DtF,EAAY7O,WAAW0vB,QAAU,GACjC7gB,EAAY7O,WAAW6L,SAAU,EAEjC/e,EAAK4mC,oBAAqB,EAE1B5mC,EAAKylC,MAAM1jB,YAAY7O,WAAW6L,SAAU,EAE5C/e,EAAKyP,QAAQiK,IAAI,WAAY,SAAC8F,EAAUG,GACpC,OAAOA,EAAO8lB,MAAMoB,IAAMlnB,EAAO8lB,MAAM9H,QAAUhe,EAAO8lB,MAAM9H,OAAShe,EAAO8lB,MAAM1H,kBAAoB,KAG5G/9B,EAAKyP,QAAQiK,IAAI,WAAY,SAAC+F,EAAUE,GACpC,OAAOA,EAAO8lB,MAAMqB,IAAMnnB,EAAO8lB,MAAM9H,QAAUhe,EAAO8lB,MAAM9H,OAAShe,EAAO8lB,MAAM1H,kBAAoB,OA4J9G,OA3Q+B19B,EAAA,EAAAomC,EAAA3mC,GAyHvB2mC,EAAAjmC,UAAAumC,gBAAP,eAAA/mC,EAAAE,KACCJ,EAAAU,UAAMumC,gBAAe9mC,KAAAC,MAErB,IAAI2L,EAAQ3L,KAAK2L,MACb45B,EAAQvlC,KAAKulC,MACb1zB,EAAQ7R,KAAK6R,MACjB,GAAIA,GAAS0zB,EAAO,CAEnB,IAAIzR,EAAM9zB,KAAK8mC,MACXC,EAAMxB,EAAMjH,IACZ0I,EAAkBzB,EAAM7H,WAE5B19B,KAAKi9B,SAAS12B,KAAK,SAAC22B,GACnB,GAAIA,aAAiB+J,GAAA,EAAQ,CAC5B,IAAIrmB,EAAYsc,EAAMtc,UACjBza,EAAA,SAAeya,KACnBA,EAAY,IAEb,IAAIC,EAAYqc,EAAMrc,UACjB1a,EAAA,SAAe0a,KACnBA,EAAY,GAGb,IAAIqmB,EAAaF,EAAkBD,EAAMnmB,EACrCumB,EAActmB,EAAY0kB,EAAM9H,OAEpCP,EAAMn3B,EAAIohC,EAAc98B,EAAA,IAAU68B,GAClChK,EAAM/vB,EAAIg6B,EAAc98B,EAAA,IAAU68B,MAKpC,IAAIE,EAAaJ,EAAkBD,EAAMp7B,EAAME,SAC3C6xB,EAAasJ,GAAmB,EAAIlT,EAAM9zB,KAAKqnC,eAAiBN,EAAM,GAEtE5gC,EAAA,MAAYu3B,KACfA,EAAasJ,GAGdr7B,EAAM40B,YAAY6G,EAAY7B,EAAM9H,QAEpCz9B,KAAKsnC,UAAY5J,EAEb19B,KAAKunC,iBAERjiC,EAAA,KAAWtF,KAAKunC,gBAAiB,SAAC7kC,GACjC,IAAI8kC,EAAO9kC,EAAS8kC,KACpBA,EAAKxnB,OAASlgB,EAAK+R,MAAM41B,eACzB,IAAIjnC,EAAQkC,EAAS6V,gBAAgB,SAErC,GAAIpS,EAAA,SAAe3F,GAAQ,CAE1B,GAAIqR,EAAM61B,UAAW,CACpB,IAAIC,EAAeH,EAAKG,aACnBxhC,EAAA,SAAewhC,KACnBA,EAAe,GAEhBA,GAA8B,IAE9BH,EAAK9J,WAAasJ,EAAkBD,EAAM,EAAIA,EAAM,EAAIY,EACxDH,EAAKlJ,IAAMyI,EAAMY,OAGjBH,EAAKlJ,IAAM99B,EAAQqR,EAAM+1B,WACzBJ,EAAK9J,WAAa59B,EAAKwnC,UACvBxnC,EAAKwnC,WAAaE,EAAKlJ,IAGnB57B,EAASmlC,SACbL,EAAK7J,SAAW6J,EAAK9J,YAGtB8J,EAAK/J,OAAS8H,EAAM1H,oBAOnB79B,KAAK8nC,iBACRxiC,EAAA,KAAWtF,KAAK8nC,gBAAiB,SAACplC,GACjC,IAAI8kC,EAAO9kC,EAAS8kC,KAIpB,GAFAA,EAAK/J,OAAS8H,EAAM1H,iBAEhBhsB,EAAM61B,UAAW,CACpB,IAAIC,EAAeH,EAAKG,aACnBxhC,EAAA,SAAewhC,KACnBA,EAAe,GAGhBA,GAA8B,IAE9BH,EAAK7J,SAAWqJ,EAAkBD,EAAM,EAAIA,EAAM,EAAIY,EACtDH,EAAKlJ,IAAMyI,EAAMY,MAEb,CACJH,EAAK7J,SAAW79B,EAAKwnC,UACrB,IAAI9mC,EAAQkC,EAAS6V,gBAAgB,SACjCpS,EAAA,SAAe3F,KAClBgnC,EAAKlJ,IAAM99B,EAAQqR,EAAM+1B,WACzB9nC,EAAKwnC,WAAaE,EAAKlJ,KAIpB57B,EAASqlC,WACbP,EAAK9J,WAAa8J,EAAK7J,cAalB4I,EAAAjmC,UAAAkmC,eAAV,WACC,IAAIjB,EAAQvlC,KAAKulC,MACbyC,EAAShoC,KAAKioC,eAAiB1C,EAAMjH,IAAM,EAC3Cb,EAAS8H,EAAM9H,OAEfyK,EAAKzK,EAASpzB,EAAA,IAAU29B,GACxBG,EAAK1K,EAASpzB,EAAA,IAAU29B,GAExB/6B,EAAQ5C,EAAA,UAAiBtE,EAAGmiC,EAAKloC,KAAK8c,OAAQ3P,EAAGg7B,EAAKnoC,KAAK6c,SAE/D0oB,EAAM7H,WAAa19B,KAAKioC,gBAAkBh7B,EAAQ+6B,GAElDhoC,KAAKooC,IAAOpoC,KAAK8c,OACjB9c,KAAKqoC,IAAOroC,KAAK6c,QASX0pB,EAAAjmC,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACf5Q,KAAK2L,MAAMgF,SAASC,EAAOjF,OAC3B3L,KAAKulC,MAAM50B,SAASC,EAAO20B,QAE7BgB,EA3QA,CAA+B+B,GAAA,GAmR/BrnC,EAAA,EAASC,kBAA6B,UAAIolC,oBCpR1CiC,GAAA,SAAA3oC,GAoBC,SAAA4oC,IAAA,IAAA1oC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,iBACjBH,EAAK2pB,QAAU3pB,EAAKyZ,MAAMC,IAAI,QAC9B1Z,EAAK0/B,cAAe,EAEpB1/B,EAAK0L,KAAOpL,OAAAknB,EAAA,EAAAlnB,GAEZN,EAAKI,eAsEP,OAlGoCC,EAAA,EAAAqoC,EAAA5oC,GAoC5B4oC,EAAAloC,UAAAqvB,KAAP,WAEC,GAAGxpB,EAAA,SAAenG,KAAKgkC,GAAKhkC,KAAKy8B,GAAKz8B,KAAKyoC,GAAKzoC,KAAK0oC,GAAK1oC,KAAK2oC,IAAM3oC,KAAK4oC,KAAM,CAE/E,IAAIC,GAAe9iC,EAAG/F,KAAKgkC,GAAI72B,EAAGnN,KAAKyoC,IACnCK,GAAe/iC,EAAG/F,KAAKy8B,GAAItvB,EAAGnN,KAAK0oC,IACnCK,GAAehjC,EAAG/F,KAAK2oC,IAAKx7B,EAAGnN,KAAK4oC,KAEpCI,EAAYvsB,EAAA,OAAaosB,GAAMpsB,EAAA,iBAAuBqsB,EAAIC,GAE9D/oC,KAAKwc,KAAOwsB,IASd5oC,OAAAC,eAAWmoC,EAAAloC,UAAA,WAOX,WACC,OAAON,KAAKO,iBAAiB,YAR9B,SAAeC,GACdR,KAAKS,iBAAiB,MAAOD,GAAO,oCAerCJ,OAAAC,eAAWmoC,EAAAloC,UAAA,WAOX,WACC,OAAON,KAAKO,iBAAiB,YAR9B,SAAeC,GACdR,KAAKS,iBAAiB,MAAOD,GAAO,oCAgB9BgoC,EAAAloC,UAAA0M,gBAAP,SAAuBjC,GACtB,IAAI89B,GAAM9iC,EAAE/F,KAAKgkC,GAAI72B,EAAEnN,KAAKyoC,IACxBM,GAAMhjC,EAAE/F,KAAK2oC,IAAKx7B,EAAEnN,KAAK4oC,KACzBE,GAAM/iC,EAAE/F,KAAKy8B,GAAItvB,EAAEnN,KAAK0oC,IAExBO,EAAS5+B,EAAA,yBAA+Bw+B,EAAIC,EAAIC,EAAIh+B,GACpDm+B,EAAS7+B,EAAA,yBAA+Bw+B,EAAIC,EAAIC,EAAIh+B,EAAW,MAEnE,OAAQhF,EAAEkjC,EAAOljC,EAAGoH,EAAE87B,EAAO97B,EAAGF,MAAM5C,EAAA,SAAe4+B,EAAQC,KAE/DV,EAlGA,CAAoChM,EAAA,GCSpC2M,GAAA,SAAAvpC,GA8BC,SAAAwpC,IAAA,IAAAtpC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,YAEjBH,EAAKupC,WAAavpC,EAAKmnB,YAAYshB,IACnCzoC,EAAKupC,WAAW7lB,aAAc,EAC9B1jB,EAAKupC,WAAW7hB,cAAgB,EAEhC1nB,EAAKI,eA0HP,OAhK+BC,EAAA,EAAAipC,EAAAxpC,GA8CvBwpC,EAAA9oC,UAAA6T,SAAP,WAGC,GAFAvU,EAAAU,UAAM6T,SAAQpU,KAAAC,OAETA,KAAKspC,WAAY,CACrB,IAAI5L,EAAa19B,KAAK09B,WAClBC,EAAW39B,KAAK29B,SAEhBW,EAAMt+B,KAAKs+B,IACXb,EAASz9B,KAAKy9B,OAEdsK,EAAW/nC,KAAK0C,SAASqlC,SACzBF,EAAS7nC,KAAK0C,SAASmlC,OAEvB0B,EAAQ,EACRC,EAAQ,EAERzB,IACHwB,EAAQxB,EAASjrB,OAASirB,EAASK,GACnCoB,EAAQzB,EAASlrB,OAASkrB,EAASM,IAGpC,IAAIoB,EAAM,EACNC,EAAM,EAOV,GALI7B,IACH4B,EAAM5B,EAAO/qB,OAAS+qB,EAAOO,GAC7BsB,EAAM7B,EAAOhrB,OAASgrB,EAAOQ,IAG1B5K,EAAS,EAAG,CACf,IAAIuG,EAAKvG,EAASpzB,EAAA,IAAUqzB,GAAc6L,EACtCd,EAAKhL,EAASpzB,EAAA,IAAUqzB,GAAc8L,EACtC/M,EAAKgB,EAASpzB,EAAA,IAAUszB,GAAY8L,EACpCf,EAAKjL,EAASpzB,EAAA,IAAUszB,GAAY+L,EAQpCX,GAAOhjC,EAAG,EAAGoH,EAAG,GAChBqP,EAAOC,EAAA,QAAe1W,EAAGi+B,EAAI72B,EAAGs7B,IAEpCjsB,GAAQC,EAAA,MAAYihB,EAAYY,EAAKb,GACrCjhB,GAAQC,EAAA,kBAAyB1W,EAAG02B,EAAItvB,EAAGu7B,GAAMK,GACjDvsB,GAAQC,EAAA,MAAYkhB,EAAUW,EAAKb,GACnCjhB,GAAQC,EAAA,kBAAyB1W,EAAGi+B,EAAI72B,EAAGs7B,GAAMM,GAGhD/oC,KAAKwnC,KAAKhrB,KADP8hB,EAAM,EACQ9hB,EAGA,GAGdxc,KAAK6tB,cACR7tB,KAAK2pC,YAAYntB,KAAOA,EACxBxc,KAAKkvB,iBAAiBxjB,KAAO1L,KAAK2pC,aAGnC,IAAIC,EAAUlM,EAAaY,EAAM,EAC7BuL,EAAUlM,EAAWW,EAAM,EAE3B+K,EAAarpC,KAAKqpC,WAEtBA,EAAWrF,GAAKvG,EAASpzB,EAAA,IAAUu/B,GAAWL,EAC9CF,EAAWZ,GAAKhL,EAASpzB,EAAA,IAAUu/B,GAAWJ,EAC9CH,EAAW5M,GAAKgB,EAASpzB,EAAA,IAAUw/B,GAAWJ,EAC9CJ,EAAWX,GAAKjL,EAASpzB,EAAA,IAAUw/B,GAAWH,EAE9CL,EAAWV,IAAM,EACjBU,EAAWT,IAAM,EAEjBS,EAAWhiB,OAASrnB,KAAKwL,KAEzBxL,KAAK8pC,qBAUR1pC,OAAAC,eAAW+oC,EAAA9oC,UAAA,cAOX,WACC,OAAON,KAAKO,iBAAiB,eAR9B,SAAkBC,GACjBR,KAAKS,iBAAiB,SAAUD,GAAO,oCAgBxCJ,OAAAC,eAAW+oC,EAAA9oC,UAAA,WAOX,WACC,OAAON,KAAKO,iBAAiB,YAR9B,SAAeC,GACdR,KAAKS,iBAAiB,MAAOD,GAAO,oCAUtC4oC,EAhKA,CAA+BW,GAAA,GAwK/B9oC,EAAA,EAASC,kBAA6B,UAAIioC,GC7M1C,IAAAa,GAAA,SAAApqC,GAyBC,SAAAqqC,IAAA,IAAAnqC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBACjBH,EAAKI,eAEP,OA9B0CC,EAAA,EAAA8pC,EAAArqC,GA8B1CqqC,EA9BA,CAA0CC,GAAA,GAmI1CC,GAAA,SAAAvqC,GAmEC,SAAAwqC,IAAA,IAAAtqC,EAGCF,EAAAG,KAAAC,OAAOA,KAlBDF,EAAA8nC,WAAqB,EAmB3B9nC,EAAKG,UAAY,eAEjBH,EAAK49B,YAAc,GACnB59B,EAAK69B,SAAW,IAEhB79B,EAAK29B,OAASr9B,OAAAmjB,EAAA,EAAAnjB,CAAQ,IAEtBN,EAAKm+B,aAAgB,GAErBn+B,EAAKuqC,YAAc,EAEnB,IAAIC,EAAiBxqC,EAAKiuB,eAAe9G,YAAYV,EAAA,UACrD+jB,EAAelb,MAAQ,SACvBkb,EAAejb,OAAS,SACxBib,EAAe9mB,aAAc,EAC7B8mB,EAAetc,OAAS,WACxBluB,EAAKwqC,eAAiBA,EAEtBxqC,EAAKyqC,eAAevqB,OAASsqB,EAC7BxqC,EAAK2nC,eAAeznB,OAASsqB,EAE7BxqC,EAAKiuB,eAAenU,OAAOC,GAAG,iBAAkB/Z,EAAKe,WAAYf,GAAM,GAGvEA,EAAKI,eAyPP,OAxVkCC,EAAA,EAAAiqC,EAAAxqC,GAuG1BwqC,EAAA9pC,UAAA6T,SAAP,eAAArU,EAAAE,KACK+tB,EAAiB/tB,KAAK+tB,eAEtB4P,EAAW39B,KAAK29B,SAChBD,EAAa19B,KAAK09B,WAAa19B,KAAKqqC,YAAc,EAElDzH,EAAOv4B,EAAA,WAAiBrK,KAAK09B,WAAY19B,KAAK29B,SAAU,GAG5DiF,EAAOv4B,EAAA,oBAA0Bu4B,GAFH78B,EAAG,EAAGoH,EAAG,EAAGuP,MAAO,EAAGC,OAAQ,KAI5D,IAAIsmB,EAAYjgC,KAAKE,IAAI6qB,EAAe/H,WAAa4c,EAAKlmB,MAAOqR,EAAe9H,YAAc2c,EAAKjmB,QAE/FxW,EAAA,SAAe88B,KAClBA,EAAY,GAGb,IAAIxF,EAASliB,EAAA,sBAA6Bvb,KAAKy9B,OAAQwF,GACnDpF,EAAmBtiB,EAAA,sBAA6Bvb,KAAKi+B,YAAaR,GAAQ,GAE1EqJ,EAAQ9mC,KAAK0C,SAASrB,OAAOb,MAAMszB,IACnC1xB,EAAQ,EAERooC,EAAW,EACfllC,EAAA,KAAWtF,KAAKyqC,QAAS,SAACC,GACzB,IAAIC,EAAOD,EAAQ,GACnB5qC,EAAK8qC,aAAaD,GAClBvoC,IACA,IAAI5B,EAAQmqC,EAAK7D,MACd6D,EAAK7D,MAAQA,EAAQhnC,EAAK+qC,cAC5BrqC,EAAQsmC,EAAQhnC,EAAK+qC,aAEtBL,GAAYhqC,IAGbR,KAAK4nC,YAAcjK,EAAW39B,KAAK09B,WAAa19B,KAAKqqC,YAAcjoC,GAASooC,EAE5EllC,EAAA,KAAWtF,KAAKyqC,QAAS,SAACC,GACzB,IAAIC,EAAOD,EAAQ,GACfnF,EAAQoF,EAAKpF,MAEjBA,EAAM9H,OAASA,EACf8H,EAAMtH,YAAcJ,EAEpB,IAQIS,EARA99B,EAAQmqC,EAAK7D,MAEd6D,EAAK7D,MAAQA,EAAQhnC,EAAK+qC,cAC5BrqC,EAAQsmC,EAAQhnC,EAAK+qC,aAGtBF,EAAKtD,cAAgB7mC,EAIpB89B,EADGx+B,EAAK4nC,WACD/J,EAAW79B,EAAK49B,YAAct7B,EAAQtC,EAAKuqC,YAG5CvqC,EAAK8nC,WAAapnC,EAGzB+kC,EAAMjH,IAAMA,EACZiH,EAAM7H,WAAaA,EACnBiN,EAAK1C,eAAiBvK,EACtBiN,EAAK3qB,OAASlgB,EAAKyqC,eACnBI,EAAKx2B,WACLupB,GAAcY,EAAMx+B,EAAKuqC,cAG1BrqC,KAAKsqC,eAAelH,aAAgBr9B,EAAG03B,EAASmF,EAAK78B,EAAGoH,EAAGswB,EAASmF,EAAKz1B,EAAGuP,MAAO+gB,EAASmF,EAAKlmB,MAAOC,OAAQ8gB,EAASmF,EAAKjmB,QAC9H3c,KAAKsqC,eAAel1B,mBAEpBxV,EAAAU,UAAM6T,SAAQpU,KAAAC,OAOLoqC,EAAA9pC,UAAA+C,sBAAV,WAECzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MAItBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,mBASnC2mC,EAAA9pC,UAAAoD,eAAV,WACC,OAAO,IAAIsmC,IA0BZ5pC,OAAAC,eAAW+pC,EAAA9pC,UAAA,kBAOX,WACC,OAAON,KAAKO,iBAAiB,mBAR9B,SAAsBC,GACrBR,KAAKS,iBAAiB,aAAcD,GAAO,oCAiC5CJ,OAAAC,eAAW+pC,EAAA9pC,UAAA,gBAOX,WACC,OAAON,KAAKO,iBAAiB,iBAR9B,SAAoBC,GACnBR,KAAKS,iBAAiB,WAAYD,GAAO,oCAiB1CJ,OAAAC,eAAW+pC,EAAA9pC,UAAA,cAOX,WACC,OAAON,KAAKO,iBAAiB,eAR9B,SAAkBC,GACjBR,KAAKi/B,mBAAmB,SAAUz+B,GAAO,GAAM,EAAO,IAAI,oCAiB3DJ,OAAAC,eAAW+pC,EAAA9pC,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKi/B,mBAAmB,cAAez+B,GAAO,GAAM,EAAO,IAAI,oCAkBhEJ,OAAAC,eAAW+pC,EAAA9pC,UAAA,iBASX,WACC,OAAON,KAAKO,iBAAiB,kBAV9B,SAAqBC,GACpBR,KAAKS,iBAAiB,YAAaD,GAAO,GAC1CR,KAAK8qC,MAAM/7B,SAASs6B,WAAW7hB,cAAgB,EAC/CxnB,KAAK8qC,MAAM/7B,SAASy4B,KAAKtgB,YAAc,mCAajCkjB,EAAA9pC,UAAAyqC,WAAP,WACC,IAAIJ,EAAO,IAAIrE,GAEf,OADAtmC,KAAKuT,WAAW7B,KAAKi5B,GACdA,GAMDP,EAAA9pC,UAAA0qC,WAAP,WACC,IAAIxD,EAAO,IAAI2B,GAEf,OADAnpC,KAAKuT,WAAW7B,KAAK81B,GACdA,GAGT4C,EAxVA,CAAkCF,GAAA,GAgWlCjpC,EAAA,EAASC,kBAAgC,aAAIipC,iCC7d7Cc,GAAA,SAAArrC,GAgCC,SAAAsrC,IAAA,IAAAprC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBAEjBH,EAAK+S,UAAiB,MAAI,GAC1B/S,EAAK+S,UAAiB,MAAI,GAE1B/S,EAAK+S,UAAqB,UAAI,GAC9B/S,EAAK+S,UAAqB,UAAI,GAE9B/S,EAAKI,eAqDP,OA/F0CC,EAAA,EAAA+qC,EAAAtrC,GAkDzCQ,OAAAC,eAAW6qC,EAAA5qC,UAAA,cAOX,WACC,OAAON,KAAKmrC,aARb,SAAkBC,GACjBprC,KAAKqrC,UAAUD,oCAUNF,EAAA5qC,UAAA+qC,UAAV,SAAoBD,GAApB,IAAAtrC,EAAAE,KAMC,GALIA,KAAKmrC,SAAWC,GAAUprC,KAAKmrC,SAClC7yB,EAAA,OAActY,KAAK2f,QAAS3f,KAAKmrC,SAElCnrC,KAAKmrC,QAAUC,EAEXA,EAAQ,CACX,IAAIhpB,EAA0CgpB,EAAO1oC,SACjD0f,GAAgBA,GAAgBpiB,OACnCoiB,EAAagpB,YAASrjC,GAEvB/H,KAAKsrC,UAAUF,GAEfprC,KAAKuT,WAAW7B,KAAK,IAAImH,EAAA,EAAS,WAG7B/Y,EAAK6C,WACR7C,EAAK6C,UAAU4oC,QAAQjuB,YAAY8tB,QAUvChrC,OAAAC,eAAW6qC,EAAA5qC,UAAA,qBAAX,WAIC,OAHKN,KAAKwrC,iBACTxrC,KAAKwrC,eAAiB,IAAIxpC,EAAA,GAEpBhC,KAAKwrC,gDAGdN,EA/FA,CAA0C7zB,GA0J1Co0B,GAAA,SAAA7rC,GA8EC,SAAA8rC,IAAA,IAAA5rC,EACCF,EAAAG,KAAAC,OAAOA,KAnCEF,EAAA6rC,eAAyB,EAKzB7rC,EAAA8rC,aAAuB,EA+BhC9rC,EAAKG,UAAY,eAEjBH,EAAK4c,MAAQtc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KACrBN,EAAK6c,OAASvc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAEtBN,EAAK0nB,cAAgB,EACrB1nB,EAAKonB,YAAc,EAEnBpnB,EAAK+rC,WAAY,EAEjB,IAAIC,EAAmBhsC,EAAKsZ,cAAc6N,YAAYV,EAAA,UACtDulB,EAAiBtoB,aAAc,EAC/BsoB,EAAiB7yB,YAAa,EAC9B6yB,EAAiB9d,OAAS,OAC1BluB,EAAKisC,kBAAoBD,EAEzBhsC,EAAKyrC,QACLzrC,EAAKyrC,QAAQx8B,SAASywB,cAAe,EAErC1/B,EAAK26B,mBAAqB36B,EAAKyrC,QAAQx8B,SAEvCjP,EAAKI,eA2xBP,OAh4BkCC,EAAA,EAAAurC,EAAA9rC,GA6GjCQ,OAAAC,eAAWqrC,EAAAprC,UAAA,wBAAX,WACC,OAAON,KAAK+rC,mDAOHL,EAAAprC,UAAA+C,sBAAV,WACCzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MACtBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,mBAUnCioC,EAAAprC,UAAAoD,eAAV,WACC,OAAO,IAAIunC,IAQLS,EAAAprC,UAAA6T,SAAP,eAAArU,EAAAE,KAIKgsC,EAAiBhsC,KAAK6R,MAAMtM,OAC5B0mC,EAAuB,EACvB5/B,EAAgB,EAEpB/G,EAAA,KAAW0mC,EAAexmC,WAAY,SAACD,GAClCA,aAAkBmmC,GACjB5rC,EAAK2F,UAAYF,EAAOE,aACrBF,EAAOkU,SAAWlU,EAAOsmC,WAA+B,IAAjBI,IAC5CA,IAGG1mC,GAAUzF,IACbuM,EAAQ4/B,EAAe,MAM3B,IAAIhiC,EAAWjK,KAAKyF,SAASwE,SAEzBiiC,EAA4BjiC,EAASiiC,kBACrCzK,EAA0Bx3B,EAASw3B,gBAEvCzhC,KAAK2rC,eAAiBO,EAAqB7/B,EAAQ4/B,GAAiBxK,EAAkByK,GACtFlsC,KAAK4rC,aAAeM,GAAqB7/B,EAAQ,GAAK4/B,GAAgBxK,EAAkByK,GAExFtsC,EAAAU,UAAM6T,SAAQpU,KAAAC,MAEd,IAAK,IAAI8T,EAAI,EAAGA,EAAI9T,KAAK4F,WAAYkO,IAAK,CACzC,IAAIpR,EAAW1C,KAAK6F,UAAU2G,SAASsH,GACvC9T,KAAKmsC,qBAAqBzpC,GAG3B,IAASoR,EAAI9T,KAAK6F,UAAUsC,OAAS,EAAG2L,EAAI9T,KAAKiG,SAAU6N,IAAK,CAC3DpR,EAAW1C,KAAK6F,UAAU2G,SAASsH,GACvC9T,KAAKmsC,qBAAqBzpC,KAUrBgpC,EAAAprC,UAAAyJ,oBAAP,SAA2BrH,GAE1B1C,KAAKosC,wBAAwB1pC,GAC7B9C,EAAAU,UAAMyJ,oBAAmBhK,KAAAC,KAAC0C,IASjBgpC,EAAAprC,UAAA+rC,iBAAV,SAA2B3pC,GAC1B,IAAIwJ,EAAgBlM,KAAK2rC,eAQzB,OANI3rC,KAAKyF,UAAYzF,KAAKkR,MACzBhF,GAAiBxJ,EAASmQ,UAAU7S,KAAKsb,YAAc,GAGvDpP,GAAiBxJ,EAASmQ,UAAU7S,KAAK0b,YAAc,GAEjDxP,GAQDw/B,EAAAprC,UAAAyhB,iCAAP,SAAwCrf,EAA8BiY,GACjE3a,KAAKssC,qBACRtsC,KAAK+J,oBAAoBrH,GAGzB9C,EAAAU,UAAMyhB,iCAAgChiB,KAAAC,KAAC0C,EAAUiY,IAUzC+wB,EAAAprC,UAAAisC,eAAV,SAAyB7pC,GACxB,IAAI0J,EAAcpM,KAAK4rC,aAQvB,OANI5rC,KAAKyF,UAAYzF,KAAKkR,MACzB9E,GAAe1J,EAASmQ,UAAU7S,KAAKqb,QAAU,GAGjDjP,GAAe1J,EAASmQ,UAAU7S,KAAKyb,QAAU,GAE3CrP,GASDs/B,EAAAprC,UAAA8rC,wBAAP,SAA+B1pC,GAA/B,IAEK8pC,EACAC,EACAC,EACA13B,EALLlV,EAAAE,KAOKkM,EAAgBlM,KAAKqsC,iBAAiB3pC,GACtC0J,EAAcpM,KAAKusC,eAAe7pC,GAElC2Y,EAASrb,KAAKqb,OACdC,EAAatb,KAAKsb,WAClBG,EAASzb,KAAKyb,OACdC,EAAa1b,KAAK0b,WAElB3M,EAAmB/O,KAAKurC,QAAQx8B,SAEhC44B,EAAuB54B,EAAS44B,aAChCgF,EAAwB59B,EAAS49B,cAEjC3kB,EAAqBjZ,EAASiZ,WAC9BD,EAAsBhZ,EAASgZ,YAE/BqP,EAAmBroB,EAASqoB,SAC5BC,EAAoBtoB,EAASsoB,UAE7BnH,EAAsBnhB,EAAS69B,iBAC/Bzc,EAAuBphB,EAAS89B,kBAChCC,EAAqB/9B,EAASg+B,gBAC9BC,EAAwBj+B,EAASk+B,mBAEjCC,GAAuB,EAG3B,GAAKltC,KAAKkR,iBAAiBiC,GAAkBnT,KAAKoR,iBAAiB+B,EAAe,CAEjF,IAAKzQ,EAAS6d,SAASvgB,KAAK+Y,iBAAmBrW,EAAS6d,SAASvgB,KAAKgZ,eACrE,OAKD,GAFA9M,EAAgB,EAChBE,EAAc,GACTjG,EAAA,MAAYwhC,GAEhBz7B,GADIihC,EAAiB9iC,EAAA,OAAa+B,EAAcF,IAAkB,EAAIy7B,EAAe,KAAO,EAAG,GAE/Fv7B,GAAe+gC,EAOhB,GAJAX,EAAIxsC,KAAKkR,MAAM1D,KAAK9K,EAAU4Y,EAAYpP,GAC1CugC,EAAIzsC,KAAKkR,MAAM1D,KAAK9K,EAAU2Y,EAAQjP,GAGlCjG,EAAA,MAAYwhC,GAEf6E,GADIW,GAAmBV,EAAID,EAAKxkB,GAAc,EAE9CykB,GAAKU,EAIN,IAAKhnC,EAAA,MAAYixB,GAEhBoV,GADIW,GAAmBV,EAAID,EAAKpV,GAAY,EAE5CqV,GAAKU,EAMN,GAHAjhC,EAAgB,EAChBE,EAAc,GAETjG,EAAA,MAAYwmC,GAEhBzgC,GADIihC,EAAiB9iC,EAAA,OAAa,EAAIsiC,EAAgB,KAAO,EAAG,GAEhEvgC,GAAe+gC,EAOhB,GAJAT,EAAI1sC,KAAKoR,MAAMzD,KAAKjL,EAAUgZ,EAAYxP,GAC1C8I,EAAIhV,KAAKoR,MAAMzD,KAAKjL,EAAU+Y,EAAQrP,GAGlCjG,EAAA,MAAYwmC,GAEf33B,GADIm4B,GAAmBn4B,EAAI03B,EAAK3kB,GAAe,EAE/C2kB,GAAKS,EAIN,IAAKhnC,EAAA,MAAYkxB,GAEhBriB,GADIm4B,GAAmBn4B,EAAI03B,EAAKrV,GAAa,EAE7CqV,GAAKS,EAGNV,EAAIzsC,KAAKotC,wBAAwBX,GACjCD,EAAIxsC,KAAKotC,wBAAwBZ,GACjCE,EAAI1sC,KAAKqtC,sBAAsBX,GAC/B13B,EAAIhV,KAAKqtC,sBAAsBr4B,QAE3B,GAAIhV,KAAKyF,UAAYzF,KAAKkR,MAAO,CAErC,IAAKxO,EAAS6d,SAASvgB,KAAKgZ,eAC3B,OAID,IAAK7S,EAAA,MAAYwhC,GAEhBz7B,GADIihC,EAAiB9iC,EAAA,OAAa+B,EAAcF,IAAkB,EAAIy7B,EAAe,KAAO,EAAG,GAE/Fv7B,GAAe+gC,EAOhB,GAJAX,EAAIxsC,KAAKkR,MAAM1D,KAAK9K,EAAU4Y,EAAYpP,GAC1CugC,EAAIzsC,KAAKkR,MAAM1D,KAAK9K,EAAU2Y,EAAQjP,GAGlCjG,EAAA,MAAYwhC,GAEf6E,GADIW,GAAmBV,EAAID,EAAKxkB,GAAc,EAE9CykB,GAAKU,EAIN,IAAKhnC,EAAA,MAAYixB,GAEhBoV,GADIW,GAAmBV,EAAID,EAAKpV,GAAY,EAE5CqV,GAAKU,EAGN,IAAIG,EAAiB5qC,EAASmQ,UAAU6I,GACpC6xB,EAAc7qC,EAASmQ,UAAU4I,GAEjCzb,KAAKoR,iBAAiB1P,EAAA,IACzB4rC,EAAiB,EACjBC,EAAc,GAGfv4B,EAAIhV,KAAKoR,MAAMzD,KAAKjL,EAAUgZ,EAAY4xB,GAC1CZ,EAAI1sC,KAAKoR,MAAMzD,KAAKjL,EAAU+Y,EAAQ8xB,GAKtC,IAAIC,EAAaxtC,KAAKoR,MAAMmD,YAEvBm4B,EAAI,GAAK13B,EAAI,GAAO03B,EAAIc,GAAcx4B,EAAIw4B,KAC9CN,GAAc,GAGfR,EAAI1sC,KAAKqtC,sBAAsBX,GAC/B13B,EAAIhV,KAAKqtC,sBAAsBr4B,GAE3BhS,KAAKyL,IAAIg+B,EAAID,GAAKtc,EAAcC,GAAgB,IACnD+c,GAAc,OAIX,CACJ,IAAKxqC,EAAS6d,SAASvgB,KAAK+Y,eAC3B,OAIA,IAiBIo0B,EAlBL,IAAKhnC,EAAA,MAAYwmC,GAEhBzgC,GADIihC,EAAiB9iC,EAAA,OAAa+B,EAAcF,IAAkB,EAAIygC,EAAgB,KAAO,EAAG,GAEhGvgC,GAAe+gC,EAOhB,GAJAT,EAAI1sC,KAAKoR,MAAMzD,KAAKjL,EAAUgZ,EAAYxP,GAC1C8I,EAAIhV,KAAKoR,MAAMzD,KAAKjL,EAAU+Y,EAAQrP,GAGlCjG,EAAA,MAAYwmC,GAEf33B,GADIm4B,GAAmBn4B,EAAI03B,EAAK3kB,GAAe,EAE/C2kB,GAAKS,EAIN,IAAKhnC,EAAA,MAAYkxB,GAEhBriB,GADIm4B,GAAmBn4B,EAAI03B,EAAKrV,GAAa,EAE7CqV,GAAKS,EAGN,IAAIM,EAAgB/qC,EAASmQ,UAAUwI,GACnCqyB,EAAehrC,EAASmQ,UAAUyI,GAElCtb,KAAKkR,iBAAiBxP,EAAA,IACzB+rC,EAAgB,EAChBC,EAAe,GAGhBjB,EAAIzsC,KAAKkR,MAAM1D,KAAK9K,EAAU2Y,EAAQoyB,GACtCjB,EAAIxsC,KAAKkR,MAAM1D,KAAK9K,EAAU4Y,EAAYoyB,GAItCF,EAAaxtC,KAAKkR,MAAMqD,YAEvBk4B,EAAI,GAAKD,EAAI,GAAOC,EAAIe,GAAchB,EAAIgB,KAC9CN,GAAc,GAGfT,EAAIzsC,KAAKotC,wBAAwBX,GACjCD,EAAIxsC,KAAKotC,wBAAwBZ,GAE7BxpC,KAAKyL,IAAIi+B,EAAI13B,GAAK83B,EAAaE,GAAiB,IACnDE,GAAc,GAIhB,IAOKS,EAPD/lB,EAAY5kB,KAAKyL,IAAIg+B,EAAID,GACzB1kB,EAAY9kB,KAAKyL,IAAIuG,EAAI03B,GAEzB3mC,EAAY/C,KAAKE,IAAIspC,EAAGC,GACxBt/B,EAAYnK,KAAKE,IAAIwpC,EAAG13B,GAEvBk4B,EAgGJltC,KAAKmsC,qBAAqBzpC,IA9FrBA,EAAS0oC,OAqCbuC,EAASjrC,EAAS0oC,QApClBuC,EAAS3tC,KAAKurC,QAAQvjC,SAEtBd,EAAA,eAAuBlH,KAAM2tC,EAAQt0B,EAAA,GACrCnS,EAAA,eAAuBlH,KAAKurC,QAAQx8B,SAAU4+B,EAAQt0B,EAAA,GACtD3W,EAAS4oC,UAAUqC,GAEnBjrC,EAAS0oC,OAASuC,EAGd3tC,KAAK4tC,kBACRD,EAAOE,KAAO,WACdF,EAAOG,WAAY,IAGnBH,EAAOE,KAAO,WACdF,EAAOG,WAAY,GAGhBH,EAAOG,YACVH,EAAO/zB,OAAOm0B,KAAK,QAAS,SAACC,GAC5BL,EAAO5zB,YAAcja,EAAKmuC,eAAenuC,EAAKqjB,eAAgBzgB,SAC5DqF,GAAW,GACd4lC,EAAO/zB,OAAOm0B,KAAK,OAAQ,SAACC,GAC3BL,EAAO5zB,YAAc,SACnBhS,GAAW,IAEX4lC,EAAOnW,YACVmW,EAAO/zB,OAAOm0B,KAAK,OAAQ,SAACC,GAC3BL,EAAO5zB,YAAcja,EAAKmuC,eAAenuC,EAAKqjB,eAAgBzgB,SAC5DqF,GAAW,GACd4lC,EAAO/zB,OAAOm0B,KAAK,MAAO,SAACC,GAC1BL,EAAO5zB,YAAc,SACnBhS,GAAW,KAOhB4lC,EAAOjxB,MAAQkL,EACf+lB,EAAOhxB,OAASmL,EAEhB6lB,EAAO5nC,EAAIA,EACX4nC,EAAOxgC,EAAIA,EAEXwgC,EAAOO,MAAQ1B,EACfmB,EAAOQ,MAAQzB,EAEfiB,EAAOS,UAAY3B,EAAID,EACvBmB,EAAOU,WAAar5B,EAAI03B,EAExBiB,EAAO3tB,OAAShgB,KAAK8rC,iBACrB6B,EAAOW,cAAgBtuC,KAEvBA,KAAKuuC,gBAAgBZ,GAEjBA,EAAOt5B,SACVs5B,EAAOx5B,WAGRw5B,EAAOvqC,YAAa,EAGpBkC,EAAA,KAAWtF,KAAKqc,WAAW7W,WAAY,SAAC+vB,GACvC,IAAIiZ,EAA+B9rC,EAAS+rC,cAAcxnC,OAAOsuB,EAAU/uB,KACtEgoC,IACJA,EAAc1uC,EAAKyrC,QAAQvjC,SAG3Bd,EAAA,eAAuBquB,EAAUkG,SAAU+S,EAAan1B,EAAA,GAExD3W,EAAS4oC,UAAUkD,GACnB9rC,EAAS+rC,cAAclrC,OAAOgyB,EAAU/uB,IAAagoC,IAGtDA,EAAYxuB,OAASuV,EAAUkG,SAE/B+S,EAAY9xB,MAAQkL,EACpB4mB,EAAY7xB,OAASmL,EACrB0mB,EAAYzoC,EAAIA,EAChByoC,EAAYrhC,EAAIA,EAEhBrN,EAAKyuC,gBAAgBC,GAEjBA,EAAYn6B,SACfm6B,EAAYr6B,WAGbq6B,EAAYprC,YAAa,KAQ3BV,EAASgsC,UAAY9mB,EACrBllB,EAASisC,WAAa7mB,GAIvB4jB,EAAAprC,UAAA6rC,qBAAA,SAAqBzpC,GAChBA,IACCA,EAAS0oC,SAEZ1oC,EAAS0oC,OAAO1uB,MAAQ,EACxBha,EAAS0oC,OAAOzuB,OAAS,EACzBja,EAAS0oC,OAAOhoC,YAAa,GAG9BkC,EAAA,KAAWtF,KAAKqc,WAAW7W,WAAY,SAAC+vB,GACvC,IAAIiZ,EAAsB9rC,EAAS+rC,cAAcxnC,OAAOsuB,EAAU/uB,KAC9DgoC,IAEHA,EAAY9xB,MAAQ,EACpB8xB,EAAY7xB,OAAS,EACrB6xB,EAAYprC,YAAa,OAanBsoC,EAAAprC,UAAAiuC,gBAAV,SAA0BxuB,GAEzB,IAAIrd,EAAiDqd,EAAOrd,SAE5D,GAAI1C,KAAKkR,iBAAiBxP,EAAA,GAAa1B,KAAKoR,iBAAiB1P,EAAA,EAAW,CACvE,IAAIktC,EACApuC,OAAK,EACLquC,OAAM,EAEN7uC,KAAKyF,UAAYzF,KAAKoR,MACrBpR,KAAKsb,YAActb,KAAKqb,SAC3BuzB,EAAOlsC,EAASmL,SAAS7N,KAAKsb,YAC9B9a,EAAQkC,EAASmL,SAAS7N,KAAKqb,QAC/BwzB,EAASnsC,EAASmL,SAAS7N,KAAKkR,MAAM1O,cAAgB,IAAK,mBAIxDxC,KAAK0b,YAAc1b,KAAKyb,SAC3BmzB,EAAOlsC,EAASmL,SAAS7N,KAAK0b,YAC9Blb,EAAQkC,EAASmL,SAAS7N,KAAKyb,QAC/BozB,EAASnsC,EAASmL,SAAS7N,KAAKoR,MAAM5O,cAAgB,IAAK,mBAIzDhC,EAAQouC,GACXlsC,EAASosC,iBAAkB,EAC3B/uB,EAAOqB,aAAazQ,SAAS3Q,KAAK+uC,oBAClChvB,EAAOivB,SAAShvC,KAAK+uC,mBAAoB,KAGzCrsC,EAASosC,iBAAkB,EAC3B/uB,EAAOqB,aAAazQ,SAAS3Q,KAAKivC,oBAClClvB,EAAOivB,SAAShvC,KAAKivC,mBAAoB,IAGtCJ,EAAS,GACZnsC,EAASwsC,qBAAsB,EAC/BnvB,EAAOqB,aAAazQ,SAAS3Q,KAAKmvC,wBAClCpvB,EAAOivB,SAAUhvC,KAA2B,uBAAG,KAG/C0C,EAASwsC,qBAAsB,EAC/BnvB,EAAOqB,aAAazQ,SAAS3Q,KAAKovC,wBAClCrvB,EAAOivB,SAAUhvC,KAA2B,uBAAG,MAUlDI,OAAAC,eAAWqrC,EAAAprC,UAAA,eAAX,WAMC,OALKN,KAAKqvC,WACTrvC,KAAKqvC,SAAW,IAAIvtC,EAAA,EAA8B9B,KAAKsvC,wBACvDtvC,KAAKuT,WAAW7B,KAAK,IAAI5P,EAAA,EAAa9B,KAAKqvC,WAC3CrvC,KAAKuT,WAAW7B,KAAK1R,KAAKqvC,SAAStgC,WAE7B/O,KAAKqvC,0CAQH3D,EAAAprC,UAAAgvC,qBAAV,WACC,OAAO,IAAIC,GAAA,GAWZnvC,OAAAC,eAAWqrC,EAAAprC,UAAA,iBAOX,WACC,OAAON,KAAKO,iBAAiB,kBAR9B,SAAqBC,GACpBR,KAAKS,iBAAiB,YAAaD,GAAO,oCAoB3CJ,OAAAC,eAAWqrC,EAAAprC,UAAA,yBAAX,WAIC,OAHKN,KAAK+uC,qBACT/uC,KAAK+uC,mBAAqB/uC,KAAKsrB,OAAOtjB,OAAO,sBAEvChI,KAAK+uC,oDAYb3uC,OAAAC,eAAWqrC,EAAAprC,UAAA,6BAAX,WAIC,OAHKN,KAAKmvC,yBACTnvC,KAAKmvC,uBAAyBnvC,KAAKsrB,OAAOtjB,OAAO,0BAE3ChI,KAAKmvC,wDAcb/uC,OAAAC,eAAWqrC,EAAAprC,UAAA,yBAAX,WAIC,OAHKN,KAAKivC,qBACTjvC,KAAKivC,mBAAqBjvC,KAAKsrB,OAAOtjB,OAAO,sBAEvChI,KAAKivC,oDAYb7uC,OAAAC,eAAWqrC,EAAAprC,UAAA,6BAAX,WAIC,OAHKN,KAAKovC,yBACTpvC,KAAKovC,uBAAyBpvC,KAAKsrB,OAAOtjB,OAAO,0BAE3ChI,KAAKovC,wDASN1D,EAAAprC,UAAA0e,kBAAP,SAAyBtc,GAAzB,IAAA5C,EAAAE,KAGC,GAFAJ,EAAAU,UAAM0e,kBAAiBjf,KAAAC,KAAC0C,GAEpB1C,KAAK28B,eAAgB,CACxB,IACI6S,EACAC,EAFAnT,EAAoBt8B,KAAK28B,eAAeL,OAIxC55B,IAEF8sC,EADG9sC,EAASosC,gBACI9uC,KAAK+uC,mBAGL/uC,KAAKivC,mBAIrBQ,EADG/sC,EAASwsC,oBACQlvC,KAAKmvC,uBAGLnvC,KAAKovC,wBAI3B9pC,EAAA,KAAWg3B,EAAOW,SAASz3B,WAAY,SAAC03B,GACnCx6B,GACHw6B,EAAM8R,SAASS,GACfvS,EAAM8R,SAASQ,KAIftS,EAAM8R,SAASlvC,EAAKsvC,wBACpBlS,EAAM8R,SAASlvC,EAAKmvC,yBAajBvD,EAAAprC,UAAA+7B,mBAAP,SAA0BC,GACzB,IAAI1U,EAAY0U,EAAOtU,WACnBF,EAAYwU,EAAOvU,YAEvBuU,EAAOoT,iBAEP,IAAItE,EAA2B9O,EAAOrV,YAAY0oB,GAAA,GAClDvE,EAAO5nB,aAAc,EACrBtc,EAAA,eAAuBlH,KAAMorC,EAAQ/xB,EAAA,GAErC+xB,EAAOz6B,SAAc3Q,KAAKurC,QAAQx8B,UAClCq8B,EAAO7gB,QAAQ,EAAG,EAAG,EAAG,GACxB6gB,EAAO1uB,MAAQkL,EACfwjB,EAAOzuB,OAASmL,EAEhB,IAAI6U,EAAiCL,EAAO55B,SAC5Ci6B,EAAeC,MAAQ58B,KAAKwL,KAC5BmxB,EAAeE,UAAY78B,KAAKwL,MAQ1BkgC,EAAAprC,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACf5Q,KAAKurC,QAAQx8B,SAAS4B,SAASC,EAAO26B,QAAQx8B,WAQrC28B,EAAAprC,UAAAmgB,mBAAV,SAA6BH,EAAgB5P,GAC5C,OAAI1Q,KAAKyF,UAAYzF,KAAKkR,OACjBlR,KAAK2rC,eAAiB3rC,KAAK4rC,cAAgB,EAG5ChsC,EAAAU,UAAMmgB,mBAAkB1gB,KAAAC,KAACsgB,EAAQ5P,IAShCg7B,EAAAprC,UAAAqgB,mBAAV,SAA6BL,EAAgB5P,GAC5C,OAAI1Q,KAAKyF,UAAYzF,KAAKoR,OACjBpR,KAAK2rC,eAAiB3rC,KAAK4rC,cAAgB,EAG5ChsC,EAAAU,UAAMqgB,mBAAkB5gB,KAAAC,KAACsgB,EAAQ5P,IAOhCg7B,EAAAprC,UAAA+sC,sBAAV,SAAgCpN,GAC/B,IAAI+M,EAAgBhtC,KAAKurC,QAAQx8B,SAASk+B,mBAGtClvB,GAFa/d,KAAKurC,QAAQx8B,SAASg+B,gBAGnC/uB,EAAehe,KAAKoR,MAAMmD,WAAay4B,EAE3C,OAAO3iC,EAAA,WAAiB41B,EAAYliB,EAAMC,IAMjC0tB,EAAAprC,UAAA8sC,wBAAV,SAAkCnN,GACjC,IAAI/P,EAAclwB,KAAKurC,QAAQx8B,SAAS69B,iBACpCzc,EAAenwB,KAAKurC,QAAQx8B,SAAS89B,kBAErCjvB,GAAgBsS,EAChBpS,EAAe9d,KAAKkR,MAAMqD,WAAa4b,EAE3C,OAAO9lB,EAAA,WAAiB41B,EAAYriB,EAAME,IAMpC4tB,EAAAprC,UAAAoV,YAAP,WACC9V,EAAAU,UAAMoV,YAAW3V,KAAAC,MACjBA,KAAKurC,QAAQ5jC,SAEf+jC,EAh4BA,CAAkChzB,GAw4BlCzX,EAAA,EAASC,kBAAgC,aAAIuqC,GAC7CxqC,EAAA,EAASC,kBAAwC,qBAAI+pC,GC5iCrD,IAAA2E,GAAA,SAAAhwC,GAUC,SAAAiwC,IAAA,IAAA/vC,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,wBAEjBH,EAAKI,eAwDP,OAtE2CC,EAAA,EAAA0vC,EAAAjwC,GA4C1CQ,OAAAC,eAAWwvC,EAAAvvC,UAAA,kBAAX,WACC,IAAIwvC,EAAkB9vC,KAAK8vC,gBAC3B,GAAIA,GAAmBA,EAAgB9vB,OACtC,OAAO8vB,EAAgB9vB,OAAOrF,sCAUhCva,OAAAC,eAAWwvC,EAAAvvC,UAAA,aAAX,WACC,OAAON,KAAK8vC,gBAAgBtvC,uCAS7BJ,OAAAC,eAAWwvC,EAAAvvC,UAAA,uBAAX,WACC,OAAwBN,KAAK+vC,8CAE/BF,EAtEA,CAA2C5E,IA6H3C+E,GAAA,SAAApwC,GA6CC,SAAAqwC,IAAA,IAAAnwC,EACCF,EAAAG,KAAAC,OAAOA,KAEPF,EAAKG,UAAY,gBACjBH,EAAKI,aAELJ,EAAKonB,YAAc,EACnBpnB,EAAK0nB,cAAgB,EACrB1nB,EAAKkd,kBAAoB,EACzBld,EAAKyrC,QAAQx8B,SAAS4C,YAAc,+BACpC7R,EAAKyrC,QAAQx8B,SAASmhC,YAAc,SAEpC,IAAIppB,EAAkB,IAAIC,EAAA,SAE1BjnB,EAAKunB,OAASP,EAAgBK,OAAO,cACrCrnB,EAAKgW,WAAW2B,WAAa,KAC7B3X,EAAKgW,WAAWyB,OAAS,KACzBzX,EAAKgW,WAAW4B,WAAa,KAC7B5X,EAAKgW,WAAW0B,OAAS,KAEzB1X,EAAKyhB,wBAAyB,EAE9BzhB,EAAK0sB,YAAa,EAGlB1sB,EAAKyrC,QAAQx8B,SAASywB,cAAe,IAoIvC,OA1MmCr/B,EAAA,EAAA8vC,EAAArwC,GAgFxBqwC,EAAA3vC,UAAAqV,gBAAV,SAA0BjT,EAA6BkT,GACpCA,EAAamB,eAAiBrU,EAChD9C,EAAAU,UAAMqV,gBAAe5V,KAAAC,KAAC0C,EAAUkT,IASvBq6B,EAAA3vC,UAAAoD,eAAV,WACC,OAAO,IAAIksC,IASLK,EAAA3vC,UAAA0gB,KAAP,SAAY1U,GAEX,IAAI6U,EAAwBnhB,KAAKohB,aAAaC,mBAS9C,OARGlb,EAAA,SAAemG,KACjB6U,EAAwB7U,GAGzBtM,KAAK6F,UAAUU,KAAK,SAAC7D,GACpBA,EAASotC,gBAAgBzV,gBAAgB,QAAS33B,EAASotC,gBAAgBzuC,OAAOb,MAAMA,SAGlFZ,EAAAU,UAAM6vC,SAAQpwC,KAAAC,KAACmhB,IAShB8uB,EAAA3vC,UAAAqhB,KAAP,SAAYrV,GAEX,IAAI6U,EAAwBnhB,KAAKohB,aAAaC,mBAC3Clb,EAAA,SAAemG,KACjB6U,EAAwB7U,GAGzB,IAAImV,EAAY7hB,EAAAU,UAAMqkB,SAAQ5kB,KAAAC,KAACmhB,GAK/B,OAHAnhB,KAAK6F,UAAUU,KAAK,SAAC7D,GACpBA,EAASotC,gBAAgBzV,gBAAgB,QAAS,KAE5C5Y,GAQDwuB,EAAA3vC,UAAAqd,cAAP,aAUOsyB,EAAA3vC,UAAA0Z,iBAAP,aAUOi2B,EAAA3vC,UAAAoiB,cAAP,SAAqBC,GAEhBA,IAIExc,EAAA,SAAewc,EAAO7M,aAAgB3P,EAAA,SAAewc,EAAO7M,cAChE6M,EAAO7M,gBAKTlW,EAAAU,UAAMoiB,cAAa3iB,KAAAC,KAAC2iB,IAUdstB,EAAA3vC,UAAA+7B,mBAAP,SAA0BC,GACzB,IAAI1U,EAAY0U,EAAOtU,WACnBF,EAAYwU,EAAOvU,YAEvBuU,EAAOoT,iBAEP,IAAItE,EAA2B9O,EAAOrV,YAAY0oB,GAAA,GAClDvE,EAAO5nB,aAAc,EACrBtc,EAAA,eAAuBlH,KAAMorC,EAAQ/xB,EAAA,GAGrC+xB,EAAO7gB,QAAQ,EAAG,EAAG,EAAG,GACxB6gB,EAAO1uB,MAAQkL,EACfwjB,EAAOzuB,OAASmL,EAEhB,IAAI6U,EAAiCL,EAAO55B,SAC5Ci6B,EAAeC,MAAQwO,EAAO5/B,KAC9BmxB,EAAeE,UAAYuO,EAAO5/B,MAEpCykC,EA1MA,CAAmCxE,IAkNnCxqC,EAAA,EAASC,kBAAiC,cAAI8uC,GAC9C/uC,EAAA,EAASC,kBAAyC,sBAAI0uC,oBC1UtDQ,GAAA,SAAAxwC,GA8CC,SAAAywC,IAAA,IAAAvwC,EACCF,EAAAG,KAAAC,OAAOA,YApBDF,EAAAwwC,QAqBNxwC,EAAKG,UAAY,kBAEjBH,EAAKuB,OAAOb,SAEZV,EAAKuB,OAAO0iC,MAEZjkC,EAAKuB,OAAOkvC,MAEZzwC,EAAKuB,OAAO2iC,MAEZlkC,EAAKuB,OAAOonC,MAEZ3oC,EAAK0wC,YAAYvT,UAAW,EAE5Bn9B,EAAKI,eAuPP,OArTqCC,EAAA,EAAAkwC,EAAAzwC,GA2E7BywC,EAAA/vC,UAAAmwC,YAAP,WACC,OAAO,GAQRrwC,OAAAC,eAAWgwC,EAAA/vC,UAAA,aAOX,WAEC,IAAIE,EAAQ,EAeZ,OAdKR,KAAKi9B,UAAoC,GAAxBj9B,KAAKi9B,SAAS90B,OAKnC7C,EAAA,KAAWtF,KAAKi9B,SAASz3B,WAAY,SAAC03B,GACrC,IAAIwT,EAAaxT,EAAM18B,MACnB2F,EAAA,SAAeuqC,KAClBlwC,GAASkwC,KAPXlwC,EAAQR,KAAKqB,OAAc,MAAE+4B,aAavB55B,OAxBR,SAAiBA,GAChBR,KAAK8X,SAAS,QAAStX,oCAwCxBJ,OAAAC,eAAWgwC,EAAA/vC,UAAA,eAAX,WACC,OAAIN,KAAKggB,OACDhgB,KAAKQ,MAAQR,KAAKggB,OAAOxf,MAAQ,IAElC,qCAURJ,OAAAC,eAAWgwC,EAAA/vC,UAAA,UAOX,WACC,OAAON,KAAKqB,OAAO0iC,GAAGvjC,WARvB,SAAcA,GACbR,KAAK8X,SAAS,KAAMtX,oCAiBrBJ,OAAAC,eAAWgwC,EAAA/vC,UAAA,UAOX,WACC,OAAON,KAAKqB,OAAO2iC,GAAGxjC,WARvB,SAAcA,GACbR,KAAK8X,SAAS,KAAMtX,oCAiBrBJ,OAAAC,eAAWgwC,EAAA/vC,UAAA,UAOX,WACC,OAAON,KAAKqB,OAAOkvC,GAAG/vC,WARvB,SAAcA,GACbR,KAAK8X,SAAS,KAAMtX,oCAiBrBJ,OAAAC,eAAWgwC,EAAA/vC,UAAA,UAOX,WACC,OAAON,KAAKqB,OAAOonC,GAAGjoC,WARvB,SAAcA,GACbR,KAAK8X,SAAS,KAAMtX,oCAerBJ,OAAAC,eAAWgwC,EAAA/vC,UAAA,YAOX,WACC,OAAON,KAAKgT,WAAW2H,UARxB,SAAgBA,GACf3a,KAAKiT,YAAY,OAAQ0H,oCAqB1Bva,OAAAC,eAAWgwC,EAAA/vC,UAAA,gBAOX,WACC,OAAON,KAAKgT,WAAWiqB,cARxB,SAAoBA,GACnBj9B,KAAKiT,YAAY,WAAYgqB,oCAmB9B78B,OAAAC,eAAWgwC,EAAA/vC,UAAA,aAAX,WACC,OAAKN,KAAKggB,OAIFhgB,KAAKggB,OAAO2wB,MAAQ,EAHpB,mCAeTvwC,OAAAC,eAAWgwC,EAAA/vC,UAAA,aAOX,WACC,IAAIs8B,EAAQ58B,KAAKgT,WAAW4pB,MAY5B,YAVa70B,GAAT60B,GACC58B,KAAKggB,SACR4c,EAAQ58B,KAAKggB,OAAO4c,YAGT70B,GAAT60B,GACC58B,KAAK2C,YACRi6B,EAAQ58B,KAAK2C,UAAU8vB,OAAOjmB,SAASxM,KAAK2C,UAAU8vB,OAAOzmB,KAAOhM,KAAKqM,QAGpEuwB,OApBR,SAAiBp8B,GAChBR,KAAKiT,YAAY,QAASzS,oCA0B3BJ,OAAAC,eAAWgwC,EAAA/vC,UAAA,cAWX,WACC,OAAON,KAAKyT,aAZb,SAAkBlO,GACbA,GAAUvF,KAAKyT,UACdzT,KAAKyT,UACRzT,KAAK2C,UAAU4C,OAAO+X,YAAYtd,KAAKyT,SACvCzT,KAAKyT,QAAQ4J,WAEdrd,KAAKyT,QAAUlO,EACfvF,KAAKuT,WAAW7B,KAAKnM,qCAOxB8qC,EArTA,CAAqChjB,GAkZrCujB,GAAA,SAAAhxC,GA2IC,SAAAixC,IAAA,IAAA/wC,EAGCF,EAAAG,KAAAC,OAAOA,KAzEDF,EAAAgxC,gBAAqDhxC,EAAKixC,SAoD1DjxC,EAAAkxC,UAAoB,EAsB1BlxC,EAAKG,UAAY,UAEjBH,EAAKmxC,UAAY,EACjBnxC,EAAKoxC,aAAe,EAEpBpxC,EAAK2yB,OAAS,IAAI0e,GAAA,EAClBrxC,EAAKsxC,QAAU,aAGf,IAAIlgC,EAAQpR,EAAKod,MAAMxL,KAAK,IAAIhQ,EAAA,GAChCwP,EAAM8a,MAAM5gB,UAAW,EACvB8F,EAAMmgC,cAAe,EAErB,IAAIC,EAAYpgC,EAAMjH,SACtBqnC,EAAUnlB,QAAS,EACnBmlB,EAAUphC,OAAOnB,SAAS3D,UAAW,EACrCkmC,EAAUrhC,MAAMlB,SAAS3D,UAAW,EACpCkmC,EAAUhmC,KAAKyD,SAAS3D,UAAW,EACnCkmC,EAAU/kB,UAAUxd,SAAS3D,UAAW,EACxCkmC,EAAU9mC,gBAAkB,IAC5B8mC,EAAUllB,KAAKhhB,UAAW,EAC1BkmC,EAAUnhC,SAAS/E,UAAW,EAG9B,IAAIgG,EAAQtR,EAAK2d,MAAM/L,KAAK,IAAIhQ,EAAA,GAChC0P,EAAM4a,MAAM5gB,UAAW,EACvBgG,EAAMigC,cAAe,EAErB,IAAIE,EAAYngC,EAAMnH,SACtBsnC,EAAUplB,QAAS,EACnBolB,EAAUrhC,OAAOnB,SAAS3D,UAAW,EACrCmmC,EAAUthC,MAAMlB,SAAS3D,UAAW,EACpCmmC,EAAUjmC,KAAKyD,SAAS3D,UAAW,EACnCmmC,EAAUhlB,UAAUxd,SAAS3D,UAAW,EACxCmmC,EAAU/mC,gBAAkB,IAC5B+mC,EAAUnlB,KAAKhhB,UAAW,EAC1BmmC,EAAUphC,SAAS/E,UAAW,EAC9BmmC,EAAU5f,UAAW,EAGrB7xB,EAAKoR,MAAQA,EACbpR,EAAKsR,MAAQA,EAEb,IAAMrC,EAAW,IAAIihC,UACrBlwC,EAAK0xC,gBAAkB,IAAIxvC,EAAA,EAAgD+M,GAC3EjP,EAAKyT,WAAW7B,KAAK,IAAI1P,EAAA,EAAmBlC,EAAK0xC,kBACjD1xC,EAAKyT,WAAW7B,KAAK3C,GAErBjP,EAAK8rB,cAAchS,OAAOC,GAAG,MAAO,WACnC/Z,EAAK2xC,oBAAoB3xC,EAAK4xC,qBAC5B3pC,GAAW,GAEdjI,EAAK0xC,gBAAgB53B,OAAOC,GAAG,YAAa,SAACoK,GAC5CA,EAAM0H,SAAS2d,YAAa,QAC1BvhC,GAAW,GAGdjI,EAAKI,eA4xBP,OAp+B6BC,EAAA,EAAA0wC,EAAAjxC,GA+M5BQ,OAAAC,eAAWwwC,EAAAvwC,UAAA,qBAkBX,WACC,OAAON,KAAK2xC,oBAnBb,SAAyBC,GAAzB,IAAA9xC,EAAAE,KACKA,KAAK2xC,gBAAkBC,IAC1B5xC,KAAK2xC,eAAiBC,EACtBA,EAAc5xB,OAAShgB,KACvB4xC,EAAc7mB,SACd6mB,EAAc9G,MAAM/7B,SAAS6K,OAAOC,GAAG,MAAO,SAACoK,GAC9C,IAAIvhB,EAA4BuhB,EAAMxE,OAAO/c,SAASkT,YACtD9V,EAAK2xC,oBAAoB/uC,GACzB5C,EAAK+xC,iBAAiBnvC,SACpBqF,GAAW,GAEd/H,KAAKuT,WAAW7B,KAAKkgC,qCAiBhBf,EAAAvwC,UAAA4F,aAAP,WAEClG,KAAKuF,OAAOoC,QAEZ/H,EAAAU,UAAM4F,aAAYnG,KAAAC,MAEdA,KAAK0xC,eACR1xC,KAAK0xC,cAAcr0B,UAGpB,IAAIy0B,EAAe9xC,KAAK6F,UAAUkJ,SAASgd,QAE3C/rB,KAAK0xC,cAAgBI,EAErBxsC,EAAA,KAAWtF,KAAK6F,UAAUL,WAAY,SAAC9C,GACtCA,EAASsd,OAAS8xB,IAGnBA,EAAa7U,SAAWj9B,KAAK6F,UAE7BisC,EAAa/N,GAAK,EAClB+N,EAAavB,GAAK,EAClBuB,EAAan3B,KAAO3a,KAAK+xC,UAEzB,IACI/zB,EADO,IACQhe,KAAK+nB,YAAc/nB,KAAKgoB,YAAe,IAE1D8pB,EAAa9N,GAHF,IAIX8N,EAAarJ,GAAKzqB,EAElBhe,KAAKkR,MAAMhO,IAAM,EACjBlD,KAAKkR,MAAMlN,IAPA,IASXhE,KAAKoR,MAAMlO,IAAM,EACjBlD,KAAKoR,MAAMpN,IAAMga,EAEjBhe,KAAKgyC,YAAYF,GAEjB9xC,KAAK6xC,iBAAiBC,IAUhBjB,EAAAvwC,UAAA0xC,YAAP,SAAmBhyB,EAAyBoxB,GAC3C,GAAIpxB,EAAQ,CACX,IAAIid,EAAWjd,EAAOid,SAEjBmU,IACJA,EAAUpxC,KAAKoxC,SAGD,aAAXA,GACHnU,EAAS57B,OAAO4yB,KAAK,SAAC3S,EAAGtM,GACxB,OAAOsM,EAAE9gB,MAAQwU,EAAExU,QAGN,cAAX4wC,GACHnU,EAAS57B,OAAO4yB,KAAK,SAAC3S,EAAGtM,GACxB,OAAOA,EAAExU,MAAQ8gB,EAAE9gB,QAIrBR,KAAKiyC,uBAAuB,GAE5BjyC,KAAK8wC,gBAAgB9wB,GAErB,IAAK,IAAIlM,EAAI,EAAGe,EAAMooB,EAAS90B,OAAQ2L,EAAIe,EAAKf,IAAK,CAEpD,IAAI62B,EAAO1N,EAASzwB,SAASsH,GAEzB62B,EAAK1N,UACRj9B,KAAKgyC,YAAYrH,MAaXkG,EAAAvwC,UAAAuxC,iBAAV,SAA2BnvC,GAA3B,IAAA5C,EAAAE,KACCA,KAAKkyC,eAML,IAJA,IAAIC,GAAkBzvC,GAGlB0vC,EAAiB1vC,EAASsd,YACLjY,GAAlBqqC,GACNpyC,KAAKqyC,WAAWD,GAChBD,EAAezgC,KAAK0gC,GACpBA,EAAiBA,EAAepyB,OAGjCmyB,EAAeG,UAEXtyC,KAAK4xC,gBACR5xC,KAAK4xC,cAAct3B,KAAO63B,GAI3BnyC,KAAKuyC,qBAAqB7vC,GAG1B4V,EAAA,KAAYtY,KAAKkyC,YAAa,SAAC3sC,IACM,GAAhCzF,EAAKyF,OAAOuW,QAAQvW,IACvBzF,EAAKyF,OAAOmM,KAAKnM,GAElBA,EAAO2oB,OAAS3oB,EAAOorC,SAUfE,EAAAvwC,UAAAiyC,qBAAV,SAA+B7vC,GAC9B,GAAIA,EAASu6B,UACAv6B,EAASiuC,MAET3wC,KAAKkxC,aAAelxC,KAAKixC,UAAW,CAE/CjxC,KAAKqyC,WAAW3vC,GAEhB,IAAK,IAAIoR,EAAI,EAAGA,EAAIpR,EAASu6B,SAAS90B,OAAQ2L,IAAK,CAClD,IAAIopB,EAAQx6B,EAASu6B,SAASzwB,SAASsH,GACnCopB,EAAMD,UACTj9B,KAAKuyC,qBAAqBrV,MAYrB2T,EAAAvwC,UAAA8wB,eAAV,WACC,OAAO,GAUEyf,EAAAvwC,UAAA+xC,WAAV,SAAqB3vC,GAArB,IAAA5C,EAAAE,KACC,IAAK0C,EAAS6C,OAAQ,CACrB,IAAIA,OAAM,EAENwJ,EAAW/O,KAAKwxC,gBAAgBvqC,OAAOvE,EAASiuC,MAAMnpC,aAEzDjC,EADGwJ,EACMA,EAASgd,QAGT/rB,KAAKuF,OAAOyC,UAGf2S,KAAOjY,EAASiY,KACvBpV,EAAO6sC,eAAiB1vC,EACxBA,EAAS6C,OAASA,EAElB,IAAIorC,EAAQjuC,EAASiuC,MACrBprC,EAAOorC,MAAQA,EAEf,IAAI/6B,EAAmBlT,EAASkT,YAC5BA,IACHrQ,EAAOod,OAAS/M,EAAY+M,QAG7B3iB,KAAKiyB,UAAU3U,YAAY/X,GAC3BA,EAAO+U,KAAO5X,EAASu6B,SAAS57B,OAChCkE,EAAOiG,KAAO9I,EAASk6B,MAEvBr3B,EAAOumC,iBAAiBnqB,KAAK,GAC7Bpc,EAAO2pB,iBAAiBvN,KAAK,GAE7Bpc,EAAOgmC,QAAQx8B,SAASQ,QAAQiK,IAAI,OAAQ,SAAChO,EAAMiU,GAClD,IAAI/c,EAAkC+c,EAAO/c,SAC7C,GAAIA,EAAU,CACb,IAAIotC,EAAkBptC,EAASotC,gBAC/B,GAAIA,EAGH,OAFArwB,EAAOjU,KAAOskC,EAAgBlT,MAC9Bnd,EAAOlQ,QAAQijC,OAAO,QACf1C,EAAgBlT,SAKtB58B,KAAKgxC,WAAatuC,EAASiuC,MAAQ3wC,KAAKkxC,cAAiBxuC,EAASu6B,UAAYv6B,EAASu6B,SAAS90B,OAAS,KAC5G5C,EAAOgmC,QAAQx8B,SAAS0jC,gBAAkBrtB,EAAA,EAAiBd,QACvDtkB,KAAKgxC,UACRzrC,EAAOgmC,QAAQx8B,SAAS6K,OAAOC,GAAG,MAAO,SAACoK,GACzC,IAAIlN,EAAwCkN,EAAMxE,OAAO/c,SAErDA,EAASiuC,MAAQ7wC,EAAKoxC,aACzBpxC,EAAK2xC,oBAAoB16B,EAAe+4B,gBAAgB9vB,QAGxDlgB,EAAK4yC,qBAAqB37B,IAGzB/W,UAAM+H,IAKZ/H,KAAKkyC,YAAYxgC,KAAKhP,EAAS6C,SAStBsrC,EAAAvwC,UAAAqyC,cAAV,SAAwBrmC,GAAxB,IAAAxM,EAAAE,KAECsF,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,IACO,GAAtCzF,EAAKoyC,YAAYp2B,QAAQvW,IAE5BA,EAAOumC,iBAAiBnqB,OACxBpc,EAAO2pB,iBAAiBvN,KAAKrV,KAI7B/G,EAAOumC,iBAAiB9qB,OACxBzb,EAAO2pB,iBAAiBlO,KAAK1U,GAEzB/G,EAAOorC,MAAQ7wC,EAAKoxC,cACvB3rC,EAAO2pB,iBAAiBvN,KAAKrV,OAW1BukC,EAAAvwC,UAAAoyC,qBAAP,SAA4BhwC,GAC3B1C,KAAKyxC,oBAAoB/uC,EAASotC,kBAS5Be,EAAAvwC,UAAAmxC,oBAAP,SAA2B/uC,GAA3B,IAAA5C,EAAAE,KACC,GAAI0C,GAAYA,EAASu6B,SAAU,CAClCj9B,KAAKkR,MAAMV,aAAa9N,EAASqhC,GAAIrhC,EAASshC,IAC9ChkC,KAAKoR,MAAMZ,aAAa9N,EAAS6tC,GAAI7tC,EAAS+lC,IAE9CzoC,KAAKkxC,aAAexuC,EAASiuC,MAC7B3wC,KAAK4yC,gBAAkBlwC,EAEvB1C,KAAK6xC,iBAAiBnvC,GAEtB,IAAImwC,EAAuB7yC,KAAKkR,MAAM2hC,sBAAwB7yC,KAAKoR,MAAMyhC,qBAErEA,IAAyBA,EAAqBnxB,cACjD1hB,KAAK8yC,eAAephC,KAAKmhC,GACzBA,EAAqBj5B,OAAOm0B,KAAK,iBAAkB,WAClDjuC,EAAK6yC,mBAIN3yC,KAAK2yC,kBASE9B,EAAAvwC,UAAA+C,sBAAV,WAECzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MAItBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,mBAWnCotC,EAAAvwC,UAAAoD,eAAV,WACC,OAAO,IAAI0sC,IAaZhwC,OAAAC,eAAWwwC,EAAAvwC,UAAA,iBAOX,WACC,OAAON,KAAKO,iBAAiB,kBAR9B,SAAqBC,GACpBR,KAAKS,iBAAiB,YAAaD,GAAO,oCAe3CJ,OAAAC,eAAWwwC,EAAAvwC,UAAA,oBAOX,WACC,OAAON,KAAKO,iBAAiB,qBAR9B,SAAwBC,GACvBR,KAAKS,iBAAiB,eAAgBD,GAAO,oCAkB9CJ,OAAAC,eAAWwwC,EAAAvwC,UAAA,eAIX,WACC,OAAON,KAAKO,iBAAiB,gBAL9B,SAAmBC,GAClBR,KAAKS,iBAAiB,UAAWD,GAAO,oCAY/BqwC,EAAAvwC,UAAAu3B,aAAV,WACC,OAAO,IAAImY,IASZ5vC,OAAAC,eAAWwwC,EAAAvwC,UAAA,gBAUX,WACC,OAAON,KAAK+xC,eAXb,SAAoBvxC,GACnBR,KAAK+xC,UAAYvxC,EACbR,KAAK0xC,gBACR1xC,KAAK0xC,cAAc/2B,KAAO3a,KAAK+xC,4CAiB1BlB,EAAAvwC,UAAAoiB,cAAP,SAAqBC,GAEpB,GAAIA,EAAQ,CAGX,GAAIxc,EAAA,SAAewc,EAAwB,kBAAMxc,EAAA,SAAewc,EAAwB,iBACvF,OAAQA,EAAwB,iBAC/B,IAAK,WACJA,EAAwB,gBAAI3iB,KAAK+wC,SACjC,MACD,IAAK,aACJpuB,EAAwB,gBAAI3iB,KAAK+yC,WACjC,MACD,IAAK,QACJpwB,EAAwB,gBAAI3iB,KAAKulC,MACjC,MACD,IAAK,OACJ5iB,EAAwB,gBAAI3iB,KAAKgzC,KACjC,MACD,IAAK,YACJrwB,EAAwB,gBAAI3iB,KAAKizC,UACjC,MACD,eACQtwB,EAAwB,gBAO9Bxc,EAAA,SAAewc,EAAOivB,iBAAmBzrC,EAAA,SAAewc,EAAOivB,cAAcpyB,QAChFmD,EAAOivB,cAAcpyB,KAAO,iBAG7B5f,EAAAU,UAAMoiB,cAAa3iB,KAAAC,KAAC2iB,KAWfkuB,EAAAvwC,UAAA4yC,eAAP,WACCtzC,EAAAU,UAAM4yC,eAAcnzC,KAAAC,MACpBA,KAAKgyC,YAAYhyC,KAAK4yC,kBAQhB/B,EAAAvwC,UAAAsD,kBAAP,WACChE,EAAAU,UAAMsD,kBAAiB7D,KAAAC,MACvBA,KAAKgyC,YAAYhyC,KAAK0xC,eAEtBpsC,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GACnCA,EAAO4tC,oBAGRnzC,KAAKyxC,oBAAoBzxC,KAAK0xC,gBAoDxBb,EAAAvwC,UAAAyyC,WAAP,SAAkB/yB,GACjB,IACClM,EACAggB,EAFGsf,EAAQpzB,EAAOid,SACfoW,EAAID,EAAMjrC,OACRmrC,EAAO,IAAIC,MAAMF,EAAI,GAE3B,IAAKC,EAAK,GAAKxf,EAAMhgB,EAAI,EAAGA,EAAIu/B,IAAKv/B,EACpCw/B,EAAKx/B,EAAI,GAAKggB,GAAOsf,EAAM5mC,SAASsH,GAAGtT,OAKxC,SAAAgzC,EAAmB1/B,EAAW2/B,EAAWjzC,EAAeujC,EAAYwM,EAAYvM,EAAYyE,GAC3F,GAAI30B,GAAK2/B,EAAI,EAAG,CACf,IAAI9I,EAAOyI,EAAM5mC,SAASsH,GAG1B,OAFA62B,EAAK5G,GAAKA,EAAI4G,EAAK4F,GAAKA,EACxB5F,EAAK3G,GAAKA,OAAI2G,EAAKlC,GAAKA,GAIzB,IAAIiL,EAAcJ,EAAKx/B,GACtB6/B,EAAenzC,EAAQ,EAAKkzC,EAC5BE,EAAI9/B,EAAI,EACR+/B,EAAKJ,EAAI,EAEV,KAAOG,EAAIC,GAAI,CACd,IAAIC,EAAMF,EAAIC,IAAO,EACjBP,EAAKQ,GAAOH,EAAaC,EAAIE,EAAM,EAClCD,EAAKC,EAGNH,EAAcL,EAAKM,EAAI,GAAON,EAAKM,GAAKD,GAAgB7/B,EAAI,EAAI8/B,KAAIA,EAEzE,IAAIG,EAAYT,EAAKM,GAAKF,EACzBM,EAAaxzC,EAAQuzC,EAEtB,GAAK/P,EAAKD,EAAO0E,EAAK8H,EAAK,CAC1B,IAAI0D,GAAMlQ,EAAKiQ,EAAahQ,EAAK+P,GAAavzC,EAC9CgzC,EAAU1/B,EAAG8/B,EAAGG,EAAWhQ,EAAIwM,EAAI0D,EAAIxL,GACvC+K,EAAUI,EAAGH,EAAGO,EAAYC,EAAI1D,EAAIvM,EAAIyE,OAClC,CACN,IAAIyL,GAAM3D,EAAKyD,EAAavL,EAAKsL,GAAavzC,EAC9CgzC,EAAU1/B,EAAG8/B,EAAGG,EAAWhQ,EAAIwM,EAAIvM,EAAIkQ,GACvCV,EAAUI,EAAGH,EAAGO,EAAYjQ,EAAImQ,EAAIlQ,EAAIyE,IAjC1C+K,CAAU,EAAGH,EAAGrzB,EAAOxf,MAAOwf,EAAO+jB,GAAI/jB,EAAOuwB,GAAIvwB,EAAOgkB,GAAIhkB,EAAOyoB,KA4ChEoI,EAAAvwC,UAAAilC,MAAP,SAAavlB,GAYZ,IAXA,IAMC2qB,EANG5G,EAAK/jB,EAAO+jB,GACZC,EAAKhkB,EAAOgkB,GACZuM,EAAKvwB,EAAOuwB,GACZ9H,EAAKzoB,EAAOyoB,GAEZ2K,EAAQpzB,EAAOid,SAElBnpB,GAAK,EACLu/B,EAAID,EAAMjrC,OACVyrC,EAAI5zB,EAAOxf,QAAUioC,EAAK8H,GAAMvwB,EAAOxf,QAE/BsT,EAAIu/B,IACZ1I,EAAOyI,EAAM5mC,SAASsH,IAASiwB,GAAKA,EAAI4G,EAAK3G,GAAKA,EAClD2G,EAAK4F,GAAKA,EAAI5F,EAAKlC,GAAK8H,GAAM5F,EAAKnqC,MAAQozC,GAUtC/C,EAAAvwC,UAAA0yC,KAAP,SAAYhzB,GAYX,IAXA,IAMC2qB,EANG5G,EAAK/jB,EAAO+jB,GACZC,EAAKhkB,EAAOgkB,GACZuM,EAAKvwB,EAAOuwB,GACZ9H,EAAKzoB,EAAOyoB,GAEZ2K,EAAQpzB,EAAOid,SAElBnpB,GAAK,EACLu/B,EAAID,EAAMjrC,OACVyrC,EAAI5zB,EAAOxf,QAAUwjC,EAAKD,GAAM/jB,EAAOxf,QAE/BsT,EAAIu/B,IACZ1I,EAAOyI,EAAM5mC,SAASsH,IAASy8B,GAAKA,EAAI5F,EAAKlC,GAAKA,EAClDkC,EAAK5G,GAAKA,EAAI4G,EAAK3G,GAAKD,GAAM4G,EAAKnqC,MAAQozC,GAUtC/C,EAAAvwC,UAAA2yC,UAAP,SAAiBjzB,GACD,EAAfA,EAAO2wB,MAAY3wC,KAAKulC,MAAMvlB,GAAUhgB,KAAKgzC,KAAKhzB,IAS5C6wB,EAAAvwC,UAAAywC,SAAP,SAAgB/wB,GAwBf,IAvBA,IAQIm0B,EAIA/L,EACAC,EAEA+L,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EArBAC,GAAS,EAAI3xC,KAAK4xC,KAAK,IAAM,EAE7B7Q,EAAK/jB,EAAO+jB,GACZC,EAAKhkB,EAAOgkB,GACZuM,EAAKvwB,EAAOuwB,GACZ9H,EAAKzoB,EAAOyoB,GAEZ2K,EAAQpzB,EAAOid,SAEf4X,EAAK,EACLC,EAAK,EACLzB,EAAID,EAAMjrC,OAGV3H,EAAQwf,EAAOxf,MASZq0C,EAAKxB,GAAG,CACdjL,EAAKpE,EAAKD,EAAIsE,EAAKI,EAAK8H,EAGxB,GAAG6D,EAAWhB,EAAM5mC,SAASsoC,KAAMt0C,aAAe4zC,GAAYU,EAAKzB,GAOnE,IANAgB,EAAWC,EAAWF,EAEtBM,EAAON,EAAWA,GADlBK,EAAQzxC,KAAKgB,IAAIqkC,EAAKD,EAAIA,EAAKC,IAAO7nC,EAAQm0C,IAE9CH,EAAWxxC,KAAKgB,IAAIswC,EAAWI,EAAMA,EAAOL,GAGrCS,EAAKzB,IAAKyB,EAAI,CAUpB,GATAV,GAAYD,EAAYf,EAAM5mC,SAASsoC,GAAIt0C,MACvC2zC,EAAYE,IACfA,EAAWF,GAERA,EAAYG,IACfA,EAAWH,GAEZO,EAAON,EAAWA,EAAWK,GAC7BF,EAAWvxC,KAAKgB,IAAIswC,EAAWI,EAAMA,EAAOL,IAC7BG,EAAU,CACxBJ,GAAYD,EAAW,MAExBK,EAAWD,EAIZ,IAAIQ,EAAM/0C,KAAK6F,UAAUkJ,SAASgd,QAClCgpB,EAAIv0C,MAAQ4zC,EACZW,EAAI/B,KAAO5K,EAAKC,EAChB0M,EAAI9X,SAAWmW,EAAM7N,MAAMsP,EAAIC,GAC/BC,EAAIhR,GAAKA,EACTgR,EAAIxE,GAAKA,EACTwE,EAAI/Q,GAAKA,EACT+Q,EAAItM,GAAKA,EAELsM,EAAI/B,MACP+B,EAAItM,GAAKjoC,EAAQ+vC,GAAMlI,EAAK+L,EAAW5zC,EAAQioC,EAC/CzoC,KAAKgzC,KAAK+B,KAGVA,EAAI/Q,GAAKxjC,EAAQujC,GAAMqE,EAAKgM,EAAW5zC,EAAQwjC,EAC/ChkC,KAAKulC,MAAMwP,IAEZv0C,GAAS4zC,EAAUS,EAAKC,IAUnBjE,EAAAvwC,UAAA00C,0BAAP,SAAiCtyC,EAA8BiY,GAClD,SAARA,GACH3a,KAAKsS,uBAIAu+B,EAAAvwC,UAAAyhB,iCAAP,SAAwCrf,EAA8BiY,GACzD,SAARA,GACH3a,KAAKsS,uBAQAu+B,EAAAvwC,UAAA20C,WAAP,WACC,IAAIC,EAASl1C,KAAKk1C,OAClB,GAAIA,EAAQ,CACX,IAAIC,KAEJ7vC,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GACf,GAAhBA,EAAOorC,QACLprC,EAAO6vC,gBACXD,EAAWzjC,KAAKnM,MAKnB2vC,EAAOp/B,WAAW6E,KAAO,OACzBu6B,EAAO56B,KAAO66B,IAOTtE,EAAAvwC,UAAAoV,YAAP,WAEC9V,EAAAU,UAAMoV,YAAW3V,KAAAC,MAEjBA,KAAK0xC,mBAAgB3pC,EAErB/H,KAAKuF,OAAOoC,QAER3H,KAAK4xC,eACR5xC,KAAK4xC,cAAcl8B,cAGpB1V,KAAKkR,MAAMwE,cACX1V,KAAKoR,MAAMsE,eAGbm7B,EAp+BA,CAA6BpmB,GA4+B7BxpB,EAAA,EAASC,kBAA2B,QAAI0vC,GC52CxC,IAAAyE,GAAA,SAAAz1C,GA6BC,SAAA01C,IAAA,IAAAx1C,EACCF,EAAAG,KAAAC,OAAOA,YAREF,EAAAkb,OAAS,IAAInC,EAAA,EAStB/Y,EAAKG,UAAY,kBAEjBH,EAAKyT,WAAW7B,KAAK5R,EAAKkb,QAE1Blb,EAAKI,eA0EP,OA7GqCC,EAAA,EAAAm1C,EAAA11C,GA8C7B01C,EAAAh1C,UAAAiL,kBAAP,SAAyBD,EAAYP,EAAkB1C,GACtD0C,IAAuB1C,EAAc0C,GAAYO,EAAKO,SACtD,IAAIkB,EAAgB/M,KAAKgN,gBAAgBjC,GAEzC,GAAIO,EAAKme,QAAS,CAEjB,IAAI2e,EAAapoC,KAAK6R,MAAM0jC,KACxBlN,EAAaroC,KAAK6R,MAAM2jC,KAExB1tB,EAAY9nB,KAAKy1C,YAErBnqC,EAAKkR,KAAOC,EAAA,QAAe1W,EAAGqiC,EAAIj7B,EAAGk7B,IAAQ5rB,EAAA,QAAe1W,EAAGqiC,EAAIj7B,EAAG2a,EAAIugB,IAAQ5rB,EAAA,QAAe1W,EAAG,EAAGoH,EAAG2a,IAE3G9nB,KAAK0hC,aAAap2B,EAAMyB,GAExB/M,KAAKqgC,iBAAiB/0B,EAAMP,EAAU,EAAG,IAQnCuqC,EAAAh1C,UAAAqhC,sBAAP,WACC/hC,EAAAU,UAAMqhC,sBAAqB5hC,KAAAC,MAE3B,IAAI8nB,EAAI9nB,KAAKy1C,YACTrN,EAAKpoC,KAAK6R,MAAM0jC,KAChBlN,EAAKroC,KAAK6R,MAAM2jC,KACpBx1C,KAAKmQ,SAASqM,KAAOC,EAAA,QAAe1W,EAAGqiC,EAAIj7B,EAAGk7B,IAAQ5rB,EAAA,QAAe1W,EAAGqiC,EAAIj7B,EAAG2a,EAAIugB,IAAQ5rB,EAAA,QAAe1W,EAAG,EAAGoH,EAAG2a,KASpH1nB,OAAAC,eAAWi1C,EAAAh1C,UAAA,aAUX,WACC,OAAON,KAAKgb,OAAOiC,WAXpB,SAAiBpL,GACZA,GACH7R,KAAKgb,OAAOuC,IAAI1L,EAAOA,EAAM+H,OAAOC,GAAG,kBAAmB7Z,KAAK01C,gBAAiB11C,MAAM,qCAiB9Es1C,EAAAh1C,UAAAo1C,gBAAV,SAA0BzxB,GACH,SAAlBA,EAAMkG,UAAyC,SAAlBlG,EAAMkG,UACtCnqB,KAAKa,cAIRy0C,EA7GA,CAAqC5nB,EAAA,GAqHrCzsB,EAAA,EAASC,kBAAmC,gBAAIm0C,GCtHhD,IAAAM,GAAA,SAAA/1C,GA6BC,SAAAg2C,IAAA,IAAA91C,EACCF,EAAAG,KAAAC,OAAOA,YAREF,EAAAkb,OAAS,IAAInC,EAAA,EAStB/Y,EAAKG,UAAY,kBACjBH,EAAKyT,WAAW7B,KAAK5R,EAAKkb,QAC1Blb,EAAKI,eA0EP,OA3GqCC,EAAA,EAAAy1C,EAAAh2C,GA4C7Bg2C,EAAAt1C,UAAAiL,kBAAP,SAAyBD,EAAYP,EAAkB1C,GACtD0C,IAAuB1C,EAAc0C,GAAYO,EAAKO,SAEtD,IAAIkB,EAAgB/M,KAAKgN,gBAAgBjC,GACzC,GAAIO,EAAKme,QAAS,CAEjB,IAAI2e,EAAapoC,KAAK6R,MAAM0jC,KACxBlN,EAAaroC,KAAK6R,MAAM2jC,KAExB5tB,EAAY5nB,KAAK61C,WAErBvqC,EAAKkR,KAAOC,EAAA,QAAe1W,EAAG,EAAGoH,EAAG,IAAOsP,EAAA,QAAe1W,EAAGqiC,EAAIj7B,EAAGk7B,IAAQ5rB,EAAA,QAAe1W,EAAG6hB,EAAIwgB,EAAIj7B,EAAGk7B,IAE1GroC,KAAK0hC,aAAap2B,EAAMyB,GAExB/M,KAAKqgC,iBAAiB/0B,EAAMP,EAAU,EAAG,IAQnC6qC,EAAAt1C,UAAAqhC,sBAAP,WACC/hC,EAAAU,UAAMqhC,sBAAqB5hC,KAAAC,MAE3B,IAAI4nB,EAAY5nB,KAAK61C,WACrB71C,KAAKmQ,SAASqM,KAAOC,EAAA,QAAe1W,EAAG,EAAGoH,EAAG,IACzCsP,EAAA,QAAe1W,EAAG6hB,EAAGza,EAAG,IACxBsP,EAAA,QAAe1W,EAAG6hB,EAAI5nB,KAAK6R,MAAM0jC,KAAMpoC,EAAGnN,KAAK6R,MAAM2jC,QAS1Dp1C,OAAAC,eAAWu1C,EAAAt1C,UAAA,aAUX,WACC,OAAON,KAAKgb,OAAOiC,WAXpB,SAAiBpL,GACZA,GACH7R,KAAKgb,OAAOuC,IAAI1L,EAAOA,EAAM+H,OAAOC,GAAG,kBAAmB7Z,KAAK01C,gBAAiB11C,MAAM,qCAiB9E41C,EAAAt1C,UAAAo1C,gBAAV,SAA0BzxB,GACH,SAAlBA,EAAMkG,UAAyC,SAAlBlG,EAAMkG,UACtCnqB,KAAKa,cAIR+0C,EA3GA,CAAqChoB,EAAA,gBCjCrCkoB,GAAA,SAAAl2C,GAUC,SAAAm2C,IAAA,IAAAj2C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,yBACjBH,EAAKI,eAGP,OAhB4CC,EAAA,EAAA41C,EAAAn2C,GAgB5Cm2C,EAhBA,CAA4C9K,IAgF5C+K,GAAA,SAAAp2C,GA+CC,SAAAq2C,IAAA,IAAAn2C,EACCF,EAAAG,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,iBAEjBH,EAAKyrC,QAAQx8B,SAASmnC,SAAStc,eAAgB,EAC/C95B,EAAKyrC,QAAQx8B,SAAS8S,YAAY7O,WAAW6L,SAAU,EAEvD/e,EAAKI,eA4FP,OAnJoCC,EAAA,EAAA81C,EAAAr2C,GA6DnCQ,OAAAC,eAAW41C,EAAA31C,UAAA,wBAAX,WACC,OAAIN,KAAK6R,OAAS7R,KAAK6R,MAAMi6B,iBACrB9rC,KAAK6R,MAAMi6B,iBAGX9rC,KAAK+rC,mDAUPkK,EAAA31C,UAAA8rC,wBAAP,SAA+B1pC,GAC9B9C,EAAAU,UAAM8rC,wBAAuBrsC,KAAAC,KAAC0C,GAC3BA,EAAS0oC,SACX1oC,EAAS0oC,OAAOhD,GAAKpoC,KAAKooC,GAC1B1lC,EAAS0oC,OAAO/C,GAAKroC,KAAKqoC,KAUrB4N,EAAA31C,UAAAwhB,qBAAP,WACCliB,EAAAU,UAAMwhB,qBAAoB/hB,KAAAC,MACvBA,KAAK6R,OACP7R,KAAK6R,MAAMuD,oBASH6gC,EAAA31C,UAAAgvC,qBAAV,WACC,OAAO,IAAI6G,GAAA,GAWZ/1C,OAAAC,eAAW41C,EAAA31C,UAAA,aAUX,WACC,OAAON,KAAKO,iBAAiB,cAX9B,SAAiBC,GAChBR,KAAKS,iBAAiB,QAASD,GAAO,GACvBR,KAAKurC,QAAQx8B,SACnBmnC,SAAS1Q,MAAQhlC,mCAiB3BJ,OAAAC,eAAW41C,EAAA31C,UAAA,aAUX,WACC,OAAON,KAAKO,iBAAiB,cAX9B,SAAiBC,GAChBR,KAAKS,iBAAiB,QAASD,GAChBR,KAAKurC,QAAQx8B,SACnBmnC,SAASjpC,MAAQzM,mCAU5By1C,EAnJA,CAAoCxK,IA2JpCxqC,EAAA,EAASC,kBAAkC,eAAI80C,GAC/C/0C,EAAA,EAASC,kBAA0C,uBAAI40C,GClOvD,IAAAM,GAAA,SAAAx2C,GAEC,SAAAy2C,IAAA,IAAAv2C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,oBACjBH,EAAKI,eAGP,OARuCC,EAAA,EAAAk2C,EAAAz2C,GAQvCy2C,EARA,CAAuChpB,GAoEvCipB,GAAA,SAAA12C,GA0CC,SAAA22C,IAAA,IAAAz2C,EAGCF,EAAAG,KAAAC,OAAOA,KApBEF,EAAA2tB,eAAyC4nB,GAKzCv1C,EAAA6tB,eAAyCgoB,GAgBlD71C,EAAKG,UAAY,YAGjBH,EAAK0lC,MAAQ,GACb1lC,EAAKmN,MAAQ,GAGb,IAAI6+B,EAAmBhsC,EAAKmvB,gBAAgBhI,YAAYV,EAAA,UACxDulB,EAAiBtoB,aAAc,EAC/BsoB,EAAiB7yB,YAAa,EAC9B6yB,EAAiB9d,OAAS,OAC1BluB,EAAKgsC,iBAAmBA,EAExBhsC,EAAKgsC,iBAAiBpgC,KAAO5L,EAAKmnB,YAAY5N,EAAA,GAG9CvZ,EAAKI,eA6KP,OA3O+BC,EAAA,EAAAo2C,EAAA32C,GAuE9BQ,OAAAC,eAAWk2C,EAAAj2C,UAAA,aASX,WACC,OAAON,KAAKO,iBAAiB,cAV9B,SAAiBC,GAChBR,KAAKS,iBAAiB,QAASD,GAC/BR,KAAKw2C,YACLx2C,KAAKgmC,uDAgBN5lC,OAAAC,eAAWk2C,EAAAj2C,UAAA,aASX,WACC,OAAON,KAAKO,iBAAiB,cAV9B,SAAiBC,GAChBR,KAAKS,iBAAiB,QAASD,GAC/BR,KAAKw2C,YACLx2C,KAAKgmC,uDAgBN5lC,OAAAC,eAAWk2C,EAAAj2C,UAAA,YAAX,WACC,OAAO+J,EAAA,IAAUrK,KAAKiN,OAASjN,KAAKwlC,uCASrCplC,OAAAC,eAAWk2C,EAAAj2C,UAAA,YAAX,WACC,OAAQ+J,EAAA,IAAUrK,KAAKiN,OAASjN,KAAKwlC,uCAQ/B+Q,EAAAj2C,UAAA4yC,eAAP,WACCtzC,EAAAU,UAAM4yC,eAAcnzC,KAAAC,MACpBA,KAAKy2C,cAOIF,EAAAj2C,UAAAk2C,UAAV,WAECx2C,KAAK+tB,eAAewB,WAAavvB,KAAKw1C,KACtCx1C,KAAK+tB,eAAeoC,aAAenwB,KAAKu1C,KAEpCv1C,KAAK+wB,aACR/wB,KAAK+wB,WAAWsX,GAAKroC,KAAKw1C,KAC1Bx1C,KAAK+wB,WAAWqX,GAAKpoC,KAAKu1C,MAGvBv1C,KAAKqxB,aACRrxB,KAAKqxB,WAAWgX,GAAKroC,KAAKw1C,KAC1Bx1C,KAAKqxB,WAAW+W,GAAKpoC,KAAKu1C,MAG3Bv1C,KAAKy2C,aAEL72C,EAAAU,UAAMk2C,UAASz2C,KAAAC,OAONu2C,EAAAj2C,UAAAm2C,WAAV,eAAA32C,EAAAE,KACKoC,EAAgB,EAChB0R,EAAI,EACRxO,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GAC/BA,aAAkBywC,MAEhBzwC,EAAOsmC,WAAa/3B,EAAI,GAC5B1R,IAGDmD,EAAOmxC,WAAat0C,EAAQ,EAC5B0R,OAIF,IAAI6iC,EAAY,EAEhBrxC,EAAA,KAAWtF,KAAKuF,OAAOC,WAAY,SAACD,GACnC,GAAIA,aAAkBywC,GAAgB,CAErCzwC,EAAOigC,MAAQ1lC,EAAK0lC,MAAQ,EAC5BjgC,EAAO0H,MAAQnN,EAAKmN,MACpB1H,EAAO6iC,GAAKtoC,EAAK0lC,MAAQ,EAAUn7B,EAAA,IAAUvK,EAAKmN,OAAU1H,EAAiB,WAC7EA,EAAO8iC,IAAMvoC,EAAK0lC,MAAQ,EAAUn7B,EAAA,IAAUvK,EAAKmN,OAAU1H,EAAiB,WAE9E,IAAIqxC,EAAY,EAChBrxC,EAAOgmC,QAAQhlC,KAAK,SAAC6kC,GACpBA,EAAOld,OAAS,IAAO0oB,EAAID,EAAwB,IAApBpxC,EAAOmxC,WACtCE,MAGDD,OAGF32C,KAAK62C,eASCN,EAAAj2C,UAAAoiB,cAAP,SAAqBC,GAEpB,GAAIA,GAGCxc,EAAA,SAAewc,EAAOpd,SAAWY,EAAA,QAAcwc,EAAOpd,QACzD,IAAK,IAAIuO,EAAI,EAAGe,EAAM8N,EAAOpd,OAAO4C,OAAQ2L,EAAIe,EAAKf,IACpD6O,EAAOpd,OAAOuO,GAAG0L,KAAOmD,EAAOpd,OAAOuO,GAAG0L,MAAQ,iBAMpD5f,EAAAU,UAAMoiB,cAAa3iB,KAAAC,KAAC2iB,IAIX4zB,EAAAj2C,UAAAu2C,YAAV,WACC,IAAIjvB,EAAY5nB,KAAKqmB,cAAc2B,WAC/BF,EAAY9nB,KAAKqmB,cAAc0B,YAE/BqgB,EAAapoC,KAAKu1C,KAClBlN,EAAaroC,KAAKw1C,KAElBh5B,EAAOC,EAAA,QAAe1W,EAAG,EAAGoH,EAAG,IAAOsP,EAAA,QAAe1W,EAAGqiC,EAAIj7B,EAAGk7B,IAAQ5rB,EAAA,QAAe1W,EAAG6hB,EAAIwgB,EAAIj7B,EAAGk7B,IAAQ5rB,EAAA,QAAe1W,EAAG6hB,EAAIwgB,EAAIj7B,EAAG2a,EAAIugB,IAAQ5rB,EAAA,QAAe1W,EAAG6hB,EAAGza,EAAG2a,IAAOrL,EAAA,QAAe1W,EAAG6hB,EAAGza,EAAG2a,IAAOrL,EAAA,QAAe1W,EAAG,EAAGoH,EAAG2a,IAAOrL,EAAA,YAElPqvB,EAAmB9rC,KAAK8rC,iBACxBA,GAAoBA,EAAiBpgC,OACxCogC,EAAiBpgC,KAAK8Q,KAAOA,IAGhC+5B,EA3OA,CAA+B9rB,GAmP/BxpB,EAAA,EAASC,kBAA6B,UAAIo1C,8CClS1CQ,GAAA,SAAAl3C,GA8BC,SAAAm3C,IAAA,IAAAj3C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,cACjBH,EAAKkuB,OAAS,SA+BhB,OAhEiC7tB,EAAA,EAAA42C,EAAAn3C,GAuCtBm3C,EAAAz2C,UAAA02C,aAAV,WACCp3C,EAAAU,UAAM02C,aAAYj3C,KAAAC,MAElBA,KAAKi3C,QAAUj3C,KAAKinB,YAAYuV,EAAA,GAChCx8B,KAAKi3C,QAAQzzB,aAAc,EAE3BxjB,KAAKk3C,SAAWl3C,KAAKinB,YAAYuV,EAAA,GACjCx8B,KAAKk3C,SAAS1zB,aAAc,GAQtBuzB,EAAAz2C,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACX5Q,KAAKi3C,SACRj3C,KAAKi3C,QAAQtmC,SAASC,EAAOqmC,SAE1Bj3C,KAAKk3C,UACRl3C,KAAKk3C,SAASvmC,SAASC,EAAOsmC,WAIjCH,EAhEA,CAAiCxH,GAAA,GAwEjCtuC,EAAA,EAASC,kBAA+B,YAAI41C,GC5F5C,IAAAK,GAAA,SAAAv3C,GAgBC,SAAAw3C,IAAA,IAAAt3C,EACCF,EAAAG,KAAAC,OAAOA,YAEPF,EAAKuB,OAAOg2C,aACZv3C,EAAKuB,OAAOi2C,aACZx3C,EAAKuB,OAAOk2C,cACZz3C,EAAKuB,OAAOm2C,cAEZ13C,EAAKG,UAAY,4BAEjBH,EAAKI,eAsGP,OAhI+CC,EAAA,EAAAi3C,EAAAx3C,GAkC9CQ,OAAAC,eAAW+2C,EAAA92C,UAAA,iBAOX,WACC,OAAON,KAAKqB,OAAOg2C,UAAU72C,WAR9B,SAAqBA,GACpBR,KAAK8X,SAAS,YAAatX,oCAe5BJ,OAAAC,eAAW+2C,EAAA92C,UAAA,iBAOX,WACC,OAAON,KAAKqB,OAAOi2C,UAAU92C,WAR9B,SAAqBA,GACpBR,KAAK8X,SAAS,YAAatX,oCAe5BJ,OAAAC,eAAW+2C,EAAA92C,UAAA,kBAOX,WACC,OAAON,KAAKqB,OAAOk2C,WAAW/2C,WAR/B,SAAsBA,GACrBR,KAAK8X,SAAS,aAActX,oCAe7BJ,OAAAC,eAAW+2C,EAAA92C,UAAA,kBAOX,WACC,OAAON,KAAKqB,OAAOm2C,WAAWh3C,WAR/B,SAAsBA,GACrBR,KAAK8X,SAAS,aAActX,oCAiB7BJ,OAAAC,eAAW+2C,EAAA92C,UAAA,mBAOX,WACC,OAAON,KAAKqB,OAAOkW,OAAO/W,WAR3B,SAAuBA,GACtBR,KAAK8X,SAAS,SAAUtX,oCAiBzBJ,OAAAC,eAAW+2C,EAAA92C,UAAA,mBAOX,WACC,OAAON,KAAKqB,OAAOmW,OAAOhX,WAR3B,SAAuBA,GACtBR,KAAK8X,SAAS,SAAUtX,oCAS1B42C,EAhIA,CAA+CnM,IA0N/CwM,GAAA,SAAA73C,GAuDC,SAAA83C,IAAA,IAAA53C,EACCF,EAAAG,KAAAC,OAAOA,KACPF,EAAKG,UAAY,oBAEjBH,EAAK0nB,cAAgB,EAErB,IAAIV,EAAkB,IAAIC,EAAA,EACtB4wB,EAAgB7wB,EAAgBK,OAAO,YACvCywB,EAAgB9wB,EAAgBK,OAAO,mBAE3CrnB,EAAK+3C,kBAAkB7kC,WAAWxH,KAAOosC,EACzC93C,EAAK+3C,kBAAkB7kC,WAAWqU,OAASuwB,EAE3C93C,EAAKg4C,kBAAkB9kC,WAAWxH,KAAOmsC,EACzC73C,EAAKg4C,kBAAkB9kC,WAAWqU,OAASswB,EAE3C73C,EAAKI,eAmQP,OA1UuCC,EAAA,EAAAu3C,EAAA93C,GA8E5B83C,EAAAp3C,UAAA+C,sBAAV,WACCzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MACtBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,wBAUnCi0C,EAAAp3C,UAAAoD,eAAV,WACC,OAAO,IAAIyzC,IASLO,EAAAp3C,UAAA8rC,wBAAP,SAA+B1pC,GAC9B9C,EAAAU,UAAM8rC,wBAAuBrsC,KAAAC,KAAC0C,GAC9B1C,KAAK+3C,oBAAoBr1C,IAGhBg1C,EAAAp3C,UAAAy3C,oBAAV,SAA8Br1C,GAC7B,IAAI0oC,EAAsB1oC,EAAS0oC,OACnC,GAAIA,EAAQ,CACX,IAAI4M,EAAU5M,EAAO6L,QACjBgB,EAAW7M,EAAO8L,SAEtB,GAAIl3C,KAAKyF,UAAYzF,KAAKkR,MAAO,CAChC,IAAInL,EAAYqlC,EAAOpjB,WAAa,EAEpCgwB,EAAQjyC,EAAIA,EACZkyC,EAASlyC,EAAIA,EAEb,IAAI6oC,EAAOlsC,EAAS6V,gBAAgBvY,KAAK0b,YACrCw8B,EAAQx1C,EAAS6V,gBAAgBvY,KAAKyb,QAEtC08B,EAAQn4C,KAAKoR,MAAMzD,KAAKjL,EAAU1C,KAAK0b,YACvC08B,EAASp4C,KAAKoR,MAAMzD,KAAKjL,EAAU1C,KAAKyb,QACxC48B,EAAOr4C,KAAKoR,MAAMzD,KAAKjL,EAAU1C,KAAKs4C,WACtCC,EAAQv4C,KAAKoR,MAAMzD,KAAKjL,EAAU1C,KAAKw4C,YAEvC37B,EAASuuB,EAAOvuB,OAEpBm7B,EAAQvP,GAAK4P,EAAOx7B,EACpBo7B,EAASxP,GAAK8P,EAAQ17B,EAElB+xB,EAAOsJ,GACVF,EAAQtP,GAAKyP,EAAQt7B,EACrBo7B,EAASvP,GAAK0P,EAASv7B,IAGvBm7B,EAAQtP,GAAK0P,EAASv7B,EACtBo7B,EAASvP,GAAKyP,EAAQt7B,GAIxB,GAAI7c,KAAKyF,UAAYzF,KAAKoR,MAAO,CAChC,IAAIjE,EAAYi+B,EAAOrjB,YAAc,EAErCiwB,EAAQ7qC,EAAIA,EACZ8qC,EAAS9qC,EAAIA,EAEb,IAAIsrC,EAAO/1C,EAAS6V,gBAAgBvY,KAAKsb,YACrCo9B,EAAQh2C,EAAS6V,gBAAgBvY,KAAKqb,QAEtCs9B,EAAQ34C,KAAKkR,MAAM1D,KAAK9K,EAAU1C,KAAKsb,YACvCs9B,EAAS54C,KAAKkR,MAAM1D,KAAK9K,EAAU1C,KAAKqb,QACxCw9B,EAAO74C,KAAKkR,MAAM1D,KAAK9K,EAAU1C,KAAK84C,WACtCC,EAAQ/4C,KAAKkR,MAAM1D,KAAK9K,EAAU1C,KAAKg5C,YAEvCl8B,EAASsuB,EAAOtuB,OAEpBk7B,EAAQhU,GAAK6U,EAAO/7B,EACpBm7B,EAASjU,GAAK+U,EAAQj8B,EAElB27B,EAAOC,GACVV,EAAQvb,GAAKkc,EAAQ77B,EACrBm7B,EAASxb,GAAKmc,EAAS97B,IAGvBk7B,EAAQvb,GAAKmc,EAAS97B,EACtBm7B,EAASxb,GAAKkc,EAAQ77B,GAIxBxX,EAAA,KAAWtF,KAAKqc,WAAW7W,WAAY,SAAC+vB,GAEvC,IAAIiZ,EAAc9rC,EAAS+rC,cAAcxnC,OAAOsuB,EAAU/uB,KAC1D,GAAIgoC,EAAa,CAChB,IAAIyK,EAAezK,EAAYyI,QAC/BgC,EAAalzC,EAAIiyC,EAAQjyC,EACzBkzC,EAAa9rC,EAAI6qC,EAAQ7qC,EACzB8rC,EAAajV,GAAKgU,EAAQhU,GAC1BiV,EAAaxc,GAAKub,EAAQvb,GAC1Bwc,EAAaxQ,GAAKuP,EAAQvP,GAC1BwQ,EAAavQ,GAAKsP,EAAQtP,GAG1B,IAAIwQ,EAAgB1K,EAAY0I,SAChCgC,EAAcnzC,EAAIkyC,EAASlyC,EAC3BmzC,EAAc/rC,EAAI8qC,EAAS9qC,EAC3B+rC,EAAclV,GAAKiU,EAASjU,GAC5BkV,EAAczc,GAAKwb,EAASxb,GAC5Byc,EAAczQ,GAAKwP,EAASxP,GAC5ByQ,EAAcxQ,GAAKuP,EAASvP,QAYhCtoC,OAAAC,eAAWq3C,EAAAp3C,UAAA,iBAAX,WACC,OAAON,KAAKm5C,4CASb/4C,OAAAC,eAAWq3C,EAAAp3C,UAAA,iBAAX,WACC,OAAON,KAAKo5C,4CASbh5C,OAAAC,eAAWq3C,EAAAp3C,UAAA,kBAAX,WACC,OAAON,KAAKq5C,6CASbj5C,OAAAC,eAAWq3C,EAAAp3C,UAAA,kBAAX,WACC,OAAON,KAAKs5C,6CAMH5B,EAAAp3C,UAAA+Z,aAAV,WAGC,GAFAza,EAAAU,UAAM+Z,aAAYta,KAAAC,MAEdA,KAAKyF,UAAYzF,KAAKkR,MAAO,CAChC,IAAIsK,EAAyBD,EAAA,WAAkBvb,KAAKoR,MAAM5O,eAC1DxC,KAAKo5C,WAAgD,MAAQ59B,EAAiB,IAC9Exb,KAAKs5C,YAAiD,OAAS99B,EAAiB,IAGjF,GAAIxb,KAAKyF,UAAYzF,KAAKoR,MAAO,CAChC,IAAIgK,EAAyBG,EAAA,WAAkBvb,KAAKkR,MAAM1O,eAC1DxC,KAAKm5C,WAAgD,MAAQ/9B,EAAiB,IAC9Epb,KAAKq5C,YAAiD,OAASj+B,EAAiB,IAGjFpb,KAAK6b,cAAc7b,KAAKkR,MAAYlR,KAAK+Y,cAAoB/Y,KAAKm5C,YAClEn5C,KAAK6b,cAAc7b,KAAKkR,MAAYlR,KAAK+Y,cAAoB/Y,KAAKq5C,aAElEr5C,KAAK6b,cAAc7b,KAAKoR,MAAYpR,KAAKgZ,cAAoBhZ,KAAKo5C,YAClEp5C,KAAK6b,cAAc7b,KAAKoR,MAAYpR,KAAKgZ,cAAoBhZ,KAAKs5C,cAU5D5B,EAAAp3C,UAAA+7B,mBAAP,SAA0BC,GAEzB,IAAI1U,EAAY0U,EAAOtU,WACnBF,EAAYwU,EAAOvU,YAEvBuU,EAAOoT,iBAEP,IAII6J,EACAC,EALApO,EAAsB9O,EAAOrV,YAAY6vB,IAC7C1L,EAAO5nB,aAAc,EACrB4nB,EAAOz6B,SAAc3Q,KAAKurC,QAAQx8B,UAKlC,IAAImoC,EAAiB9L,EAAO6L,QACxBA,EAAgB7L,EAAO8L,SAEvBl3C,KAAKyF,UAAYzF,KAAKoR,OACzBmoC,EAAK3xB,EAAI,EACT4xB,EAAK1xB,EAELovB,EAAS/pC,EAAI2a,EAAI,EACjBmvB,EAAQ9pC,EAAI2a,EAAI,EAEhBovB,EAASza,GAAK7U,EAAI,EAClBqvB,EAAQxa,GAAK7U,EAAI,EACjBqvB,EAAQlxC,EAAI6hB,EAAI,EAAI,EACpBwjB,EAAOA,OAAOrlC,EAAI6hB,EAAI,IAGtB2xB,EAAK3xB,EACL4xB,EAAK1xB,EAAI,EACTovB,EAASnxC,EAAI6hB,EAAI,EACjBqvB,EAAQlxC,EAAI6hB,EAAI,EAEhBsvB,EAASxO,GAAK5gB,EAAI,EAClBmvB,EAAQvO,GAAK5gB,EAAI,EACjBmvB,EAAQ9pC,EAAI2a,EAAI,EAAI,EACpBsjB,EAAOA,OAAOj+B,EAAI2a,EAAI,GAEvBsjB,EAAO1uB,MAAQ68B,EACfnO,EAAOzuB,OAAS68B,EAEhBtyC,EAAA,eAAuBlH,KAAMs8B,EAAQjjB,EAAA,GACrCnS,EAAA,eAAuBlH,KAAKurC,QAAQx8B,SAAUq8B,EAAQ/xB,EAAA,GAEtD+xB,EAAO/jB,OAASrnB,KAAK83C,kBAAkB9kC,WAAWqU,OAClD+jB,EAAO5/B,KAAO4/B,EAAO/jB,OAErB,IAAIsV,EAAiCL,EAAO55B,SAC5Ci6B,EAAeC,MAAQwO,EAAO5/B,KAC9BmxB,EAAeE,UAAYuO,EAAO5/B,MAQzBksC,EAAAp3C,UAAAgvC,qBAAV,WACC,OAAO,IAAIwH,IAGbY,EA1UA,CAAuCjM,IAkVvCxqC,EAAA,EAASC,kBAAqC,kBAAIu2C,GAClDx2C,EAAA,EAASC,kBAA6C,0BAAIi2C,GCzhB1D,IAAAsC,GAAA,SAAA75C,GAoCC,SAAA85C,IAAA,IAAA55C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,OACjBH,EAAKkuB,OAAS,SAoChB,OA3E0B7tB,EAAA,EAAAu5C,EAAA95C,GA4Cf85C,EAAAp5C,UAAA02C,aAAV,WAGCh3C,KAAK25C,SAAW35C,KAAKinB,YAAYuV,EAAA,GACjCx8B,KAAK25C,SAASn2B,aAAc,EAE5BxjB,KAAK45C,YAAc55C,KAAKinB,YAAYuV,EAAA,GACpCx8B,KAAK45C,YAAYp2B,aAAc,EAE/BxjB,KAAK65C,UAAY75C,KAAKinB,YAAYuV,EAAA,GAClCx8B,KAAK65C,UAAUr2B,aAAc,GAQvBk2B,EAAAp5C,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACX5Q,KAAK25C,UACR35C,KAAK25C,SAAShpC,SAASC,EAAO+oC,UAE3B35C,KAAK45C,aACR55C,KAAK45C,YAAYjpC,SAASC,EAAOgpC,aAE9B55C,KAAK65C,WACR75C,KAAK65C,UAAUlpC,SAASC,EAAOipC,YAIlCH,EA3EA,CAA0B5C,IAmF1B71C,EAAA,EAASC,kBAAwB,KAAIu4C,GCzGrC,IAAAK,GAAA,SAAAl6C,GAgBC,SAAAm6C,IAAA,IAAAj6C,EACCF,EAAAG,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,qBAEjBH,EAAKI,eAEP,OAvBwCC,EAAA,EAAA45C,EAAAn6C,GAuBxCm6C,EAvBA,CAAwC5C,IAuExC6C,GAAA,SAAAp6C,GAmCC,SAAAq6C,IAAA,IAAAn6C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,aAEjBH,EAAKI,eAuMP,OA9OgCC,EAAA,EAAA85C,EAAAr6C,GA8CrBq6C,EAAA35C,UAAA+C,sBAAV,WACCzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MACtBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,iBAUnCw2C,EAAA35C,UAAAoD,eAAV,WACC,OAAO,IAAIo2C,IAIFG,EAAA35C,UAAAy3C,oBAAV,SAA8Br1C,GAC7B,IAAI0oC,EAAe1oC,EAAS0oC,OAC5B,GAAIA,EAAQ,CACX,IAAI8O,EAAW9O,EAAOuO,SAClBQ,EAAc/O,EAAOwO,YACrBQ,EAAYhP,EAAOyO,UAEvB,GAAI75C,KAAKyF,UAAYzF,KAAKkR,MAAO,CAChC,IAAInL,EAAYqlC,EAAOpjB,WAAa,EACpCmyB,EAAYp0C,EAAIA,EAGhBrD,EAAS6V,gBAAgBvY,KAAK0b,YAC9BhZ,EAAS6V,gBAAgBvY,KAAKyb,QAE9B,IAAI08B,EAAQn4C,KAAKoR,MAAMzD,KAAKjL,EAAU1C,KAAK0b,YACvC08B,EAASp4C,KAAKoR,MAAMzD,KAAKjL,EAAU1C,KAAKyb,QACxC48B,EAAOr4C,KAAKoR,MAAMzD,KAAKjL,EAAU1C,KAAKs4C,WACtCC,EAAQv4C,KAAKoR,MAAMzD,KAAKjL,EAAU1C,KAAKw4C,YAEvC37B,EAASuuB,EAAOvuB,OAEpBq9B,EAASzR,GAAK0P,EAAQt7B,EACtBq9B,EAASxR,GAAKyP,EAAQt7B,EACtBq9B,EAASlW,GAAK,EACdkW,EAASzd,GAAK12B,EAEdq0C,EAAU3R,GAAK2P,EAASv7B,EACxBu9B,EAAU1R,GAAK0P,EAASv7B,EACxBu9B,EAAUpW,GAAKj+B,EACfq0C,EAAU3d,GAAK,EAAI12B,EAEnBo0C,EAAY1R,GAAK8P,EAAQ17B,EACzBs9B,EAAYzR,GAAK2P,EAAOx7B,EAGzB,GAAI7c,KAAKyF,UAAYzF,KAAKoR,MAAO,CAChC,IAAIjE,EAAYi+B,EAAOrjB,YAAc,EAErCoyB,EAAYhtC,EAAIA,EAGhBzK,EAAS6V,gBAAgBvY,KAAKsb,YAC9B5Y,EAAS6V,gBAAgBvY,KAAKqb,QAE9B,IAAIs9B,EAAQ34C,KAAKkR,MAAM1D,KAAK9K,EAAU1C,KAAKsb,YACvCs9B,EAAS54C,KAAKkR,MAAM1D,KAAK9K,EAAU1C,KAAKqb,QACxCw9B,EAAO74C,KAAKkR,MAAM1D,KAAK9K,EAAU1C,KAAK84C,WACtCC,EAAQ/4C,KAAKkR,MAAM1D,KAAK9K,EAAU1C,KAAKg5C,YAEvCl8B,EAASsuB,EAAOtuB,OAEpBo9B,EAASlW,GAAK2U,EAAQ77B,EACtBo9B,EAASzd,GAAKkc,EAAQ77B,EACtBo9B,EAASzR,GAAKt7B,EACd+sC,EAASxR,GAAK,EAAIv7B,EAElBitC,EAAUpW,GAAK4U,EAAS97B,EACxBs9B,EAAU3d,GAAKmc,EAAS97B,EACxBs9B,EAAU3R,GAAK,EACf2R,EAAU1R,GAAKv7B,EAEfgtC,EAAYnW,GAAK+U,EAAQj8B,EACzBq9B,EAAY1d,GAAKoc,EAAO/7B,EAGzBxX,EAAA,KAAWtF,KAAKqc,WAAW7W,WAAY,SAAC+vB,GAEvC,IAAIiZ,EAAc9rC,EAAS+rC,cAAcxnC,OAAOsuB,EAAU/uB,KAC1D,GAAIgoC,EAAa,CAChB,IAAI6L,EAAgB7L,EAAYmL,SAChCU,EAAct0C,EAAIm0C,EAASn0C,EAC3Bs0C,EAAcltC,EAAI+sC,EAAS/sC,EAC3BktC,EAAcrW,GAAKkW,EAASlW,GAC5BqW,EAAc5d,GAAKyd,EAASzd,GAC5B4d,EAAc5R,GAAKyR,EAASzR,GAC5B4R,EAAc3R,GAAKwR,EAASxR,GAE5B,IAAI4R,EAAiB9L,EAAYqL,UACjCS,EAAev0C,EAAIq0C,EAAUr0C,EAC7Bu0C,EAAentC,EAAIitC,EAAUjtC,EAC7BmtC,EAAetW,GAAKoW,EAAUpW,GAC9BsW,EAAe7d,GAAK2d,EAAU3d,GAC9B6d,EAAe7R,GAAK2R,EAAU3R,GAC9B6R,EAAe5R,GAAK0R,EAAU1R,GAE9B,IAAI6R,EAAmB/L,EAAYoL,YACnCW,EAAiBx0C,EAAIo0C,EAAYp0C,EACjCw0C,EAAiBptC,EAAIgtC,EAAYhtC,EACjCotC,EAAiBvW,GAAKmW,EAAYnW,GAClCuW,EAAiB9d,GAAK0d,EAAY1d,GAClC8d,EAAiB9R,GAAK0R,EAAY1R,GAClC8R,EAAiB7R,GAAKyR,EAAYzR,QAc/BuR,EAAA35C,UAAA+7B,mBAAP,SAA0BC,GAEzB,IAAI1U,EAAY0U,EAAOtU,WACnBF,EAAYwU,EAAOvU,YAEvBuU,EAAOoT,iBAEP,IAII6J,EACAC,EALApO,EAAe9O,EAAOrV,YAAYwyB,IACtCrO,EAAO5nB,aAAc,EACrB4nB,EAAOz6B,SAAc3Q,KAAKurC,QAAQx8B,UAKlC,IAAI4qC,EAAiBvO,EAAOuO,SACxBE,EAAkBzO,EAAOyO,UACzBD,EAAoBxO,EAAOwO,YAE3B55C,KAAKyF,UAAYzF,KAAKoR,OACzBmoC,EAAK3xB,EAAI,EACT4xB,EAAK1xB,EAEL8xB,EAAYzsC,EAAI2a,EAAI,EACpB8xB,EAAYnd,GAAK7U,EAEjB+xB,EAAS5zC,EAAI6hB,EAAI,EAAI,EACrB+xB,EAASjR,GAAK5gB,EAAI,EAElB+xB,EAAU9zC,EAAI6hB,EAAI,EAClBiyB,EAAUnR,GAAK5gB,EACf+xB,EAAUpR,GAAK3gB,EAAI,IAGnByxB,EAAK3xB,EACL4xB,EAAK1xB,EAAI,EAET8xB,EAAY7zC,EAAI6hB,EAAI,EACpBgyB,EAAYlR,GAAK5gB,EAEjB6xB,EAASxsC,EAAI2a,EAAI,EAAI,EACrB6xB,EAASld,GAAK7U,EAAI,EAElBiyB,EAAU1sC,EAAI2a,EAAI,EAClB+xB,EAAUpd,GAAK7U,EACfiyB,EAAU7V,GAAKpc,EAAI,GAEpBwjB,EAAO1uB,MAAQ68B,EACfnO,EAAOzuB,OAAS68B,EAEhBtyC,EAAA,eAAuBlH,KAAMs8B,EAAQjjB,EAAA,GACrCnS,EAAA,eAAuBlH,KAAKurC,QAAQx8B,SAAUq8B,EAAQ/xB,EAAA,GAEtD+xB,EAAO/jB,OAASrnB,KAAK83C,kBAAkB9kC,WAAWqU,OAElD,IAAIsV,EAAiCL,EAAO55B,SAC5Ci6B,EAAeC,MAAQwO,EAAO/jB,OAC9BsV,EAAeE,UAAYuO,EAAO/jB,QAQzB4yB,EAAA35C,UAAAgvC,qBAAV,WACC,OAAO,IAAImK,IAGbQ,EA9OA,CAAgCxC,IAsPhCx2C,EAAA,EAASC,kBAA8B,WAAI84C,GAC3C/4C,EAAA,EAASC,kBAAsC,mBAAI44C,GCnSnD,IAAAU,GAAA,SAAA56C,GAkCC,SAAA66C,IAAA,IAAA36C,EAGCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,0BA0DnB,OAhG2CE,EAAA,EAAAs6C,EAAA76C,GAkDnC66C,EAAAn6C,UAAAs4B,YAAP,SAAmBC,EAAkBC,EAAuBC,EAAqBC,EAAqB0hB,EAAoBC,GACzH,GAAI9hB,EAAO1wB,OAAS,GAAK2wB,EAAY3wB,OAAS,EAE7C,GAAIuyC,EAAU,CACb,IAAIl+B,EAAeC,EAAA,OAAaoc,EAAO,IACvC,GAAIA,EAAO1wB,OAAS,EACnB,IAAK,IAAI2L,EAAI,EAAGA,EAAI+kB,EAAO1wB,OAAQ2L,IAAK,CACvC,IAAI/G,EAAQ8rB,EAAO/kB,GACfA,EAAI,GAAK9Q,KAAKC,MAAM6Q,EAAI,GAC3B0I,GAAQC,EAAA,OAAa1P,GAGrByP,GAAQC,EAAA,OAAa1P,GAKxB/M,KAAK24B,aAAanc,KAAOA,GAErBxc,KAAKknB,YAAc,GAAKlnB,KAAK04B,WAAWxR,YAAc,KACzD1K,EAAOC,EAAA,OAAaoc,EAAO,IAAMpc,EAAA,SAAeoc,GAChDrc,GAAQC,EAAA,OAAaqc,EAAY,IAAMrc,EAAA,SAAeqc,GACtDtc,GAAQC,EAAA,OAAaoc,EAAO,IAC5Brc,GAAQC,EAAA,YAERzc,KAAK04B,WAAWlc,KAAOA,OAMpB,CACAA,EAAeC,EAAA,OAAaoc,EAAO,IAAMpc,EAAA,SAAeoc,GAE5D74B,KAAK24B,aAAanc,KAAOA,GAErBxc,KAAKknB,YAAc,GAAKlnB,KAAK04B,WAAWxR,YAAc,KACzD1K,GAAQC,EAAA,OAAaqc,EAAY,IAAMrc,EAAA,SAAeqc,GACtDtc,GAAQC,EAAA,OAAaoc,EAAO,IAC5Brc,GAAQC,EAAA,YAERzc,KAAK04B,WAAWlc,KAAOA,KAK5Bi+B,EAhGA,CAA2CjiB,GAwG3Cv3B,EAAA,EAASC,kBAAyC,sBAAIs5C,GCvItD,IAAAI,GAAA,SAAAh7C,GAUC,SAAAi7C,IAAA,IAAA/6C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,yBACjBH,EAAKI,eAGP,OAhB4CC,EAAA,EAAA06C,EAAAj7C,GAgB5Ci7C,EAhBA,CAA4CxhB,IAsE5CyhB,GAAA,SAAAl7C,GAkCC,SAAAm7C,IAAA,IAAAj7C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,iBACjBH,EAAKI,aACLJ,EAAKoM,cAAgB,EACrBpM,EAAKsM,YAAc,IAyJrB,OAhMoCjM,EAAA,EAAA46C,EAAAn7C,GAgDzBm7C,EAAAz6C,UAAAoD,eAAV,WACC,OAAO,IAAIk3C,IAaFG,EAAAz6C,UAAAs7B,UAAV,SAAoB/C,EAAkBn2B,EAA6B2Y,EAAgBI,EAAgByG,GAElG,IAAIhW,EAAgBlM,KAAKkM,cACrBE,EAAcpM,KAAKoM,YAEnB23B,EAAa/jC,KAAKkR,MAAM1D,KAAK9K,EAAU2Y,EAAQnP,GAC/CqkC,EAAavwC,KAAKoR,MAAMzD,KAAKjL,EAAU+Y,EAAQvP,GAE/C83B,EAAahkC,KAAKkR,MAAM1D,KAAK9K,EAAU2Y,EAAQjP,GAC/Cq8B,EAAazoC,KAAKoR,MAAMzD,KAAKjL,EAAU+Y,EAAQrP,GASnD,GAPA23B,EAAK15B,EAAA,WAAiB05B,GAAK,IAAO,KAClCwM,EAAKlmC,EAAA,WAAiBkmC,GAAK,IAAO,KAElCvM,EAAK35B,EAAA,WAAiB25B,GAAK,IAAO,KAClCyE,EAAKp+B,EAAA,WAAiBo+B,GAAK,IAAO,MAG7BzoC,KAAK06C,UAAY16C,KAAKiS,SACtB4mB,EAAO1wB,OAAS,EAAG,CACtB,IAAI6yC,EAAoBniB,EAAOA,EAAO1wB,OAAS,GAC3CnI,KAAKyF,UAAYzF,KAAKkR,QACrBgR,EACH2W,EAAOnnB,MAAO3L,EAAGi1C,EAAUj1C,EAAGoH,EAAGs7B,IAGjC5P,EAAOnnB,MAAO3L,EAAGg+B,EAAI52B,EAAG6tC,EAAU7tC,KAGhCnN,KAAKyF,UAAYzF,KAAKoR,QACrB8Q,EACH2W,EAAOnnB,MAAO3L,EAAGi+B,EAAI72B,EAAG6tC,EAAU7tC,IAGlC0rB,EAAOnnB,MAAO3L,EAAGi1C,EAAUj1C,EAAGoH,EAAGojC,KAMrC,IAAI0K,GAAmBl1C,EAAGg+B,EAAI52B,EAAGojC,GAC7BtH,GAAmBljC,EAAGi+B,EAAI72B,EAAGs7B,GAE7BvmB,EACH2W,EAAOnnB,KAAKu3B,EAAQgS,GAGpBpiB,EAAOnnB,KAAKupC,EAAQhS,IAYZ8R,EAAAz6C,UAAAs4B,YAAV,SAAsB4B,EAAgC3B,EAAkBC,GACvE,IAAI6hB,GAAW,EACX36C,KAAKoR,OAASpR,KAAKyF,WACtBk1C,GAAW,GAEZngB,EAAQ5B,YAAYC,EAAQC,EAAa94B,KAAK+5B,SAAU/5B,KAAKg6B,SAAUh6B,KAAK06C,SAAUC,IAQ7EI,EAAAz6C,UAAAq5B,cAAV,WACC,OAAO,IAAI6gB,IAWZp6C,OAAAC,eAAW06C,EAAAz6C,UAAA,gBAOX,WACC,OAAON,KAAKO,iBAAiB,iBAR9B,SAAoBC,GACnBR,KAAKS,iBAAiB,WAAYD,GAAO,oCAiB1CJ,OAAAC,eAAW06C,EAAAz6C,UAAA,qBAOX,WACC,OAAON,KAAKO,iBAAiB,sBAR9B,SAAyBC,GACxBR,KAAKS,iBAAiB,gBAAiBD,GAAO,oCAgB/CJ,OAAAC,eAAW06C,EAAAz6C,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKS,iBAAiB,cAAeD,GAAO,oCAU9Cu6C,EAhMA,CAAoCxhB,IAwMpCt4B,EAAA,EAASC,kBAAkC,eAAI45C,GAC/C75C,EAAA,EAASC,kBAA0C,uBAAI05C,GCpPvD,IAAAM,GAAA,SAAAt7C,GA0BC,SAAAu7C,IAAA,IAAAr7C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,gBAqDnB,OAjFiCE,EAAA,EAAAg7C,EAAAv7C,GAkCtBu7C,EAAA76C,UAAA02C,aAAV,WACCh3C,KAAKo7C,YAAcp7C,KAAKinB,YAAYwf,GAAA,GACpCzmC,KAAKo7C,YAAY53B,aAAc,EAC/BxjB,KAAKo7C,YAAY5zB,mBAAgBzf,EAEjC/H,KAAKorC,OAAcprC,KAAKo7C,aAQlBD,EAAA76C,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACX5Q,KAAKo7C,aACRp7C,KAAKo7C,YAAYzqC,SAASC,EAAOwqC,cAUzBD,EAAA76C,UAAA+6C,YAAV,WACC,IAAI76C,EAAQR,KAAKO,iBAAiB,YAIlC,OAHK4F,EAAA,SAAe3F,KACnBA,EAAQR,KAAKo7C,YAAY97B,UAEnB9e,GAQE26C,EAAA76C,UAAAg7C,YAAV,WACC,IAAI96C,EAAQR,KAAKO,iBAAiB,YAIlC,OAHK4F,EAAA,SAAe3F,KACnBA,EAAQR,KAAKo7C,YAAY77B,UAEnB/e,GAGT26C,EAjFA,CAAiC5L,GAAA,GAyFjCtuC,EAAA,EAASC,kBAA+B,YAAIg6C,GC9G5C,IAAAK,GAAA,SAAA37C,GAgBC,SAAA47C,IAAA,IAAA17C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBACjBH,EAAKI,eAEP,OArB+CC,EAAA,EAAAq7C,EAAA57C,GAqB/C47C,EArBA,CAA+CvQ,IAqE/CwQ,GAAA,SAAA77C,GAsCC,SAAA87C,IAAA,IAAA57C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,oBACjBH,EAAKI,eAqMP,OA9OuCC,EAAA,EAAAu7C,EAAA97C,GAiD5B87C,EAAAp7C,UAAAgvC,qBAAV,WACC,OAAO,IAAI4L,IAQLQ,EAAAp7C,UAAA6T,SAAP,WAGKnU,KAAK6R,MAAMwC,SACdrU,KAAK6R,MAAMsC,WAGZvU,EAAAU,UAAM6T,SAAQpU,KAAAC,OASR07C,EAAAp7C,UAAA8rC,wBAAP,SAA+B1pC,GAA/B,IASKi5C,EACAC,EAEAC,EACAC,EAbLh8C,EAAAE,KACK09B,EAAa19B,KAAK6R,MAAM6rB,WACxBC,EAAW39B,KAAK6R,MAAM8rB,SAEtBliB,EAAiBzb,KAAKyb,OACtBC,EAAqB1b,KAAK0b,WAC1BL,EAAiBrb,KAAKqb,OACtBC,EAAqBtb,KAAKsb,WAQ1BpP,EAAgBlM,KAAKqsC,iBAAiB3pC,GACtC0J,EAAcpM,KAAKusC,eAAe7pC,GAElCq5C,GAAape,EAAWD,IAAe19B,KAAK6F,UAAUsC,QAAUnI,KAAK8D,IAAM9D,KAAK6D,QAEpF65B,GAA0BxxB,EAAgB6vC,EAC1Cpe,IAAuB,EAAIvxB,GAAe2vC,EAE1C,IAEIpU,EAFmB3nC,KAAKurC,QAAQx8B,SAEA44B,aAEhCxhC,EAAA,MAAYwhC,KACfA,EAAe,KAGhB,IAAIwF,EAAiB9iC,EAAA,OAAa+B,EAAcF,IAAkB,EAAIy7B,EAAe,KAAO,EAAG,GAmB/F,GAlBAz7B,GAAiBihC,EACjB/gC,GAAe+gC,EAEXntC,KAAKyF,UAAYzF,KAAKkR,OACzB2qC,EAAUxxC,EAAA,aAAoBtE,EAAG/F,KAAKoR,MAAM5D,KAAK9K,EAAU+Y,EAAQ/Y,EAASmQ,UAAU4I,GAAS,UAAWtO,EAAGnN,KAAKoR,MAAMzD,KAAKjL,EAAU+Y,EAAQ/Y,EAASmQ,UAAU4I,GAAS,YAC3KqgC,EAAUzxC,EAAA,aAAoBtE,EAAG/F,KAAKoR,MAAM5D,KAAK9K,EAAUgZ,EAAYhZ,EAASmQ,UAAU6I,GAAa,UAAWvO,EAAGnN,KAAKoR,MAAMzD,KAAKjL,EAAUgZ,EAAYhZ,EAASmQ,UAAU6I,GAAa,YAE3LigC,EAAS37C,KAAKkR,MAAMpD,SAASpL,EAAU4Y,EAAYpP,EAAe,UAClE0vC,EAAS57C,KAAKkR,MAAMpD,SAASpL,EAAU2Y,EAAQjP,EAAa,YAG5DyvC,EAAUxxC,EAAA,aAAoBtE,EAAG/F,KAAKoR,MAAM5D,KAAK9K,EAAU+Y,EAAQvP,EAAe,UAAWiB,EAAGnN,KAAKoR,MAAMzD,KAAKjL,EAAU+Y,EAAQvP,EAAe,YACjJ4vC,EAAUzxC,EAAA,aAAoBtE,EAAG/F,KAAKoR,MAAM5D,KAAK9K,EAAUgZ,EAAYtP,EAAa,UAAWe,EAAGnN,KAAKoR,MAAMzD,KAAKjL,EAAUgZ,EAAYtP,EAAa,YAErJuvC,EAAS37C,KAAKkR,MAAMpD,SAASpL,EAAU2Y,EAAQ3Y,EAASmQ,UAAUwI,GAAS,UAC3EugC,EAAS57C,KAAKkR,MAAMpD,SAASpL,EAAU4Y,EAAY5Y,EAASmQ,UAAUyI,GAAa,WAGhFsgC,EAASD,EAAQ,CACpB,IAAIK,EAAOJ,EACXA,EAASD,EACTA,EAASK,EAGVL,EAAStxC,EAAA,WAAiBsxC,EAAQje,EAAYC,GAC9Cie,EAASvxC,EAAA,WAAiBuxC,EAAQle,EAAYC,GAE9C,IAAIyd,EAAc14C,EAAS0oC,OACtBgQ,IACJA,EAAcp7C,KAAKurC,QAAQvjC,SAC3BtF,EAAS0oC,OAASgQ,EAClBl0C,EAAA,oBAA4BlH,KAAKurC,QAAQx8B,SAAUqsC,EAAa/hC,EAAA,GAChE3W,EAAS4oC,UAAU8P,GACnBp7C,KAAKuuC,gBAAgB6M,IAGtB,IAAI7V,EAAQ6V,EAAYA,YAExB7V,EAAM7H,WAAaie,EAEnB,IAAIrd,EAAMsd,EAASD,EAEfrd,EAAM,GACTiH,EAAMjH,IAAMA,EACZiH,EAAM9H,OAASoe,EACftW,EAAMtH,YAAc6d,EACpBV,EAAYh4C,YAAa,EAEzBg4C,EAAYp7B,OAAShgB,KAAK8rC,iBAE1BxmC,EAAA,KAAWtF,KAAKqc,WAAW7W,WAAY,SAAC+vB,GACvC,IAAIiZ,EAAc9rC,EAAS+rC,cAAcxnC,OAAOsuB,EAAU/uB,KACrDgoC,IACJA,EAAc1uC,EAAKyrC,QAAQvjC,SAE3Bd,EAAA,oBAA4BpH,EAAKyrC,QAAQx8B,SAAUy/B,EAAan1B,EAAA,GAChEnS,EAAA,eAAuBquB,EAAUkG,SAAU+S,EAAan1B,EAAA,GAEpDm1B,EAAY9rC,UACf4V,EAAA,OAAck2B,EAAY9rC,SAASid,QAAS6uB,GAG7C9rC,EAAS4oC,UAAUkD,GACnB1uC,EAAKyuC,gBAAgBC,GACrB9rC,EAAS+rC,cAAclrC,OAAOgyB,EAAU/uB,IAAKgoC,IAG9C,IAAIjJ,EAAQ6V,EAAYA,YACxB7V,EAAM7H,WAAaie,EACnBpW,EAAMjH,IAAMA,EACZiH,EAAM9H,OAASoe,EACftW,EAAMtH,YAAc6d,EAEhBvW,EAAMlxB,SACTkxB,EAAMpxB,WAGPq6B,EAAYprC,YAAa,EACzBorC,EAAYxuB,OAASlgB,EAAKgsC,oBAI3B9rC,KAAKmsC,qBAAqBzpC,IAgBlBg5C,EAAAp7C,UAAA+e,SAAV,SAAmB3c,EAAqCogB,EAAcC,EAAcnC,EAAoBC,EAAoBmC,EAAoBC,GAE1ID,IACJA,EAAY,UAERC,IACJA,EAAY,UAGb,IAAIld,EAAY/F,KAAKoR,MAAM5D,KAAK9K,EAAUqgB,EAAMlC,EAAWoC,GACvD9V,EAAYnN,KAAKoR,MAAMzD,KAAKjL,EAAUqgB,EAAMlC,EAAWoC,GAEvDwa,EAAiBpzB,EAAA,aAAoBtE,EAAGA,EAAGoH,EAAGA,IAErC,GAAVswB,IACFA,EAAS,MAGV,IAAIxwB,EAAgBjN,KAAKkR,MAAMpD,SAASpL,EAAUogB,EAAMlC,EAAWoC,GAEnE,OAASjd,EAAG03B,EAASpzB,EAAA,IAAU4C,GAAQE,EAAGswB,EAASpzB,EAAA,IAAU4C,KASpDyuC,EAAAp7C,UAAA8b,YAAV,WACC,IAAInS,EAAmDjK,KAAKoR,MAAMnH,SAClE,OAAOwS,EAAA,IAAUxS,EAASyzB,WAAYzzB,EAAS0zB,SAAW1zB,EAASyzB,WAAYzzB,EAAS2zB,YAAa3zB,EAAS4zB,mBAGhH6d,EA9OA,CAAuCjQ,IAsPvCxqC,EAAA,EAASC,kBAAqC,kBAAIu6C,GAClDx6C,EAAA,EAASC,kBAA6C,0BAAIq6C,oBChU1DU,GAAA,SAAAr8C,GAWC,SAAAs8C,IAAA,IAAAp8C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,wBAEjBH,EAAKI,eAEP,OAjB2CC,EAAA,EAAA+7C,EAAAt8C,GAiB3Cs8C,EAjBA,CAA2CC,GAAA,GAyF3CC,GAAA,SAAAx8C,GAyCC,SAAAy8C,IAAA,IAAAv8C,EACCF,EAAAG,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,gBACjBH,EAAKw8C,SAAWl8C,OAAAmjB,EAAA,EAAAnjB,CAAQ,GACxBN,EAAKy8C,YAAcn8C,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAC3BN,EAAK08C,cAAgBp8C,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAC7BN,EAAK28C,QAAU,OAEf38C,EAAK48C,WAAW3tC,SAAS2N,MAAQ,EACjC5c,EAAK48C,WAAW3tC,SAAS4N,OAAS,EAElC7c,EAAKI,eAqWP,OA1ZmCC,EAAA,EAAAk8C,EAAAz8C,GA6DxBy8C,EAAA/7C,UAAA+C,sBAAV,WACCzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MACtBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,oBAUnC44C,EAAA/7C,UAAAoD,eAAV,WACC,OAAO,IAAIu4C,IAQLI,EAAA/7C,UAAA6T,SAAP,WACCvU,EAAAU,UAAM6T,SAAQpU,KAAAC,MACdA,KAAK28C,gBAAa50C,GAUTs0C,EAAA/7C,UAAAs8C,aAAV,SAAuBl6C,GACtB,IAAI2J,EAAQ3J,EAAS2J,MACjBwwC,EAAoBn6C,EAAS6V,gBAAgB,SAC7ClM,EAAQrM,KAAK6F,UAAUsC,OAAS,IAEnC00C,EADe78C,KAAK6F,UAAU2G,SAASH,EAAQ,GAC1BkM,gBAAgB,UAKtC,OAHiB,GAAbskC,IACHA,EAAY,MAENA,GASDR,EAAA/7C,UAAAwhB,qBAAP,eAAAhiB,EAAAE,KACKo3B,EAAWp3B,KAAK88C,gBAAgB92B,WAChCqR,EAAYr3B,KAAK88C,gBAAgB72B,YAiBrC,GAfAjmB,KAAK6F,UAAUU,KAAK,SAAC7D,GACpB,IAAIq6C,EAAWr6C,EAAS6V,gBAAgB,SAAW7V,EAASlC,MACxDw8C,EAAYt6C,EAASs6C,UACD,YAApBl9C,EAAK+sB,YACRwK,GAAc2lB,EAAUj1B,YAAcg1B,EAGtC3lB,GAAa4lB,EAAUh1B,WAAa+0B,IAKtC/8C,KAAKi9C,eAAiB1hC,EAAA,gBAAuBvb,KAAKw8C,cAAenlB,GACjEr3B,KAAKk9C,cAAgB3hC,EAAA,gBAAuBvb,KAAKw8C,cAAeplB,GAExC,YAApBp3B,KAAK6sB,YAA2B,CACnC,IAAI1f,GAAKkqB,EAAYr3B,KAAKi9C,gBAAkB,EAC5Cj9C,KAAK88C,gBAAgB3vC,EAAIA,EACzBnN,KAAKm9C,gBAAgBhwC,EAAIA,EACzBnN,KAAKo9C,eAAejwC,EAAIA,MAEpB,CACJ,IAAIpH,GAAKqxB,EAAWp3B,KAAKk9C,eAAiB,EAC1Cl9C,KAAK88C,gBAAgB/2C,EAAIA,EACzB/F,KAAKm9C,gBAAgBp3C,EAAIA,EACzB/F,KAAKo9C,eAAer3C,EAAIA,EAGzBnG,EAAAU,UAAMwhB,qBAAoB/hB,KAAAC,OASjBq8C,EAAA/7C,UAAA+8C,cAAV,SAAwB36C,GAEvB,IAAIoxB,EAAM9zB,KAAK0C,SAASrB,OAAOb,MAAMszB,IAErC,GAAU,GAAPA,EAAH,CAIA,IAAIyR,EAAQ7iC,EAAS6iC,MACjByX,EAAYt6C,EAASs6C,UACrBrxC,EAAQjJ,EAASiJ,MACjBR,EAAOzI,EAASyI,KAGpBnL,KAAK48C,aAAal6C,GAElB,IAAI03B,EAAe13B,EAAS6V,gBAAgB,SAExB,GAAhB6hB,IACHA,EAAe,MAGhB,IAAIkjB,EAAet9C,KAAKk9C,cACpBV,EAAgBx8C,KAAKi9C,eAErB7lB,EAAWp3B,KAAK88C,gBAAgB92B,WAChCqR,EAAYr3B,KAAK88C,gBAAgB72B,YAEjCs3B,EAAYP,EAAUh1B,WACtBw1B,EAAaR,EAAUj1B,YAE3B,GAAwB,YAApB/nB,KAAK6sB,YAA2B,CACnC,IAAIyvB,EAAW/gC,EAAA,gBAAuBvb,KAAKs8C,SAAUllB,GAEhDjxB,EAAA,SAAenG,KAAK28C,cACxB38C,KAAK28C,WAAaL,GAInB,IAAIC,EAAchhC,EAAA,gBAAuBvb,KAAKu8C,YAAanlB,GACvDqmB,EAAgBz9C,KAAK28C,WAErB1vC,EAAQjK,KAAK+8B,MAAMyc,EAAeF,EAAWC,GAExC,IADLmB,EAAI16C,KAAK26C,IAAI36C,KAAKg9B,GAAK,EAAI/yB,MAE9BywC,EAAI,MAGL,IAAIE,OAAW,EACXC,OAAgB,EAEpB,GAAoB,QAAhB79C,KAAKy8C,QAAmB,CAC3B,IACIqB,GADexB,EAAWC,GAAe,EAAIC,EACtBpiB,EAAetG,EAEtC6iB,EAAI3zC,KAAKyL,IAAIgvC,EAAgBA,EAAgB,EAAIK,EAASJ,GAG9DG,GAAoB,EAAIC,GADxBF,GAAeH,EAAgBz6C,KAAK4xC,KAAK+B,IAAM+G,GACAD,GAAiBG,MAE5D,CAGJC,EAAmBJ,GADnBG,EAAcpB,EAAgBpiB,EADpBp6B,KAAK0C,SAASrB,OAAOb,MAAMszB,KAEY4pB,EAIlDnY,EAAM5oB,OAASihC,EACfrY,EAAM7oB,MAAQ0a,EACdmO,EAAMgX,YAAcsB,EACpBtY,EAAM+W,SAAWmB,EAEjBT,EAAUV,SAAW/W,EAAMgX,YAC3BS,EAAUT,YAAchX,EAAMgX,YAE9BhX,EAAMp4B,EAAInN,KAAK+9C,OAGV/9C,KAAKg+C,YAITryC,EAAM5F,EAAI,EAHV4F,EAAM5F,EAAIqxB,EAAW,EAMtBzrB,EAAMwB,EAAIo4B,EAAM1oB,OAAS0oB,EAAMxd,YAAc5c,EAAK0V,UAAY0kB,EAAM8C,GAEpEroC,KAAK+9C,QAAUxY,EAAMxd,YAAcy1B,EAAapjB,EAAe13B,EAASlC,MACxEw8C,EAAU7vC,EAAInN,KAAK+9C,OAASP,EAC5BR,EAAUj3C,EAAIqxB,EAAW,MAErB,CACAklB,EAAW/gC,EAAA,gBAAuBvb,KAAKs8C,SAAUjlB,GAEhDlxB,EAAA,SAAenG,KAAK28C,cACxB38C,KAAK28C,WAAaL,GAGnB,IAIIoB,EAJAnB,EAAchhC,EAAA,gBAAuBvb,KAAKu8C,YAAallB,GACvDomB,EAAgBz9C,KAAK28C,WAErB1vC,EAAQjK,KAAK+8B,MAAMud,EAAchB,EAAWC,GAEvC,IADLmB,EAAI16C,KAAK26C,IAAI36C,KAAKg9B,GAAK,EAAI/yB,MAE9BywC,EAAI,MAGL,IAAIO,OAAU,EACVJ,OAAgB,EAEpB,GAAoB,QAAhB79C,KAAKy8C,QAIRoB,GAAoB,GAFhBC,GADexB,EAAWC,GAAe,EAAIe,EACtBljB,EAAep6B,KAAK0C,SAASrB,OAAOb,MAAMszB,MACrEmqB,GAAcR,EAAgBz6C,KAAK4xC,KAAK6I,EAAgBA,EAAgB,EAAIK,EAASJ,IAAMA,GAC7CD,GAAiBQ,OAI/DJ,EAAmBJ,GADnBQ,EAAaX,EAAeljB,EAAep6B,KAAK0C,SAASrB,OAAOb,MAAMszB,KACtB4pB,EAGjDnY,EAAM7oB,MAAQuhC,EACd1Y,EAAM5oB,OAAS0a,EACfkO,EAAMgX,YAAcsB,EACpBtY,EAAM+W,SAAWmB,EAEjBT,EAAUV,SAAW/W,EAAMgX,YAC3BS,EAAUT,YAAchX,EAAMgX,YAE9BhX,EAAMx/B,EAAI/F,KAAK+9C,OAEV/9C,KAAKg+C,YAITryC,EAAMwB,EAAInN,KAAKm9C,gBAAgB3nC,eAH/B7J,EAAMwB,EAAIkqB,EAAY,EAMvB1rB,EAAM5F,EAAIw/B,EAAMzoB,OAASyoB,EAAMvd,WAAa7c,EAAKyV,UAAY2kB,EAAM6C,GAEnEpoC,KAAK+9C,QAAUxY,EAAMvd,WAAau1B,EAAYnjB,EAAe13B,EAASlC,MACtEw8C,EAAUj3C,EAAI/F,KAAK+9C,OAASR,EAC5BP,EAAU7vC,EAAIkqB,EAAY,EAG3Br3B,KAAK28C,WAAapX,EAAMgX,cAgBzBn8C,OAAAC,eAAWg8C,EAAA/7C,UAAA,gBASX,WACC,OAAON,KAAKO,iBAAiB,iBAV9B,SAAoBC,GACfR,KAAKi/B,mBAAmB,WAAYz+B,GAAO,GAAO,EAAO,IAAI,IAChER,KAAKa,8CAmBPT,OAAAC,eAAWg8C,EAAA/7C,UAAA,qBASX,WACC,OAAON,KAAKO,iBAAiB,sBAV9B,SAAyBC,GACpBR,KAAKi/B,mBAAmB,gBAAiBz+B,GAAO,GAAO,EAAO,IAAI,IACrER,KAAKa,8CAuBPT,OAAAC,eAAWg8C,EAAA/7C,UAAA,mBASX,WACC,OAAON,KAAKO,iBAAiB,oBAV9B,SAAuBC,GAClBR,KAAKi/B,mBAAmB,cAAez+B,GAAO,GAAO,EAAO,IAAI,IACnER,KAAKa,8CAkCPT,OAAAC,eAAWg8C,EAAA/7C,UAAA,eASX,WACC,OAAON,KAAKO,iBAAiB,gBAV9B,SAAmBC,GACdR,KAAKS,iBAAiB,UAAWD,IACpCR,KAAKa,8CAURw7C,EA1ZA,CAAmCF,GAAA,GAkanCl7C,EAAA,EAASC,kBAAiC,cAAIk7C,GAC9Cn7C,EAAA,EAASC,kBAAyC,sBAAI+6C,GC3ftD,IAAAiC,GAAA,SAAAt+C,GAUC,SAAAu+C,IAAA,IAAAr+C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,iCAEjBH,EAAKI,eAEP,OAhBoDC,EAAA,EAAAg+C,EAAAv+C,GAgBpDu+C,EAhBA,CAAoDlC,IAgFpDmC,GAAA,SAAAx+C,GAmCC,SAAAy+C,IAAA,IAAAv+C,EACCF,EAAAG,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,yBACjBH,EAAKw8C,SAAWl8C,OAAAmjB,EAAA,EAAAnjB,CAAQ,KACxBN,EAAKy8C,YAAcn8C,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAC3BN,EAAK28C,QAAU,SAEf38C,EAAKI,aAELJ,EAAKoM,cAAgB,EACrBpM,EAAKsM,YAAc,EAEnBtM,EAAKw+C,YAAcx+C,EAAKg9C,gBAAgB71B,YAAY5N,EAAA,GACpDvZ,EAAKw+C,YAAYz/B,SAAU,EAC3B/e,EAAKw+C,YAAYpwB,OAAS,IAC1BpuB,EAAKw+C,YAAY96B,aAAc,IAsQjC,OAzT4CrjB,EAAA,EAAAk+C,EAAAz+C,GA2DpCy+C,EAAA/9C,UAAAwhB,qBAAP,WAEC,IAAIsV,EAAWp3B,KAAK88C,gBAAgB1lB,SAChCC,EAAYr3B,KAAK88C,gBAAgBzlB,UAEjCknB,EAAav+C,KAAKs+C,YAGlBE,EAAeD,EAAWhpC,cAAgBgpC,EAAWE,MACrDC,EAAgBH,EAAW/oC,eAAiB+oC,EAAWE,MAEvDA,EAAQp0C,EAAA,IAAUgtB,EAAYqnB,EAAetnB,EAAWonB,GAExDC,GAAS5gC,MACZ4gC,EAAQ,GAGTA,EAAQp0C,EAAA,IAAU,KAAOo0C,GAEzB,IAAIvyC,EAAgBlM,KAAKkM,cACrBE,EAAcpM,KAAKoM,YAEnBuyC,EAAWt0C,EAAA,IAAU+sB,EAAUonB,EAAeC,GAC9CG,EAAYv0C,EAAA,IAAUgtB,EAAWqnB,EAAgBD,GAyBrD,GAvBAF,EAAWE,MAAQA,EAEK,YAApBz+C,KAAK6sB,aACR7sB,KAAKs8C,SAAWqC,EAAW,EAC3B3+C,KAAKu8C,YAAcoC,EAAW,EAC9B3+C,KAAKw8C,cAAgBoC,GAAaxyC,EAAcF,GAChDqyC,EAAWx4C,EAAIqxB,EAAW,EAC1BmnB,EAAWpxC,EAAIyxC,EAAY,IAG3B5+C,KAAKs8C,SAAWsC,EAAY,EAC5B5+C,KAAKu8C,YAAcqC,EAAY,EAC/B5+C,KAAKw8C,cAAgBmC,GAAYvyC,EAAcF,GAC/CqyC,EAAWlvB,OAAS,SACpBkvB,EAAWx4C,EAAI44C,EAAW,EAC1BJ,EAAWpxC,EAAIkqB,EAAY,GAG5BknB,EAAWld,eAAiB,SAC5Bkd,EAAWnd,iBAAmB,SAE9BxhC,EAAAU,UAAMwhB,qBAAoB/hB,KAAAC,MAEF,YAApBA,KAAK6sB,YAA2B,CACnC,IAAI1f,GAAKkqB,EAAYunB,GAAa,EAClC5+C,KAAK88C,gBAAgB3vC,EAAIA,EACzBnN,KAAKm9C,gBAAgBhwC,EAAIA,EACzBnN,KAAKo9C,eAAejwC,EAAIA,EACxBnN,KAAK6+C,OAAO9vC,SAASs5B,GAAKn8B,EAAgB0yC,MAEtC,CACJ,IAAI74C,GAAKqxB,EAAWunB,GAAY,EAChC3+C,KAAK88C,gBAAgB/2C,EAAIA,EACzB/F,KAAKm9C,gBAAgBp3C,EAAIA,EACzB/F,KAAKo9C,eAAer3C,EAAIA,EACxB/F,KAAK6+C,OAAO9vC,SAASq5B,GAAKl8B,EAAgByyC,EAG3C3+C,KAAK88C,gBAAgBpxC,KAAO1L,KAAKs+C,aAOxBD,EAAA/9C,UAAA+C,sBAAV,WACCzD,EAAAU,UAAM+C,sBAAqBtD,KAAAC,MACtBmG,EAAA,SAAenG,KAAK+Z,eACxB/Z,KAAK+Z,YAAc/Z,KAAKwD,SAASC,UAAU,oBAUnC46C,EAAA/9C,UAAAoD,eAAV,WACC,OAAO,IAAIw6C,IAuCZ99C,OAAAC,eAAWg+C,EAAA/9C,UAAA,kBAAX,WACC,OAAON,KAAKs+C,6CAQHD,EAAA/9C,UAAAw+C,UAAV,SAAoBvZ,GACnB3lC,EAAAU,UAAMw+C,UAAS/+C,KAAAC,KAACulC,GAEhB,IAAIwZ,EAAKxZ,EAAMja,OAAOrkB,OAAO,SACzB83C,IACHA,EAAG/rC,WAAWgsC,eAAiB,IAgDjC5+C,OAAAC,eAAWg+C,EAAA/9C,UAAA,qBASX,WACC,OAAON,KAAKO,iBAAiB,sBAV9B,SAAyBC,GACpBR,KAAKS,iBAAiB,gBAAiBD,IAC1CR,KAAKsS,uDAuDPlS,OAAAC,eAAWg+C,EAAA/9C,UAAA,mBASX,WACC,OAAON,KAAKO,iBAAiB,oBAV9B,SAAuBC,GAClBR,KAAKS,iBAAiB,cAAeD,IACxCR,KAAKsS,uDAUR+rC,EAzTA,CAA4CjC,IAiU5Cn7C,EAAA,EAASC,kBAA0C,uBAAIk9C,GACvDn9C,EAAA,EAASC,kBAAkD,+BAAIg9C,8CC1X/De,GAAA,SAAAr/C,GA0BC,SAAAs/C,IAAA,IAAAp/C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,eAyBnB,OArDgCE,EAAA,EAAA++C,EAAAt/C,GAkC/Bs/C,EAAA5+C,UAAA02C,aAAA,WACCh3C,KAAKm/C,WAAan/C,KAAKinB,YAAYm4B,GAAA,GACnCp/C,KAAKm/C,WAAW37B,aAAc,EAG9BxjB,KAAKorC,OAAcprC,KAAKm/C,YAQzBD,EAAA5+C,UAAAqQ,SAAA,SAASC,GACRhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACX5Q,KAAKm/C,YACRn/C,KAAKm/C,WAAWxuC,SAASC,EAAOuuC,aAGnCD,EArDA,CAAgC3P,GAAA,GA6DhCtuC,EAAA,EAASC,kBAA8B,WAAI+9C,GCxF3C,IAAAI,GAAA,SAAAz/C,GAgBC,SAAA0/C,IAAA,IAAAx/C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,qBACjBH,EAAKI,eAGP,OAtBwCC,EAAA,EAAAm/C,EAAA1/C,GAsBxC0/C,EAtBA,CAAwCrU,IAsExCsU,GAAA,SAAA3/C,GA+BC,SAAA4/C,IAAA,IAAA1/C,EACCF,EAAAG,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,aACjBH,EAAKI,eA6DP,OAhGgCC,EAAA,EAAAq/C,EAAA5/C,GA2CrB4/C,EAAAl/C,UAAAgvC,qBAAV,WACC,OAAO,IAAI2P,IAQFO,EAAAl/C,UAAA8b,YAAV,WACC,IAAIgsB,EAAK,EACLC,EAAK,EACL+C,EAASprC,KAAKurC,QAAQ/+B,SAAS,GACnC,GAAG4+B,EAQF,OAPIprC,KAAKyF,UAAYzF,KAAKkR,MACzBm3B,EAAK+C,EAAO+T,WAAW7qB,OAAOmrB,QAAU,EAGxCrX,EAAKgD,EAAO+T,WAAW7qB,OAAOmrB,QAAU,EAGlChjC,EAAA,YACN1W,GAAIqiC,EACJj7B,EAAG,EACHuP,MAAO1c,KAAKkR,MAAMqD,WAAa6zB,EAC/BzrB,OAAQ3c,KAAKoR,MAAMmD,WAAa8zB,KAY5BmX,EAAAl/C,UAAA8rC,wBAAP,SAA+B1pC,GAG9B,GAFA9C,EAAAU,UAAM8rC,wBAAuBrsC,KAAAC,KAAC0C,GACjBA,EAAS0oC,OACZ,CACT,IAAI+T,EAAaz8C,EAAS0oC,OAAO+T,WAEjCA,EAAW3zC,KAAO9I,EAAS0oC,OAAO5/B,KAE9BxL,KAAKyF,UAAYzF,KAAKoR,MACzB+tC,EAAWtyB,YAAc,aAGzBsyB,EAAWtyB,YAAc,aAI7B2yB,EAhGA,CAAgC/T,IAwGhCxqC,EAAA,EAASC,kBAA8B,WAAIq+C,GAC3Ct+C,EAAA,EAASC,kBAAsC,mBAAIm+C,GCxHnD,IAAAK,GAAA,SAAA9/C,GAyBC,SAAA+/C,IAAA,IAAA7/C,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,iBA8GnB,OAzIkCE,EAAA,EAAAw/C,EAAA//C,GAoCvB+/C,EAAAr/C,UAAA02C,aAAV,WACCh3C,KAAK4/C,aAAe5/C,KAAKinB,YAAY5N,EAAA,GACrCrZ,KAAK4/C,aAAap8B,aAAc,EAEhCxjB,KAAKS,iBAAiB,UAAW,IAEjCT,KAAK0c,MAAQtc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KACrBJ,KAAK2c,OAASvc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KAGtBJ,KAAKorC,OAAcprC,KAAK4/C,cAQlBD,EAAAr/C,UAAAqvB,KAAP,WACC/vB,EAAAU,UAAMqvB,KAAI5vB,KAAAC,MACV,IAKI64B,EALAjR,EAAI5nB,KAAKouC,UACTtmB,EAAI9nB,KAAKquC,WACTtoC,EAAI/F,KAAKkuC,MAAQluC,KAAK8c,OACtB3P,EAAInN,KAAKmuC,MAAQnuC,KAAK6c,OAK1BtB,EAAA,KAAYvb,KAAK0c,OAEjB,IAAIqd,EAAW,EACXC,EAAW,EAES,YAApBh6B,KAAK6sB,aACRkN,EAAW/5B,KAAK6/C,QAChBhnB,IAAY9yB,EAAG,EAAGoH,EAAG2a,EAAI3a,IAAOpH,EAAG6hB,EAAI,EAAGza,EAAGA,IAAOpH,EAAG6hB,EAAGza,EAAG2a,EAAI3a,MAGjE6sB,EAAWh6B,KAAK6/C,QAChBhnB,IAAY9yB,EAAGA,EAAGoH,EAAG,IAAOpH,EAAGA,EAAI6hB,EAAGza,EAAG2a,EAAI,IAAO/hB,EAAGA,EAAGoH,EAAG2a,KAG9D,IAAItL,EAAOC,EAAA,OAAaoc,EAAO,IAAM,IAAII,EAAA,EAAmBc,EAAUC,GAAUd,OAAOL,GACvF74B,KAAKorC,OAAO5uB,KAAOA,GAQbmjC,EAAAr/C,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACX5Q,KAAK4/C,cACR5/C,KAAK4/C,aAAajvC,SAASC,EAAOgvC,eAiBpCx/C,OAAAC,eAAWs/C,EAAAr/C,UAAA,eAOX,WACC,OAAON,KAAKO,iBAAiB,gBAR9B,SAAmBC,GAClBR,KAAKS,iBAAiB,UAAWD,GAAO,oCAkBzCJ,OAAAC,eAAWs/C,EAAAr/C,UAAA,mBAOX,WACC,OAAON,KAAKO,iBAAiB,oBAR9B,SAAuBC,GACtBR,KAAKS,iBAAiB,cAAeD,GAAO,oCAU9Cm/C,EAzIA,CAAkCpQ,GAAA,GAiJlCtuC,EAAA,EAASC,kBAAgC,aAAIw+C,GCxM7C,IAAAI,GAAA,SAAAlgD,GAgBC,SAAAmgD,IAAA,IAAAjgD,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,6BACjBH,EAAKI,eAGP,OAtBgDC,EAAA,EAAA4/C,EAAAngD,GAsBhDmgD,EAtBA,CAAgD9U,IAqEhD+U,GAAA,SAAApgD,GAmCC,SAAAqgD,IAAA,IAAAngD,EACCF,EAAAG,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,qBACjBH,EAAKI,eAsCP,OA7EwCC,EAAA,EAAA8/C,EAAArgD,GAgD7BqgD,EAAA3/C,UAAAgvC,qBAAV,WACC,OAAO,IAAIoQ,IAULO,EAAA3/C,UAAA8rC,wBAAP,SAA+B1pC,GAE9B,IAAI0oC,EAAS1oC,EAAS0oC,OAClBA,IACgB1oC,EAAS0oC,OAAOwU,aAEtBp0C,KAAO9I,EAAS0oC,OAAO5/B,KAEhCxL,KAAKyF,UAAYzF,KAAKoR,MACzBg6B,EAAOve,YAAc,aAGrBue,EAAOve,YAAc,YAIvBjtB,EAAAU,UAAM8rC,wBAAuBrsC,KAAAC,KAAC0C,IAEhCu9C,EA7EA,CAAwCxU,IAqFxCxqC,EAAA,EAASC,kBAAsC,mBAAI8+C,GACnD/+C,EAAA,EAASC,kBAA8C,2BAAI4+C,8CC1J3DI,GAAA,SAAAtgD,GAUC,SAAAugD,IAAA,IAAArgD,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,uBACjBH,EAAKI,eAEP,OAf0CC,EAAA,EAAAggD,EAAAvgD,GAe1CugD,EAfA,CAA0Cz+C,EAAA,GAsF1C0+C,GAAA,SAAAxgD,GAmDC,SAAAygD,IAAA,IAAAvgD,EAGCF,EAAAG,KAAAC,OAAOA,YAtBEF,EAAAwgD,UAAsB,SAuB/BxgD,EAAKG,UAAY,eAEjBH,EAAKW,iBAAiB,gBAAiB,KAGvCX,EAAKI,eAoLP,OAhPyEC,EAAA,EAAAkgD,EAAAzgD,GAsEjEygD,EAAA//C,UAAAqM,YAAP,SAAmBnM,EAAekJ,GACjC,OAAO1J,KAAKugD,kBAAkB72C,OAAOlJ,EAAOkJ,GAAU1J,KAAKwgD,qBAmBrDH,EAAA//C,UAAAyL,aAAP,SAAoB7I,EAAac,EAAawK,EAAoBjC,EAAmBk0C,GAEpF,IAAIC,MAEAv+C,EAAWnC,KAAK2gD,SAIpB,GAFA3gD,KAAKS,iBAAiB,eAAgB,GAEtB,eAAZ0B,GAAyC,UAAZA,GAAoC,UAAZA,GAAoC,QAAZA,EAAoB,CAEhGoK,GAAa,IAChBA,EAAY,GAGbA,EAAYvJ,KAAKC,MAAMsJ,GAEvB,IAAIq0C,EAAqB19C,EACrB29C,EAAqB78C,EAGN,IAAfwK,IACHA,EAAaxL,KAAKyL,IAAIzK,IAGvB,IAAIgI,EAEA80C,GAAY,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GACnCC,EAAc,EAEF,QAAZ5+C,IACH2+C,GAAY,GAAI,GAAI,EAAG,EAAG,EAAG,QAG9B,IAAoB,IAAAE,EAAA7gD,EAAA,EAAA2gD,GAAQG,EAAAD,EAAAnhC,QAAAohC,EAAAnhC,KAAAmhC,EAAAD,EAAAnhC,OAAA,CAAvB,IAAIqhC,EAAOD,EAAAzgD,MACf,GAAIgO,EAAa0yC,EAAU30C,EAAW,CACrCw0C,EAAcG,EACd,yGAGF,IAAI9+C,EAAQY,KAAKmC,MAAOnB,EAAMd,GAAO69C,EAAex0C,GAEhD40C,EAAmBn+C,KAAKo+C,IAAIp+C,KAAKyL,IAAIrM,IAAUY,KAAKq+C,OACpDC,EAAQt+C,KAAKu+C,IAAI,GAAIv+C,KAAKqC,MAAM87C,IAAa,GAC7CK,EAAep/C,EAAQk/C,EAM3Bt1C,EAAO+0C,GAFP3+C,EADciI,EAAA,QAAcy2C,EAAUU,GACpBF,GAKlBthD,KAAKugD,kBAAkBkB,aAAaz1C,EAAMhM,KAAK2gD,UAE/Cz9C,EAAMF,KAAKqC,MAAMnC,EAAM8I,GAAQA,EAC/BhI,EAAMhB,KAAKmC,KAAKnB,EAAMgI,GAAQA,EAE1By0C,KACHv9C,GAAO8I,GACG,GAAK40C,GAAc,IAC5B19C,EAAM,IAEPc,GAAOgI,GAEG,GAAK60C,GAAc,IAC5B78C,EAAM,IAGR08C,GAAex9C,IAAKA,EAAKc,IAAKA,EAAKgI,KAAMA,QAGzC00C,EAAa9gD,EAAAU,UAAMyL,aAAYhM,KAAAC,KAACkD,EAAKc,EAAKwK,EAAYjC,EAAWk0C,GAMlE,OAFAzgD,KAAKwgD,mBAAqBxgD,KAAKugD,kBAAkBmB,UAAUhB,EAAW10C,KAAM00C,EAAW18C,IAAKhE,KAAK2gD,UAE1FD,GAWRtgD,OAAAC,eAAWggD,EAAA//C,UAAA,6BAOX,WACC,OAAON,KAAK2hD,4BARb,SAAiCnhD,GAChCR,KAAK2hD,uBAAyBnhD,mCAqBxB6/C,EAAA//C,UAAA6O,eAAP,SAAsBpE,GACrB,IAAIvK,EAAgB6J,EAAA,MAAYrK,KAAKuN,gBAAgBxC,GAAW/K,KAAK4hD,oBACrE,OAAO5hD,KAAKuP,QAAQC,MAAM,iBAAkBxP,KAAK2M,YAAYnM,EAAOR,KAAK6hD,yBAc1EzhD,OAAAC,eAAWggD,EAAA//C,UAAA,gBAWX,WACC,OAAON,KAAKsgD,eAZb,SAAoBn+C,GACfnC,KAAKsgD,WAAan+C,IACrBnC,KAAKsgD,UAAYn+C,EACjBnC,KAAKugD,kBAAkBI,SAAWx+C,EAClCnC,KAAKa,+CAgBAw/C,EAAA//C,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACf5Q,KAAK2gD,SAAW/vC,EAAO+vC,UAEzBN,EAhPA,CAAyE3+C,EAAA,GAwPzET,EAAA,EAASC,kBAAgC,aAAIk/C,GAC7Cn/C,EAAA,EAASC,kBAAwC,qBAAIg/C,iCCnTrD4B,GAAA,SAAAliD,GAyBC,SAAAmiD,IAAA,IAAAjiD,EACCF,EAAAG,KAAAC,OAAOA,KAEPF,EAAKG,UAAY,eAEjB,IAAI+hD,EAASliD,EAAKmnB,YAAYwb,GAAA,UAC9Buf,EAAOx+B,aAAc,EACrBw+B,EAAOvkB,OAAS,EAChBukB,EAAO/oC,YAAa,EACpBnZ,EAAKkiD,OAASA,IAahB,OA/CkC7hD,EAAA,EAAA4hD,EAAAniD,GA2C1BmiD,EAAAzhD,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACf5Q,KAAKgiD,OAAOrxC,SAASC,EAAOoxC,SAE9BD,EA/CA,CAAkC9a,GAAA,GAuDlChmC,EAAA,EAASC,kBAAgC,aAAI4gD,GCtD7C,IAAAG,GAAA,SAAAriD,GAsBC,SAAAsiD,IAAA,IAAApiD,EACCF,EAAAG,KAAAC,OAAOA,YAEPF,EAAKG,UAAY,cACjBH,EAAKqiD,UAAYriD,EAAKmnB,YAAY5N,EAAA,GAClCvZ,EAAKqiD,UAAU3+B,aAAc,EAC7B1jB,EAAK4c,MAAQ,GACb5c,EAAK6c,OAAS,GACd7c,EAAK0nB,cAAgB,EACrB1nB,EAAKsiD,WAAY,IAsBnB,OArDiCjiD,EAAA,EAAA+hD,EAAAtiD,GAmChCsiD,EAAA5hD,UAAA2nB,iBAAA,WACCroB,EAAAU,UAAM2nB,iBAAgBloB,KAAAC,MACtB,IAAI4nB,EAAI5nB,KAAKgoB,WAAa,EACtBF,EAAI9nB,KAAK+nB,YAAc,EAE3B/nB,KAAKmiD,UAAU3lC,KAAOC,EAAA,QAAc1W,GAAG6hB,EAAGza,GAAG2a,IAAMrL,EAAA,QAAc1W,EAAE6hB,EAAGza,GAAG2a,IAAMrL,EAAA,QAAc1W,EAAE,EAAGoH,GAAG2a,IAAMrL,EAAA,QAAc1W,EAAE,EAAGoH,EAAE2a,IAAMrL,EAAA,QAAc1W,GAAG6hB,EAAGza,EAAE2a,IAAMrL,EAAA,QAAc1W,EAAE6hB,EAAGza,EAAE2a,KASjLo6B,EAAA5hD,UAAAqQ,SAAP,SAAgBC,GACfhR,EAAAU,UAAMqQ,SAAQ5Q,KAAAC,KAAC4Q,GACf5Q,KAAKmiD,UAAUxxC,SAASC,EAAOuxC,YAEjCD,EArDA,CAAiCjb,GAAA,GA6DjChmC,EAAA,EAASC,kBAA+B,YAAI+gD,qFCtF5CI,GAAA,SAAAziD,GAUC,SAAA0iD,IAAA,IAAAxiD,EACCF,EAAAG,KAAAC,OAAOA,YACPF,EAAKG,UAAY,wBACjBH,EAAKI,eAmBP,OAhC2CC,EAAA,EAAAmiD,EAAA1iD,GAqB1CQ,OAAAC,eAAWiiD,EAAAhiD,UAAA,YAOX,WACC,OAAON,KAAKgT,WAAiB,UAR9B,SAAgBxS,GACfR,KAAKiT,YAAY,OAAQzS,oCAU3B8hD,EAhCA,CAA2CC,GAAA,GA0F3CC,GAAA,SAAA5iD,GA2DC,SAAA6iD,IAAA,IAAA3iD,EAGCF,EAAAG,KAAAC,OAAOA,KACPF,EAAKG,UAAY,gBAEjB,IAAI6mB,EAAkB,IAAIC,EAAA,EAEtB27B,EAAW,IAAIC,GAAA,EACnBD,EAASrzB,OAAS,SAClBqzB,EAAS5V,WAAa,EACtB4V,EAAS1V,cAAgB,EAEzBltC,EAAKktC,cAAgB,EAErBltC,EAAKgrC,MAAQ,IAAIhpC,EAAA,EAAuB4gD,GACxC5iD,EAAKyT,WAAW7B,KAAK,IAAI5P,EAAA,EAAahC,EAAKgrC,QAC3ChrC,EAAKyT,WAAW7B,KAAKgxC,GAErB5iD,EAAK8iD,eAAiB,IAAIt9C,EAAA,aAA6BxF,EAAKgrC,MAAO,WAAM,OAAAhrC,EAAKgrC,MAAM9iC,WACpFlI,EAAK8iD,eAAe9oB,gBAAiB,EAErC,IAAI+oB,EAAW,IAAIC,GAAA,EACnBD,EAASE,UAAY,QACrBF,EAASnmC,MAAQ,EACjBmmC,EAASlmC,OAAS,GAClBkmC,EAASr3C,KAAOsb,EAAgBK,OAAO,yBACvC07B,EAAS37B,YAAc,GACvB27B,EAASxzB,OAAS,SAClBwzB,EAASG,WAAa,GACtBH,EAASrzB,YAAc,GAEvB1vB,EAAKmjD,WAAa,IAAInhD,EAAA,EAAuB+gD,GAC7C/iD,EAAKyT,WAAW7B,KAAK,IAAI5P,EAAA,EAAahC,EAAKmjD,aAC3CnjD,EAAKyT,WAAW7B,KAAKmxC,GAErB,IAAIK,EAAa,IAAIP,GAAA,SACrB7iD,EAAKojD,WAAaA,EAClBA,EAAWvyC,SAAS+xC,GACpBQ,EAAW7zB,OAAS,SACpB6zB,EAAWC,WAAa,OAExBrjD,EAAK4c,MAAQtc,OAAAmjB,EAAA,EAAAnjB,CAAQ,KACrBN,EAAKkuB,OAAS,OACdluB,EAAKgW,WAAW6E,KAAO,OAGvB7a,EAAKI,eA2CP,OArJmCC,EAAA,EAAAsiD,EAAA7iD,GAkH3B6iD,EAAAniD,UAAAwhB,qBAAP,WACC9hB,KAAK0vC,iBACL1vC,KAAK4iD,eAAer5B,QACpB3pB,EAAAU,UAAMwhB,qBAAoB/hB,KAAAC,OAUpByiD,EAAAniD,UAAAyJ,oBAAP,SAA2BrH,GAG1B,IAAIggD,EACJ,GAHA9iD,EAAAU,UAAMyJ,oBAAmBhK,KAAAC,KAAC0C,GAGtBA,EAAS2J,MAAQrM,KAAK6F,UAAUsC,OAAS,EAAG,EAC/Cu6C,EAAW1iD,KAAK4iD,eAAeQ,WACtBpjC,OAAShgB,KAClB,IAAIqjD,EAAYrjD,KAAKijD,WAAWj7C,SAChCq7C,EAAUrjC,OAAShgB,KACnBqjD,EAAUh0B,OAAS,cAGnBqzB,EAAW1iD,KAAKkjD,YACPtpC,OAAOjJ,SAAS3Q,KAAK8qC,MAAM/7B,SAAS6K,QAC7C8oC,EAAS/gC,KAAK,GACd+gC,EAAS1hC,OACT0hC,EAAS1iC,OAAShgB,KAEnB0iD,EAAShgD,SAAWA,EACpBggD,EAAS94C,KAAOlH,EAASiY,KACzB+nC,EAASvuC,YAEXsuC,EArJA,CAAmCa,GAAA,GA6JnCriD,EAAA,EAASC,kBAAiC,cAAIshD,GAC9CvhD,EAAA,EAASC,kBAAyC,sBAAImhD,GCzRtDkB,OAAAC,UAAmBC","file":"charts.js","sourcesContent":["/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { LineSeriesDataItem } from \"../series/LineSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tskipEmptyPeriods?: boolean;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the appropriate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\t\tthis.snapTooltip = true;\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit, gridInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count, this.dateFormatter.utc);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet baseInterval = this.baseInterval;\r\n\t\t\t\tlet maxZoomed = $time.add($time.round(new Date(this._maxZoomed), baseInterval.timeUnit, baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc), baseInterval.timeUnit, baseInterval.count, this.dateFormatter.utc).getTime() - 1;\r\n\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(maxZoomed, (x) => <number>x[field], \"right\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference(): number {\r\n\t\tvar minDifference = Number.MAX_VALUE;\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (minDifference > this._minDifference[series.uid]) {\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n\t\t\tminDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.baseInterval)) {\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t\t});\r\n\t\t\t\tseries._baseInterval[this.uid] = this.baseInterval;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\tlet series: XYSeries = dataItem.component;\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet time = date.getTime();\r\n\r\n\t\t\tlet startDate: Date = $time.round(new Date(time), baseInterval.timeUnit, baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tlet startTime = startDate.getTime();\r\n\t\t\tlet endDate: Date = $time.add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this.dateFormatter.utc);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startTime, \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tdataItemsByAxis.setKey(startTime.toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\t\tif (axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\t\tlet gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this.dateFormatter.utc);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getFirstWeekDay(): number {\r\n\t\tif (this.dateFormatter) {\r\n\t\t\treturn this.dateFormatter.firstDayOfWeek;\r\n\t\t}\r\n\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param date           [description]\r\n\t * @param intervalCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount, this.dateFormatter.utc).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(newDate, timeUnit, realIntervalCount, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount, this.dateFormatter.utc);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axisBreak  [description]\r\n\t * @param timeUnit   [description]\r\n\t * @param count      [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate($time.copy(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this.dateFormatter.utc);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this.dateFormatter.utc)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count, this.dateFormatter.utc).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this.dateFormatter.utc);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this.dateFormatter.utc)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\t\t\tlet fillEndPosition = endPosition;\r\n\r\n\t\t\tif (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param min  Min timestamp\r\n\t * @param max  Max timestamp\r\n\t * @return Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count, this.dateFormatter.utc).getTime();\r\n\t\treturn startTime + (endTime - startTime) * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count, this.dateFormatter.utc).getTime();\r\n\t\treturn startTime + (endTime - startTime) * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param index      [description]\r\n\t * @param duration   [description]\r\n\t * @param gridCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param date  Date\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param date  Date or a timestamp\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param date Date\r\n\t * @return IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param key       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime = time;\r\n\r\n\t\tif (series._baseInterval[this.uid]) {\r\n\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._baseInterval) {\r\n\t\t\t\tseries._baseInterval[this.uid] = this._baseInterval;\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\r\n\t\t\tbaseInterval.timeUnit = \"week\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\r\n\t\t\tbaseInterval.timeUnit = \"year\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tif (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n\t\t\tthis._baseInterval = timeInterval;\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position\r\n\t * @return Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position Source position\r\n\t * @param location  Location in the cell\r\n\t * @return Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(date, timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count, this.dateFormatter.utc);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\t\t\t\tif (!this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * If `findNearest` (third parameter) is set to `true`, the method will try\r\n\t * to locate nearest available data item if none is found directly under\r\n\t * `position`.\r\n\t *\r\n\t * @param series       Series\r\n\t * @param position     Position (px)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\tlet dataItem = dataItemsByAxis.getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\t\t\t/*\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\r\n\t\t\twhile (leftDate.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = dataItemsByAxis.getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t\tif (leftCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (rightDate.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = dataItemsByAxis.getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t\tif (rightCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t\tlet key: \"dateX\" | \"dateY\";\r\n\r\n\t\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\t\tkey = \"dateY\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tkey = \"dateX\";\r\n\t\t\t}\r\n\r\n\t\t\tdataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), (x) => <number>x[key].getTime(), \"any\"));\r\n\t\t}\r\n\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\t// @todo Better format recognition\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param startDate       Start date\r\n\t * @param endValue        End date\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif (source[\"_baseInterval\"]) {\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\r\n\t\tif (this.snapTooltip) {\r\n\t\t\tlet actualDate = $time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\t\tlet actualTime = actualDate.getTime();\r\n\t\t\tlet closestDate: Date;\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet dataItem = this.getSeriesDataItem(series, position, true);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet date: Date;\r\n\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateY;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!closestDate) {\r\n\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (Math.abs(closestDate.getTime() - actualTime) > Math.abs(date.getTime() - actualTime)) {\r\n\t\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (closestDate) {\r\n\t\t\t\tlet closestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = $time.round(new Date(closestTime), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\t\tclosestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = new Date(closestDate.getTime() + this.baseDuration * this.renderer.tooltipLocation);\r\n\t\t\t\tposition = this.dateToPosition(closestDate);\r\n\r\n\t\t\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\t\tthis.series.each((series) => {\r\n\r\n\t\t\t\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(closestTime.toString());\r\n\t\t\t\t\tlet point = series.showTooltipAtDataItem(dataItem);\r\n\t\t\t\t\tif (point) {\r\n\t\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// check, otherwise column tooltip will be hidden\r\n\t\t\t\t\t\tif (series.tooltipText) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tthis.chart.sortSeriesTooltips(seriesPoints);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.showTooltipAtPosition(position, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current grid interval.\r\n\t *\r\n\t * @return Grid interval\r\n\t */\r\n\tpublic get gridInterval(): ITimeInterval {\r\n\t\treturn this._gridInterval;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeGap(dataItem: LineSeriesDataItem, previous: LineSeriesDataItem): boolean {\r\n\t\tlet series = dataItem.component;\r\n\t\tif(dataItem && previous){\r\n\t\t\tif(!series.connect && $type.isNumber(series.autoGapCount)){\r\n\t\t\t\tif(series.baseAxis == this){\r\n\t\t\t\t\tlet time = dataItem.dates[\"date\" + this.axisLetter].getTime();\r\n\t\t\t\t\tlet prevTime = previous.dates[\"date\" + this.axisLetter].getTime();\r\n\r\n\t\t\t\t\tif(time - prevTime > series.autoGapCount * this.baseDuration){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents, IAxisDataItemAdapters } from \"./Axis\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Adapter } from \"../../core/utils/Adapter\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t */\r\n\tpublic adapter = new Adapter<CategoryAxisDataItem, ICategoryAxisDataItemAdapters>(this);\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\tif (this.adapter.isEnabled(\"category\")) {\r\n\t\t\treturn this.adapter.apply(\"category\", this.properties[\"category\"]);\r\n\t\t}\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisDataItemAdapters extends IAxisDataItemAdapters {\r\n\tcategory: string;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet firstSeriesDataItem: XYSeriesDataItem;\r\n\t\t\t\tlet lastSeriesDataItem: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet startIndex = this.positionToIndex(this.start);\r\n\t\t\t\tlet endIndex = this.positionToIndex(this.end);\r\n\r\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet fdi = this.getFirstSeriesDataItem(series, dataItem.category);\r\n\t\t\t\t\t\tif (fdi) {\r\n\t\t\t\t\t\t\tif (!firstSeriesDataItem) {\r\n\t\t\t\t\t\t\t\tfirstSeriesDataItem = fdi;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (firstSeriesDataItem && fdi.index < firstSeriesDataItem.index) {\r\n\t\t\t\t\t\t\t\tfirstSeriesDataItem = fdi;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet ldi = this.getLastSeriesDataItem(series, dataItem.category);\r\n\t\t\t\t\t\tif (ldi) {\r\n\t\t\t\t\t\t\tif (!lastSeriesDataItem) {\r\n\t\t\t\t\t\t\t\tlastSeriesDataItem = ldi;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (lastSeriesDataItem && ldi.index > lastSeriesDataItem.index) {\r\n\t\t\t\t\t\t\t\tlastSeriesDataItem = ldi;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (firstSeriesDataItem) {\r\n\t\t\t\t\tseries.startIndex = firstSeriesDataItem.index;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.start = this.start;\r\n\t\t\t\t}\r\n\t\t\t\tif (lastSeriesDataItem) {\r\n\t\t\t\t\tseries.endIndex = lastSeriesDataItem.index + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.end = this.end;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tstartIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tendIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.validateBreaks();\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t\tthis.renderer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem   [description]\r\n\t * @param itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif (!dataItem.isRange || label.text == undefined) {\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\r\n\t\t\tif (dataItem.label.measuredWidth > this.ghostLabel.measuredWidth || dataItem.label.measuredHeight > this.ghostLabel.measuredHeight) {\r\n\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\t\tfillPosition = this.indexToPosition(index, fill.location);\r\n\t\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, fill.location);\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData(){\r\n\t\tthis.dataItemsByCategory.clear();\r\n\t\tsuper.disposeData();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\t//let existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\t//if (existingDataItem && existingDataItem != dataItem) {\r\n\t\t//\tthis.dataItems.remove(existingDataItem);\r\n\t\t//}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\tlet category: string = <string>(dataContext[this.dataFields.category]);\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.dataItems.create();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param index     Index\r\n\t * @param location  Location (0-1)\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param category  Category\r\n\t * @return Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param startCategory  Start category\r\n\t * @param endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start         [description]\r\n\t * @param end           [description]\r\n\t * @param startLocation [description]\r\n\t * @param endLocation   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param position  Source position (px)\r\n\t * @param location  Location within category (0-1)\r\n\t * @return Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns first series data item with specific category\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getFirstSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = 0; i < series.dataItems.length; i++) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns last series data item with specific category.\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getLastSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = series.dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param series    Target series\r\n\t * @param position  Position (px)\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tif ($type.isNumber(position)) {\r\n\r\n\t\t\tlet index = this.positionToIndex(position);\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet category = dataItem.category;\r\n\t\t\t\tlet sdi: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet seriesDataItem = series.dataItems.getIndex(index);\r\n\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryX == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryY == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//@todo\r\n\t\t\t\tif (findNearest) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn sdi;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack key (?)\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\t\tif (position < 0) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Current frequency of labels of the axis.\r\n\t *\r\n\t * Normally it would be 1, but when labels start to be hidden due\r\n\t * to `minGridDistance` this read-only property will increase.\r\n\t *\r\n\t * @readonly\r\n\t * @since 4.2.0\r\n\t * @return Label frequency\r\n\t */\r\n\tpublic get frequency(): number {\r\n\t\treturn this._frequency;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tcursorHoverEnabled?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _baseInterval: { [index: string]: ITimeInterval } = {};\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.cursorTooltipEnabled = true;\r\n\r\n\t\tthis.cursorHoverEnabled = true;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param axis    Axis\r\n\t * @param fields  Fields (?)\r\n\t * @param field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param axis  Axis\r\n\t * @return Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis.y = this.yAxis.pixelY;\r\n\t\tthis.x = this.xAxis.pixelX;\r\n\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tif (!working) {\r\n\t\t\tstartIndex = 0;\r\n\t\t\tendIndex = this.dataItems.length;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tminY = $math.min(minY, stackY);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tminX = $math.min(minX, stackX);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tif (this.stackedSeries) {\r\n\t\t\t\t\tthis.stackedSeries.processValues(false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared || this.start != 0 || this.end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tif (this.cursorTooltipEnabled) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\t\tif (this.visible && !this.isHiding && !this.isShowing) {\r\n\r\n\t\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet point = this.showTooltipAtDataItem(dataItem);\r\n\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\treturn point;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\t\tif (!this.tooltipText) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.hideTooltip();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific dataItem.\r\n\t *\r\n\t * @param dataItem\r\n\t */\r\n\tpublic showTooltipAtDataItem(dataItem: this[\"_dataItem\"]): IPoint {\r\n\t\tthis.returnBulletDefaultState(dataItem);\r\n\t\tif (this.cursorTooltipEnabled) {\r\n\t\t\tif (dataItem && dataItem.visible) {\r\n\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.cursorHoverEnabled) {\r\n\t\t\t\t\t\t\tfor (let sprite of dataItem.sprites) {\r\n\t\t\t\t\t\t\t\tif (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let sprite of this._prevTooltipDataItem.sprites) {\r\n\t\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position?\r\n\t *\r\n\t * @default false\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (interpolationDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthis.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem   [description]\r\n\t * @param xKey       [description]\r\n\t * @param yKey       [description]\r\n\t * @param locationX  [description]\r\n\t * @param locationY  [description]\r\n\t * @param stackKeyX  [description]\r\n\t * @param stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * If set to `true` (default), the tooltips set for all series item's\r\n\t * elements like columns and bullets will be automatically shown\r\n\t * when [[XYCursor]] passes over category/date, even if its not hovered\r\n\t * directly over the item.\r\n\t *\r\n\t * Set this to `false` to disable such behavior and display item-specific\r\n\t * tooltips only when hovered directly over them\r\n\t *\r\n\t * @default true\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t *\r\n\t * If set to `true` (default) and chart cursor is enabled on th chart,\r\n\t * hovering over date/category will trigger hover states on related Series\r\n\t * items like bullets and columns.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t * @param  value  Hover enabled?\r\n\t */\r\n\tpublic set cursorHoverEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorHoverEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hover enabled?\r\n\t */\r\n\tpublic get cursorHoverEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorHoverEnabled\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * non-modified down point\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * non-modified up point\r\n\t * @ignore\r\n\t */\r\n\tprotected _upPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param point  Point to place cursor at\r\n\t * @param stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\tthis.updateSelection();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\r\n\t\tif (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tthis._downPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.shouldPreventGestures() && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * Child classes should override this as necessary.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis._upPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t */\r\n\tsnapToSeries: XYSeries;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tif ((this.snapToSeries && !this.snapToSeries.isHidden)) {\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > getInteraction().getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tthis.getRanges();\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.selection.hide(0);\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(): boolean {\r\n\t\treturn this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries) && $type.isString(config.snapToSeries)) {\r\n\t\t\t\tif (this.map.hasKey(config.snapToSeries)) {\r\n\t\t\t\t\tconfig.snapToSeries = this.map.getKey(config.snapToSeries);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + config.snapToSeries + \"\\\" found for `series`\");\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t *\r\n\t * @param {XYSeries}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\t\t\tif (this._snapToDisposer) {\r\n\t\t\t\tthis._snapToDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tthis._snapToDisposer = series.events.on(\"tooltipshownat\", this.handleSnap, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\t/**\r\n\t * [handleSnap description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleSnap() {\r\n\r\n\t\tlet series = this.snapToSeries;\r\n\t\tlet y = series.tooltipY;\r\n\t\tlet x = series.tooltipX;\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tif (this.xAxis.renderer.opposite) {\r\n\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.point = { x: x, y: y };\r\n\t\tthis.getPositions();\r\n\r\n\t\tlet xx = x;\r\n\t\tlet yy = y;\r\n\r\n\t\tx -= this.pixelWidth;\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tif (this.yAxis.renderer.opposite) {\r\n\t\t\t\tx += this.pixelWidth;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet tooltip = series.tooltip;\r\n\t\tlet duration = tooltip.animationDuration;\r\n\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t}\r\n\r\n\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t}\r\n\r\n\t\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\tif (!this.xAxis) {\r\n\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t}\r\n\t\tif (!this.yAxis) {\r\n\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.padding(0,0,0,0);\r\n\t\t\trenderer.margin(0,0,0,0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\t\t\r\n\t\t\trenderer.padding(0,0,0,0);\r\n\t\t\trenderer.margin(0,0,0,0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif(!axis.renderer){\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\t\t\r\n\t\taxis.events.on(\"startchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\taxis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif(!axis.renderer){\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\t\t\r\n\t\taxis.events.on(\"startchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\taxis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif(this.xAxes.length == 0 || this.yAxes.length == 0){\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxis: Axis;\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\t\t\tif (snapToSeries) {\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.xAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.yAxis;\r\n\t\t\t\t}\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.yAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxis);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxis);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\tlet point = seriesPoint.point;\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\tsum += point.y;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet averageY = sum / seriesPoints.length;\r\n\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t// TODO is this needed ?\r\n\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\tlet dropped = false;\r\n\r\n\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\tlet nextY = top;\r\n\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (axis != except) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, locationX);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, locationX);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, locationY);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, locationY);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\t\t\r\n\t\t\r\n\t\tsource.xAxes.each((axis)=>{\r\n\t\t\tthis.xAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis)=>{\r\n\t\t\tthis.yAxes.push(axis.clone());\r\n\t\t})\t\t\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif(source.cursor){\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif(source.scrollbarX){\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif(source.scrollbarY){\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarX.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarY.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { LegendDataItem } from \"../Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t * \r\n\t * @default 1.1\r\n\t */\r\n\tautoGapCount?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\tprotected _adjustedStartIndex: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.autoGapCount = 1.1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// this makes data items animate when added\r\n\r\n\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryX\", dataItem.locations.categoryX);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryY\", dataItem.locations.categoryY);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegmentWrapper(this._adjustedStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n  \t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._adjustedStartIndex = this.findAdjustedIndex(startIndex, [\"stroke\", \"strokeWidth\", \"strokeDasharray\", \"strokeOpacity\", \"fill\", \"fillOpacity\", \"opacity\"]);\r\n\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected findAdjustedIndex(adjustedIndex: number, properties: string[]): number {\r\n\t\tlet propertyFields: any = this.propertyFields;\r\n\t\tlet startIndex = adjustedIndex;\r\n\r\n\t\t$array.each(properties, (property) => {\r\n\t\t\tif ($type.hasValue(propertyFields[property])) {\r\n\t\t\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif ($type.hasValue(dataItem.properties[property])) {\r\n\t\t\t\t\t\tif (adjustedIndex > i) {\r\n\t\t\t\t\t\t\tadjustedIndex = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn adjustedIndex;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Wraps openSegment call with iterative solution to prevent stack overflow\r\n\t *\r\n\t * @param openIndex  Index\r\n\t * @param axisRange  Range\r\n\t */\r\n\tprotected openSegmentWrapper(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet params = {\r\n\t\t\t\"index\": openIndex,\r\n\t\t\t\"axisRange\": axisRange\r\n\t\t};\r\n\t\tdo {\r\n\t\t\tparams = this.openSegment(params.index, params.axisRange);\r\n\t\t} while (params)\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param openIndex  [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): { \"index\": number, \"axisRange\": AxisDataItem } {\r\n\t\tlet addToClose = false;\r\n\t\tlet points: IPoint[] = [];\r\n\t\topenIndex = Math.min(openIndex, this.dataItems.length);\r\n\t\tlet endIndex: number = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\t\tthis._workingEndIndex = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (this.baseAxis instanceof DateAxis) {\r\n\t\t\t\tlet next = this.dataItems.getIndex(i + 1)\r\n\t\t\t\tif (next && this.baseAxis.makeGap(next, dataItem)) {\r\n\t\t\t\t\taddToClose = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.closeSegment(segment, points, openIndex, closeIndex, axisRange, addToClose);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment    [description]\r\n\t * @param points     [description]\r\n\t * @param openIndex  [description]\r\n\t * @param closeIndex [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem, add?: boolean) {\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (add) {\r\n\t\t\tcloseIndex++;\r\n\t\t}\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\treturn { \"index\": closeIndex, \"axisRange\": axisRange };\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param itemProperties  Item properties\r\n\t * @param segment         Segment\r\n\t * @return Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"connect\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\r\n\t/*\r\n   public positionBullet(bullet: Bullet): void {\r\n\t   super.positionBullet(bullet);\r\n\r\n\t   let dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t   if (dataItem.segment) {\r\n\t\t   $object.softCopyProperties(dataItem.segment, bullet, visualProperties);\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.stroke;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @since 4.2.4\r\n\t * @param  value  Gap count\r\n\t */\r\n\tpublic set autoGapCount(value: number) {\r\n\t\tthis.setPropertyValue(\"autoGapCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Gap count\r\n\t */\r\n\tpublic get autoGapCount(): number {\r\n\t\treturn this.getPropertyValue(\"autoGapCount\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param xKey      [description]\r\n\t * @param yKey      [description]\r\n\t * @param locationX [description]\r\n\t * @param locationY [description]\r\n\t * @param stackKeyX [description]\r\n\t * @param stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tbullet.y = bullet.pixelY - slice.depth;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tif (this.setPropertyValue(\"depth\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tvalue = $math.fitToRange(value, 0, 90);\r\n\t\tif (this.setPropertyValue(\"angle\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tlet label = this.createChild(AxisLabelCircular);\r\n\t\tlabel.location = 0.5;\r\n\t\tlabel.radius = 5;\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.zIndex = 1;\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.fixPosition(labelAngle, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = this.yAxis.axisLength;\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = this.xAxis.axisLength;\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem)=>{\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem)=>{\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to `1` to disable drill down functionality.\r\n\t *\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (series.level == 1) {\r\n\t\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif(this.chart){\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count );\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.columns.each((column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]) {\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.stroke;\r\n\t\tlegendDataItem.colorOrig = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param xKey      [description]\r\n\t * @param yKey      [description]\r\n\t * @param locationX [description]\r\n\t * @param locationY [description]\r\n\t * @param stackKeyX [description]\r\n\t * @param stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif(sum == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - newHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y;\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - newWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t}\r\n\r\n\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Dfines type of the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\t// TODO can this be removed ?\r\n\t\t\tthis.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ErrorBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = null\n// module chunks = "],"sourceRoot":""}