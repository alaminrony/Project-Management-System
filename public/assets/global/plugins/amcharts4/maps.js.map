{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/map/MapObject.ts","webpack:///../../../../../src/.internal/charts/map/MapImage.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygon.ts","webpack:///../../../../../src/.internal/charts/map/Geo.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Projection.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/types/MapChart.ts","webpack:///../../../../../src/.internal/charts/map/MapLineObject.ts","webpack:///../../../../../src/.internal/charts/map/MapLine.ts","webpack:///../../../../../src/.internal/charts/map/MapSpline.ts","webpack:///../../../../../src/.internal/charts/map/MapArc.ts","webpack:///../../../../../src/.internal/charts/map/MapUtils.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygonSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapLineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapSplineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapImageSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapArcSeries.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Mercator.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Miller.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Eckert6.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Orthographic.ts","webpack:///./maps.js"],"names":["MapObject_MapObject","_super","MapObject","_this","call","this","className","isMeasured","layout","clickable","applyTheme","tslib_es6","prototype","validate","series","readerTitle","itemReaderText","Container","Registry","registeredClasses","MapImage_MapImage","MapImage","Object","defineProperty","getPropertyValue","value","setPropertyValue","validatePosition","Type","latitude","longitude","moveTo","chart","projection","convert","MapPolygon_MapPolygon","MapPolygon","polygon","createChild","Polygon","shouldClone","interfaceColors","InterfaceColorSet","fill","getFor","stroke","strokeOpacity","tooltipPosition","nonScalingStroke","multiGeoPolygon","points","projectGeoArea","measureElement","dataItem","north","south","east","west","pixelWidth","pixelHeight","normalizePoint","geoPoint","wrapAngleTo180","Math","asin","sin","utils_Math","latitude180","abs","normalizeMultiline","multiline","multiline_1","multiline_1_1","next","done","segment","segment_1","segment_1_1","point","angle","geoToPoint","x","y","Projection_Projection","Projection","deltaLongitude","deltaLatitude","deltaGama","centerPoint","scale","geoArea","clippedGeoArea","clipGeoArea","convertGeoArea","projectGeoLine","geoLine","convertGeoLine","clipGeoLine","getClipRectangle1","getClipRectangle2","getRect1","getRect2","clippedLine","clipRectangle1","clipRectangle2","i","len","length","clippedSegments","clipLine","concat","clippedSegments2","clippedArea","rect1","rect2","surface","hole","clippedAreas","surfaceRect","getExtremes","isInside","isOutside","push","clippedSurface1","clip","clippedHole1","clippedSurface2","clippedHole2","clippedAreas_1","clippedAreas_1_1","area","convertedPoints","convertedAreaPoints","convertedSurface","s","slen","convertedHole","hlen","convertedSegmentPoints","rotate","pointInRadians","project","invert","unproject","unrotate","lambda","phi","deltaGamma","deltaLambda","deltaPhi","cosDeltaPhi","cos","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","z","k","atan2","subjectPolyline","clipPolygon","cp1","cp2","e","inside","p","intersection","dc","dp","n1","n2","n3","j","inputList","subjectPolygon","outputList","geoPoints","r1","r2","intermediatePoint","pointA","pointB","position","phi1","lambda1","phi2","lambda2","sinPhi1","cosPhi1","sinLambda1","cosLambda1","sinPhi2","cosPhi2","sinLambda2","cosLambda2","a","delta","sqrt","A","B","phi3","lambda3","SmallMap_SmallMap","SmallMap","_chart","Disposer","align","valign","percentHeight","percentWidth","margin","background","fillOpacity","events","on","moveToPosition","updateMapSize","seriesContainer","rectangle","Rectangle","strokeWidth","Color","verticalCenter","horizontalCenter","_disposers","_series","List","handleSeriesAdded","handleSeriesRemoved","event","newValue","contains","newSeries","clone","removeValue","dataUsers","parent","interactionsEnabled","invalidate","rectPoint","Utils","spritePoint","seriesPointToGeo","zoomToGeoPoint","zoomLevel","get","set","updateRectangle","width","height","min","ceil","pixelX","pixelY","scaleRatio","afterDraw","maskRectangle","processConfig","config","map","hasKey","getKey","MapChart_MapChartDataItem","MapChartDataItem","SerialChart","MapChart_MapChart","MapChart","zoomDuration","zoomEasing","Ease","minZoomLevel","maxZoomLevel","_prevZoomGeoPoint","maxPanOut","homeZoomLevel","zoomStep","padding","minWidth","minHeight","once","handleAllInited","draggable","visible","inert","resizable","handleMapTransform","handleDoubleHit","handleDrag","zIndex","updateExtremes","chartContainer","inited","_mapAnimation","stop","updateScaleRatio","_zoomGeoPointReal","each","updateTooltipBounds","undefined","chartContainerBg","dragStart","target","interactions","downPointers","getIndex","dragStop","focusable","handleMapDown","language","translate","Interaction","body","ev","topParent","hasFocused","_zoomControl","thumb","isFocused","Keyboard","getEventKey","pan","mouseWheelBehavior","goHome","ww","seriesWidth","hh","seriesHeight","minX","maxWidth","maxX","max","minY","maxHeight","maxY","zoomGeoPoint","applyInternalDefaults","svgPoint","htmlContainer","svgContainer","cssScale","svgPointToGeo","zoomIn","handleWheel","shift","zoomOut","_mouseWheelDisposer","dispose","wheelable","invalidateProjection","pWest","pEast","pNorth","pSouth","Iterator","iterator","northPoint","southPoint","westPoint","eastPoint","vScale","innerWidth","hScale","innerHeight","Infinity","projectionScaleChanged","northPoint2","westPoint2","_centerGeoPoint","definedBBox","dispatch","seriesPoint","geoPointToSVG","geoPointToSeries","_geodata","geodata","invalidateData","_dataUsers","center","duration","mapPoint","animate","property","to","pixelPaddingLeft","pixelPaddingTop","zoomToMapObject","mapObject","dataItem_1","bbox","polygonPoint","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","removeDispose","zoomControl","createSeries","MapSeries","_dataSources","getDataSource","component","loadData","setDataSourceEvents","name_1","window","JSON","parse","Error","createClassInstance","type","configOrder","b","asIs","field","homeGeoPoint","centerGeoPoint","setPaper","paper","hideOverflow","setLegend","legend","MapLineObject_MapLineObject","MapLineObject","adjustRotation","mapLine","positionToPoint","rotation","MapLine_MapLine","MapLine","createLine","line","shortestDistance","Polyline","multiGeoLine","images","image","imagesToConnect","_a","_b","newMultiGeoLine","newGeoLine","plen","geoPointA","geoPointB","stepCount","d","previousPoint","segments","_arrow","lineObjects","handleGlobalScale","_lineObjects","handleLineObjectAdded","template","mapLineObject","arrow","triangle","Triangle","Percent","copyFrom","source","getTooltipX","getTooltipY","MapSpline_MapSpline","MapSpline","Polyspline","tensionX","tensionY","MapArc_MapArc","MapArc","Polyarc","multiPolygonToGeo","multiPolygon","multiGeoArea","multiPointToGeo","multiLineToGeo","multiLine","pointToGeo","MapPolygonSeries_MapPolygonSeriesDataItem","MapPolygonSeriesDataItem","_mapPolygon","mapPolygon_1","mapPolygons","create","addSprite","_polygon","_multiPolygon","_geoPolygon","geoPolygon","_multiGeoPolygon","updateAreaExtremes","mapPolygon","MapPolygonSeries_MapPolygonSeries","MapPolygonSeries","parsingStepDuration","dataFields","createDataItem","processIncExc","clear","validateData","data","_parseDataFrom","useGeodata","geoJSON","features","indexOf","geometry","console","log","feature","id_1","id","this_1","checkInclude","include","exclude","coordinates","dataObject","utils_Array","properties","dataItems","moveValue","_mapPolygons","polygonTemplate","handleObjectAdded","getPolygonById","dataContext","MapLineSeries_MapLineSeriesDataItem","MapLineSeriesDataItem","_mapLine","mapLine_1","mapLines","_line","_multiLine","_geoLine","_multiGeoLine","updateLineExtremes","MapLineSeries_MapLineSeries","MapLineSeries","_mapLines","lineTemplate","MapSplineSeries_MapSplineSeriesDataItem","MapSplineSeriesDataItem","MapSplineSeries_MapSplineSeries","MapSplineSeries","MapImageSeries_MapImageSeriesDataItem","MapImageSeriesDataItem","_mapImage","mapImage_1","mapImages","_point","_geoPoint","mapImage","MapImageSeries_MapImageSeries","MapImageSeries","multiPoint","multiGeoPoint","_mapImages","validateDataElement","MapArcSeries_MapArcSeriesDataItem","MapArcSeriesDataItem","MapArcSeries_MapArcSeries","MapArcSeries","ZoomControl_ZoomControl","ZoomControl","plusButton","Button","label","text","slider","handleBackgroundClick","updateThumbSize","handleThumbDrag","minusButton","role","readerLive","fixLayout","marginTop","marginBottom","toFront","toBack","sprite","maxPower","LN2","minPower","power","pow","updateThumb","isKey","isDown","step","createBackground","RoundedRectangle","Mercator_Mercator","Mercator","atan","exp","PI","tan","Miller_Miller","Miller","Eckert6_Eckert6","Eckert6","Orthographic_Orthographic","Orthographic","len_1","prevPoint","i_1","extraPoints","splice","apply","am4maps","maps_namespaceObject"],"mappings":"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","file":"maps.js","sourcesContent":["/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A custom zoom level to use when `zoomToMapObject()` is called on this\r\n\t * map object.\r\n\t */\r\n\tzoomLevel?: number;\r\n\r\n\t/**\r\n\t * A custom point to use when `zoomToMapObject()` is called on this map\r\n\t * object.\r\n\t */\r\n\tzoomGeoPoint?: IGeoPoint;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\t}\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapObject.ts","/**\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\tthis.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImage.ts","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================f================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapPolygonEvents;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t *\r\n\t * @param multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoPolygon\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.polygon.points = this.series.chart.projection.projectGeoArea(this.multiGeoPolygon);\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center latitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center longitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this\r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygon.ts","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: IGeoPoint[][]): IGeoPoint[][] {\r\n\tfor (let segment of multiline) {\r\n\t\tfor (let point of segment) {\r\n\t\t\tpoint = normalizePoint(point);\r\n\t\t}\r\n\t}\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Geo.ts","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as $geo from \"../Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\tpublic deltaLongitude: number = 0;\r\n\r\n\tpublic deltaLatitude: number = 0;\r\n\r\n\tpublic deltaGama: number = 0;\r\n\r\n\tpublic centerPoint: IPoint = { x: 0, y: 0 };\r\n\r\n\tpublic scale: number = 1;\r\n\r\n\tpublic projectGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tlet clippedGeoArea: IGeoPoint[][][] = this.clipGeoArea(geoArea);\r\n\t\tlet convertedPoints: IPoint[][][] = this.convertGeoArea(clippedGeoArea);\r\n\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tpublic projectGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\treturn this.convertGeoLine(this.clipGeoLine(geoLine));\r\n\t}\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: -180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: -180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t//let latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude + smallNum, latitude: -90 }, { longitude: 180, latitude: -90 }, { longitude: 180, latitude: 90 }, { longitude: longitude + smallNum, latitude: 90 }];\r\n\t}\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude, east: (longitude + 180) };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoLine(geoLine: IGeoPoint[][]): IGeoPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedLine: IGeoPoint[][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tif (segment) {\r\n\t\t\t\tlet clippedSegments: IGeoPoint[][] = this.clipLine(segment, clipRectangle1);\r\n\t\t\t\tclippedLine = clippedLine.concat(clippedSegments);\r\n\r\n\t\t\t\tif (this.deltaLongitude != 0) {\r\n\t\t\t\t\tlet clippedSegments2: IGeoPoint[][] = this.clipLine(segment, clipRectangle2);\r\n\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedLine;\r\n\t}\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\tprotected convertGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet convertedPoints: IPoint[][][] = [];\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet convertedAreaPoints: IPoint[][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\t\t\t\tlet convertedSurface: IPoint[] = [];\r\n\r\n\t\t\t\tfor (let s = 0, slen = surface.length; s < slen; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(surface[s]);\r\n\r\n\t\t\t\t\tconvertedSurface.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedSurface);\r\n\t\t\t}\r\n\r\n\t\t\tif (hole) {\r\n\t\t\t\tlet convertedHole: IPoint[] = [];\r\n\t\t\t\tfor (let s = 0, hlen = hole.length; s < hlen; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(hole[s]);\r\n\r\n\t\t\t\t\tconvertedHole.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedHole);\r\n\t\t\t}\r\n\t\t\tconvertedPoints.push(convertedAreaPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tprotected convertGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet convertedPoints: IPoint[][] = [];\r\n\r\n\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\r\n\t\t\tfor (let s = 0, slen = segment.length; s < slen; s++) {\r\n\t\t\t\tlet geoPoint: IGeoPoint = segment[s];\r\n\r\n\t\t\t\tlet point: IPoint = this.convert(geoPoint);\r\n\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t}\r\n\r\n\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param geoPoint Geo point (lat/long)\r\n\t * @return Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 4) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 4) * this.scale\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param point Screen point (x/y)\r\n\t * @return Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\r\n\t\treturn geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own\r\n\t * projection logic.\r\n\t * @param lambda [description]\r\n\t * @param phi    [description]\r\n\t * @return X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: lambda, y: phi };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own\r\n\t * projection logic.\r\n\t * @param x X coordinate\r\n\t * @param y Y coordinate\r\n\t * @return Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn { longitude: x, latitude: y };\r\n\t}\r\n\r\n\r\n\trotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\tunrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\r\n\tclipLine(subjectPolyline: IGeoPoint[], clipPolygon: IGeoPoint[]): IGeoPoint[][] {\r\n\r\n\t\tif (!subjectPolyline || subjectPolyline.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar segment: IGeoPoint[] = subjectPolyline;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j = 0; j < clipPolygon.length; ++j) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = segment;\r\n\t\t\tsegment = [];\r\n\t\t\ts = inputList[0];\r\n\t\t\tfor (let i = 0, len = inputList.length; i < len; i++) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsegment.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\r\n\t\treturn [segment];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//@todo add credits to roseta code\r\n\t//@todo: someday make it better\r\n\tclip(subjectPolygon: IGeoPoint[], clipPolygon: IGeoPoint[]) {\r\n\r\n\t\tif (!subjectPolygon || subjectPolygon.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar outputList = subjectPolygon;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j = 0; j < clipPolygon.length; ++j) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = outputList;\r\n\t\t\toutputList = [];\r\n\t\t\ts = inputList[inputList.length - 1]; //last on the input list\r\n\r\n\t\t\tfor (let i = 0, len = inputList.length; i < len; ++i) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutputList.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t}\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\t\treturn outputList;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic getExtremes(geoPoints: IGeoPoint[]): IGeoRectangle {\r\n\r\n\t\tlet west: number = geoPoints[0].longitude;\r\n\t\tlet east: number = geoPoints[0].longitude;\r\n\t\tlet north: number = geoPoints[0].latitude;\r\n\t\tlet south: number = geoPoints[0].latitude;\r\n\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((west > longitude)) {\r\n\t\t\t\twest = longitude;\r\n\t\t\t}\r\n\t\t\tif ((east < longitude)) {\r\n\t\t\t\teast = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((north < latitude)) {\r\n\t\t\t\tnorth = latitude;\r\n\t\t\t}\r\n\t\t\tif ((south > latitude)) {\r\n\t\t\t\tsouth = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { north: north, east: east, south: south, west: west };\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isInside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.north < r2.north && r1.south > r2.south && r1.west > r2.west && r1.east < r2.east) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isOutside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.south > r2.north || r1.north < r2.south || r1.west > r2.east || r1.east < r2.west) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number) {\r\n\t\tvar phi1 = pointA.latitude * $math.RADIANS;\r\n\t\tlet lambda1 = pointA.longitude * $math.RADIANS;\r\n\r\n\t\tlet phi2 = pointB.latitude * $math.RADIANS;\r\n\t\tlet lambda2 = pointB.longitude * $math.RADIANS;\r\n\r\n\t\tvar sinPhi1 = Math.sin(phi1);\r\n\t\tlet cosPhi1 = Math.cos(phi1);\r\n\t\tlet sinLambda1 = Math.sin(lambda1);\r\n\t\tlet cosLambda1 = Math.cos(lambda1);\r\n\t\tvar sinPhi2 = Math.sin(phi2);\r\n\t\tlet cosPhi2 = Math.cos(phi2);\r\n\t\tlet sinLambda2 = Math.sin(lambda2);\r\n\t\tlet cosLambda2 = Math.cos(lambda2);\r\n\r\n\t\t// distance between points\r\n\t\tvar deltaPhi = phi2 - phi1;\r\n\t\tvar deltaLambda = lambda2 - lambda1;\r\n\t\tvar a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) + Math.cos(phi1) * Math.cos(phi2) * Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n\t\tvar delta = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n\t\tvar A = Math.sin((1 - position) * delta) / Math.sin(delta);\r\n\t\tvar B = Math.sin(position * delta) / Math.sin(delta);\r\n\r\n\t\tvar x = A * cosPhi1 * cosLambda1 + B * cosPhi2 * cosLambda2;\r\n\t\tvar y = A * cosPhi1 * sinLambda1 + B * cosPhi2 * sinLambda2;\r\n\t\tvar z = A * sinPhi1 + B * sinPhi2;\r\n\r\n\t\tvar phi3 = Math.atan2(z, Math.sqrt(x * x + y * y));\r\n\t\tvar lambda3 = Math.atan2(y, x);\r\n\r\n\t\treturn { latitude: phi3 * $math.DEGREES, longitude: lambda3 * $math.DEGREES };\r\n\t};\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Projection.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this, false);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this, false);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet rectPoint: IPoint = $utils.spritePointToSprite(event.spritePoint, this, this.seriesContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.chart.seriesPointToGeo(rectPoint);\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\t//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\trectangle.x = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel)// + rectangle.pixelWidth / 2);\r\n\t\trectangle.y = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel)// + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.updateRectangle();\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Legend } from \"../Legend\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\nimport { Paper } from \"../../core/rendering/Paper\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: number[][][][];\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tline?: number[][];\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLine?: number[][][];\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLine?: IGeoPoint[];\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: number[];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: number[][];\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: IGeoPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map.\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n\t/**\r\n\t * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n\t *\r\n\t * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n\t * outside the viewport.\r\n\t *\r\n\t * 0.5 will allow half of the map to be outside viewable area.\r\n\t *\r\n\t * @default 0.7\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * A map will start centered on this geographical point.\r\n\t */\r\n\thomeGeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * A map will start zoomed to this level.\r\n\t */\r\n\thomeZoomLevel?: number;\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tzoomStep?: number;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: MapSeries;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _zoomGeoPointReal: IGeoPoint;\r\n\r\n\tprotected _centerGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\tthis.deltaLongitude = 0;\r\n\t\tthis.maxPanOut = 0.7;\r\n\t\tthis.homeZoomLevel = 1;\r\n\t\tthis.zoomStep = 2;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t// so that the map would render in a hidden div too\r\n\t\tthis.minWidth = 10;\r\n\t\tthis.minHeight = 10;\r\n\r\n\t\tthis.events.once(\"inited\", this.handleAllInited, this, false);\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.draggable = true;\r\n\t\tseriesContainer.visible = false;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this, false);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this, false);\r\n\t\tseriesContainer.events.on(\"drag\", this.handleDrag, this, false);\r\n\t\tseriesContainer.zIndex = 0;\r\n\t\tseriesContainer.background.fillOpacity = 0;\r\n\r\n\t\t// Set up events\r\n\t\t//this.events.on(\"validated\", this.updateExtremes, this);\r\n\t\tthis.events.on(\"datavalidated\", this.updateExtremes, this, false);\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.parent = this;\r\n\t\tchartContainer.isMeasured = false;\r\n\t\tchartContainer.zIndex = -1;\r\n\r\n\t\tthis._disposers.push(seriesContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tif (this._mapAnimation) {\r\n\t\t\t\t\tthis._mapAnimation.stop();\r\n\t\t\t\t}\r\n\t\t\t\tthis.updateScaleRatio();\r\n\t\t\t\tthis.zoomToGeoPoint(this._zoomGeoPointReal, this.zoomLevel, true, 0);\r\n\r\n\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this, false);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\tprotected handleAllInited() {\r\n\t\tlet inited = true;\r\n\t\tthis.seriesContainer.visible = true;\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (!series.inited) {\r\n\t\t\t\tinited = false;\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (inited) {\r\n\t\t\tthis.updateExtremes();\r\n\t\t\tthis.goHome(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tregistry.events.once(\"exitframe\", this.handleAllInited, this, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents map to be dragged out of the container area\r\n\t * @ignore\r\n\t */\r\n\tprotected handleDrag() {\r\n\t\t// not good doing it with adapters.\r\n\t\tlet ww = this.seriesWidth * this.zoomLevel * this.scaleRatio;\r\n\t\tlet hh = this.seriesHeight * this.zoomLevel * this.scaleRatio;\r\n\t\tlet x = this.seriesContainer.pixelX;\r\n\t\tlet y = this.seriesContainer.pixelY;\r\n\r\n\t\tlet maxPanOut = this.maxPanOut;\r\n\r\n\t\tlet minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww / 2, -ww * (maxPanOut - 0.5));\r\n\t\tif (x < minX) {\r\n\t\t\tx = minX;\r\n\t\t}\r\n\r\n\t\tlet maxX = Math.max(this.maxWidth * maxPanOut + ww / 2, this.maxWidth + ww * (maxPanOut - 0.5));\r\n\t\tif (x > maxX) {\r\n\t\t\tx = maxX;\r\n\t\t}\r\n\r\n\r\n\t\tlet minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh / 2, -hh * (maxPanOut - 0.5));\r\n\t\tif (y < minY) {\r\n\t\t\ty = minY;\r\n\t\t}\r\n\r\n\t\tlet maxY = Math.max(this.maxHeight * maxPanOut + hh / 2, this.maxHeight + hh * (maxPanOut - 0.5));\r\n\t\tif (y > maxY) {\r\n\t\t\ty = maxY;\r\n\t\t}\r\n\r\n\t\tthis.seriesContainer.moveTo({ x: x, y: y }, undefined, undefined, true);\r\n\r\n\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param mouse wheel behavior\r\n\t * @default zoomX\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Eckert6\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * Orthographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tprojection.deltaLongitude = this.deltaLongitude;\r\n\t\tif (this.setPropertyValue(\"projection\", projection)) {\r\n\t\t\tthis.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tlet pWest = this.west;\r\n\t\tlet pEast = this.east;\r\n\t\tlet pNorth = this.north;\r\n\t\tlet pSouth = this.south;\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\tlet chartContainer: Container = this.chartContainer;\r\n\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif ((this.west > series.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = series.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < series.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = series.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < series.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = series.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > series.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = series.south;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif ($type.isNumber(this.east) && $type.isNumber(this.north)) {\r\n\t\t\t// must reset\r\n\t\t\tthis.projection.centerPoint = { x: 0, y: 0 };\r\n\t\t\tthis.projection.scale = 1;\r\n\r\n\t\t\t// temporary setting deltaLongitude to 0 in order to measure w/h correctly\r\n\t\t\tlet deltaLongitude = this.projection.deltaLongitude;\r\n\t\t\tthis.projection.deltaLongitude = 0;\r\n\r\n\t\t\tlet northPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\t\tlet southPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.south });\r\n\r\n\t\t\tlet westPoint: IPoint = this.projection.convert({ longitude: this.west, latitude: 0 });\r\n\t\t\tlet eastPoint: IPoint = this.projection.convert({ longitude: this.east, latitude: 0 });\r\n\r\n\t\t\tthis.projection.deltaLongitude = deltaLongitude;\r\n\r\n\t\t\tthis.projection.centerPoint = { x: westPoint.x + (eastPoint.x - westPoint.x) / 2, y: northPoint.y + (southPoint.y - northPoint.y) / 2 };\r\n\r\n\t\t\tlet scaleRatio: number;\r\n\r\n\t\t\tlet seriesWidth = eastPoint.x - westPoint.x;\r\n\t\t\tlet seriesHeight = southPoint.y - northPoint.y;\r\n\r\n\t\t\tlet vScale: number = chartContainer.innerWidth / seriesWidth;\r\n\t\t\tlet hScale: number = chartContainer.innerHeight / seriesHeight;\r\n\r\n\t\t\tif (vScale > hScale) {\r\n\t\t\t\tscaleRatio = hScale;\r\n\t\t\t} else {\r\n\t\t\t\tscaleRatio = vScale;\r\n\t\t\t}\r\n\t\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\t\tscaleRatio = 1;\r\n\t\t\t}\r\n\r\n\t\t\tlet projectionScaleChanged = false;\r\n\t\t\tif (this.projection.scale != scaleRatio) {\r\n\t\t\t\tthis.projection.scale = scaleRatio;\r\n\t\t\t\tprojectionScaleChanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.seriesWidth = seriesWidth * scaleRatio;\r\n\t\t\tthis.seriesHeight = seriesHeight * scaleRatio;\r\n\r\n\t\t\tlet northPoint2: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\t\tlet westPoint2: IPoint = this.projection.convert({ longitude: this.west - this.deltaLongitude, latitude: 0 });\r\n\r\n\t\t\tthis._centerGeoPoint = this.projection.invert({ x: westPoint2.x + this.seriesWidth / 2, y: northPoint2.y + this.seriesHeight / 2 });\r\n\r\n\t\t\t//this.seriesContainer.width = this.seriesWidth; // not good, doesn't resize\r\n\t\t\t//this.seriesContainer.height = this.seriesHeight; // not good, doesn't resize\r\n\t\t\tthis.seriesContainer.definedBBox = { x: westPoint2.x, y: northPoint2.y, width: this.seriesWidth, height: this.seriesHeight };\r\n\r\n\t\t\tthis.updateScaleRatio();\r\n\r\n\t\t\tlet seriesContainer: Container = this.seriesContainer;\r\n\r\n\t\t\tseriesContainer.x = chartContainer.pixelWidth / 2;\r\n\t\t\tseriesContainer.y = chartContainer.pixelHeight / 2;\r\n\r\n\t\t\tif (projectionScaleChanged || pWest != this.west || pEast != this.east || pNorth != this.north || pSouth != this.south) {\r\n\t\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t\tseries.invalidate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected updateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / this.seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / this.seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = scaleRatio;\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t});\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param point  Source point\r\n\t * @return Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param point  Source geo-point\r\n\t * @return Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param point  Source point\r\n\t * @return Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param point  Source geo-point\r\n\t * @return Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param point      Center coordinate\r\n\t * @param zoomLevel  Zoom level\r\n\t * @param center     Center on the given coordinate?\r\n\t * @param duration   Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\r\n\t\tif (!point) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._zoomGeoPointReal = point;\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\r\n\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\t\tlet mapPoint = $utils.svgPointToSprite(svgPoint, this);\r\n\r\n\t\tif (center) {\r\n\t\t\tmapPoint = {\r\n\t\t\t\tx: this.maxWidth / 2,\r\n\t\t\t\ty: this.maxHeight / 2\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.zoomDuration;\r\n\t\t}\r\n\r\n\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t[{\r\n\t\t\t\tproperty: \"scale\",\r\n\t\t\t\tto: zoomLevel\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"x\",\r\n\t\t\t\tto: mapPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio - this.pixelPaddingLeft\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"y\",\r\n\t\t\t\tto: mapPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio - this.pixelPaddingTop\r\n\t\t\t}], duration, this.zoomEasing);\r\n\r\n\t\tthis._disposers.push(this._mapAnimation.events.on(\"animationended\", () => {\r\n\t\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t\t}))\r\n\r\n\t\tthis.seriesContainer.validatePosition();\r\n\r\n\t\treturn this._mapAnimation;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param mapObject  Target map object\r\n\t * @param zoomLevel  Zoom level\r\n\t * @param center     Center on the given coordinate?\r\n\t * @param duration   Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t}\r\n\r\n\t\tlet dataItem = mapObject.dataItem;\r\n\r\n\t\tif (dataItem && $type.isNumber(dataItem.zoomLevel)) {\r\n\t\t\tzoomLevel = dataItem.zoomLevel;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\tlet bbox = mapObject.polygon.bbox;\r\n\r\n\t\t\tif (!$type.isNumber(zoomLevel)) {\r\n\t\t\t\tzoomLevel = Math.min(this.seriesWidth / bbox.width, this.seriesHeight / bbox.height);\r\n\t\t\t}\r\n\r\n\t\t\tlet geoPoint: IGeoPoint;\r\n\r\n\t\t\tif (dataItem && $type.hasValue(dataItem.zoomGeoPoint)) {\r\n\t\t\t\tgeoPoint = dataItem.zoomGeoPoint;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// this is more accurate\r\n\t\t\t\tlet polygonPoint = { x: bbox.x + bbox.width / 2, y: bbox.y + bbox.height / 2 };\r\n\t\t\t\tlet seriesPoint = $utils.spritePointToSprite(polygonPoint, mapObject.polygon, mapObject.series);\r\n\r\n\t\t\t\tgeoPoint = this.seriesPointToGeo(seriesPoint);\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint(geoPoint, zoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param north     Latitude of the North-most boundary\r\n\t * @param east      Longitude of the East-most boundary\r\n\t * @param south     Latitude of the South-most boundary\r\n\t * @param west      Longitude of the West-most boundary\r\n\t * @param level     Adjust zoom level\r\n\t * @param center    Center on the given coordinate?\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param geoPoint  Optional center point\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * this.zoomStep, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param geoPoint  Optional center point\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / this.zoomStep, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param shift     Vertical and horizontal shift\r\n\t * @param duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\tvar point = $utils.spritePointToSvg({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 }, this);\r\n\t\treturn this.svgPointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t\tthis._prevZoomLevel = this.zoomLevel;\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @param value  Map center shift\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tif (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\r\n\t\t\tthis.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Map center shift\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n\t *\r\n\t * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n\t * outside the viewport.\r\n\t *\r\n\t * 0.5 will allow half of the map to be outside viewable area.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value  Max pan out\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max pan out\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * The geographical point to center map on when it is first loaded.\r\n\t *\r\n\t * The map will also be centered to this point when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param value  Home geo point\r\n\t */\r\n\tpublic set homeGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setPropertyValue(\"homeGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home geo point\r\n\t */\r\n\tpublic get homeGeoPoint(): IGeoPoint {\r\n\t\treturn this.getPropertyValue(\"homeGeoPoint\");\r\n\t}\r\n\r\n\t/**\r\n\t * The zoom level to put the map in when it is first loaded.\r\n\t *\r\n\t * The map will also be set to this zoom level when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param value  Home zoom level\r\n\t */\r\n\tpublic set homeZoomLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"homeZoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home zoom level\r\n\t */\r\n\tpublic get homeZoomLevel(): number {\r\n\t\treturn this.getPropertyValue(\"homeZoomLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Zoom factor\r\n\t */\r\n\tpublic set zoomStep(value: number) {\r\n\t\tthis.setPropertyValue(\"zoomStep\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomStep(): number {\r\n\t\treturn this.getPropertyValue(\"zoomStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t */\r\n\tprotected invalidateProjection() {\r\n\t\tthis.updateExtremes();\r\n\t\t//\t\tthis.projection.deltaLatitude = this.deltaLatitude;\r\n\t\tthis.projection.deltaLongitude = this.deltaLongitude;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this, false);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\r\n\t\t\tconst name = config[\"geodata\"];\r\n\t\t\t// Check if there's a map loaded by such name\r\n\t\t\tif ($type.hasValue((<any>window)[\"am4geodata_\" + config[\"geodata\"]])) {\r\n\t\t\t\tconfig[\"geodata\"] = (<any>window)[\"am4geodata_\" + config[\"geodata\"]];\r\n\t\t\t}\r\n\t\t\t// Nope. Let's try maybe we got JSON as string?\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconfig[\"geodata\"] = JSON.parse(config[\"geodata\"]);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t// No go again. Error out.\r\n\t\t\t\t\tthrow Error(\"MapChart error: Geodata `\" + name + \"` is not loaded or is incorrect.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n * This function is used to sort element's JSON config properties, so that\r\n * some properties that absolutely need to be processed last, can be put at\r\n * the end.\r\n *\r\n * @ignore Exclude from docs\r\n * @param a  Element 1\r\n * @param b  Element 2\r\n * @return Sorting number\r\n */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Geo point of map center\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic get centerGeoPoint(): IGeoPoint {\r\n\t\treturn this._centerGeoPoint;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Resets the map to its original position and zoom level.\r\n\t */\r\n\tpublic goHome(duration?: number) {\r\n\t\tlet homeGeoPoint = this.homeGeoPoint;\r\n\t\tif (!homeGeoPoint) {\r\n\t\t\thomeGeoPoint = this.centerGeoPoint;\r\n\t\t}\r\n\t\tif (homeGeoPoint) {\r\n\t\t\tthis.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets [[Paper]] instance to use to draw elements.\r\n\t * @ignore\r\n\t * @param paper Paper\r\n\t * @return true if paper was changed, false, if it's the same\r\n\t */\r\n\tpublic setPaper(paper: Paper): boolean {\r\n\t\tif (this.svgContainer) {\r\n\t\t\tthis.svgContainer.hideOverflow = true;\r\n\t\t}\r\n\r\n\t\treturn super.setPaper(paper);\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.parent = this.chartContainer;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/MapChart.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * A reference to the [[MapLine]] object this object is attached to.\r\n\t *\r\n\t * @todo Review if necessary (same as parent)\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\t\tif (this.mapLine) {\r\n\t\t\tlet point: IOrientationPoint = this.mapLine.positionToPoint(this.position);\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t *\r\n\t * @param value  Position within the line (0-1)\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position within the line\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Auto-rotate\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Auto-rotate\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineObject.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $geo from \"./Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * [_lineObjects description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * [_arrow description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _distance: number;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t * @ignore\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\tthis.createLine();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.line.parent = this;\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyline();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.line) {\r\n\t\t\treturn this.line.positionToPoint(position);\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [multiGeoLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param multiGeoLine [description]\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoLine\");\r\n\t}\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t *\r\n\t * Parameter is an array that can hold string `id`'s to of the images, or\r\n\t * references to actual [[MapImage]] objects.\r\n\t *\r\n\t * @param images  Images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[] | string[]) {\r\n\t\t//@todo dispose listeners if previous imagesToConnect exists\r\n\t\tfor (let i = 0, len = images.length; i < len; i++) {\r\n\t\t\tlet image = images[i];\r\n\t\t\tif ($type.isString(image)) {\r\n\t\t\t\tif (this.map.hasKey(image)) {\r\n\t\t\t\t\timage = <MapImage>this.map.getKey(image);\r\n\t\t\t\t\timages[i] = image;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t}, this, false);\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] | string[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\t\t//let multiPoints: IPoint[][] = [];\r\n\t\tlet multiGeoLine: IGeoPoint[][] = this.multiGeoLine || [];\r\n\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: IGeoPoint[] = [];\r\n\t\t\tmultiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tsegment.push({ longitude: (<MapImage>image).longitude, latitude: (<MapImage>image).latitude });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.shortestDistance) {\r\n\t\t\tlet newMultiGeoLine: IGeoPoint[][] = [];\r\n\r\n\t\t\tfor (let i = 0, len = multiGeoLine.length; i < len; i++) {\r\n\t\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\t\tlet newGeoLine: IGeoPoint[] = [];\r\n\r\n\t\t\t\tfor (let p = 1, plen = geoLine.length; p < plen; p++) {\r\n\t\t\t\t\tlet geoPointA: IGeoPoint = geoLine[p - 1];\r\n\t\t\t\t\tlet geoPointB: IGeoPoint = geoLine[p];\r\n\r\n\t\t\t\t\tlet stepCount: number = Math.max(Math.abs(geoPointA.latitude - geoPointB.latitude), Math.abs(geoPointA.longitude - geoPointB.longitude)) * 4;\r\n\t\t\t\t\t//let latitudeStep: number = (geoPointB.latitude - geoPointA.latitude) / stepCount;\r\n\t\t\t\t\t//let longitudeStep: number = (geoPointB.longitude - geoPointA.longitude) / stepCount;\r\n\r\n\t\t\t\t\tfor (let d = 0; d < stepCount; d++) {\r\n\t\t\t\t\t\tlet intermediatePoint = chart.projection.intermediatePoint(geoPointA, geoPointB, d / stepCount);\r\n\r\n\t\t\t\t\t\tif (newGeoLine.length > 0) {\r\n\t\t\t\t\t\t\tlet previousPoint = newGeoLine[newGeoLine.length - 1];\r\n\t\t\t\t\t\t\tif (Math.abs(previousPoint.longitude - intermediatePoint.longitude) > 359) {\r\n\t\t\t\t\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t\t\t\t\t\tnewGeoLine = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnewGeoLine.push(intermediatePoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// add last point to avoid gap\r\n\t\t\t\t\tnewGeoLine.push(geoPointB);\r\n\t\t\t\t}\r\n\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t}\r\n\t\t\tmultiGeoLine = newMultiGeoLine;\r\n\t\t}\r\n\r\n\t\tthis.line.segments = chart.projection.projectGeoLine(multiGeoLine);\r\n\r\n\t\tif (this._arrow) {\r\n\t\t\tthis._arrow.validatePosition();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\tx.validatePosition();\r\n\t\t});\r\n\r\n\t\tthis.handleGlobalScale();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects, the line consists of.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @readonly\r\n\t * @return List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.shouldClone = false;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\t//triangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\treturn this.line.positionToPoint(0.5).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\treturn this.line.positionToPoint(0.5).y;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLine.ts","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSplineEvents;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSpline.ts","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapArcEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyarc();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * `shortestDistance = true` is not supported by `MapArc`.\r\n\t *\r\n\t * Only [[MapLine]] supports it.\r\n\t *\r\n\t * @default false\r\n\t * @param value\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArc.ts","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n *\r\n * @param multiPolygon  Source multi-polygon\r\n * @return Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: number[][][][]): IGeoPoint[][][] {\r\n\tlet multiGeoArea: IGeoPoint[][][] = [];\r\n\r\n\tfor (let i = 0, len = multiPolygon.length; i < len; i++) {\r\n\r\n\t\tlet surface: number[][] = multiPolygon[i][0];\r\n\t\tlet hole: number[][] = multiPolygon[i][1];\r\n\r\n\t\t//let holePoints: IGeoPoint[] = [];\r\n\r\n\t\tmultiGeoArea[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(hole));\r\n\t\t}\r\n\t}\r\n\treturn multiGeoArea;\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n *\r\n * @param multiLine  Source multiline\r\n * @return Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: number[][][]): IGeoPoint[][] {\r\n\tlet multiGeoLine: IGeoPoint[][] = [];\r\n\r\n\tfor (let i = 0, len = multiLine.length; i < len; i++) {\r\n\t\tmultiGeoLine.push(multiPointToGeo(multiLine[i]));\r\n\t}\r\n\treturn multiGeoLine;\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\r\nexport function multiPointToGeo(points: number[][]): IGeoPoint[] {\r\n\tlet geoPoints: IGeoPoint[] = [];\r\n\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\tgeoPoints.push(pointToGeo(points[i]));\r\n\t}\r\n\treturn geoPoints;\r\n}\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n *\r\n * @param point  Source point\r\n * @return Geo-point\r\n */\r\nexport function pointToGeo(point: number[]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapUtils.ts","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t */\r\n\tprotected _polygon: number[][][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiPolygon: number[][][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t */\r\n\tprotected _geoPolygon: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiGeoPolygon: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(mapPolygon);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: number[][][]) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo([polygon]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get polygon(): number[][][] {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo(multiPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: IGeoPoint[][]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): IGeoPoint[][] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.updateAreaExtremes(multiGeoPolygon);\r\n\t\tthis.mapPolygon.multiGeoPolygon = this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param geoPoints  Points of the element\r\n\t */\r\n\tpublic updateAreaExtremes(multiGeoPolygon: IGeoPoint[][][]): void {\r\n\t\tfor (let i = 0, len = multiGeoPolygon.length; i < len; i++) {\r\n\t\t\tlet geoPolygon: IGeoPoint[][] = multiGeoPolygon[i];\r\n\t\t\tlet surface: IGeoPoint[] = geoPolygon[0];\r\n\t\t\tthis.updateExtremes(surface);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.parsingStepDuration = 250; // to avoid some extra redrawing\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc(){\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapPolygons.clear();\r\n\t\t}\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\r\n\r\n\t\t\tif(this.geodata){\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// if data is parsed in chunks, polygon list is corrupted, fix it here\r\n\t\t// !important this should go after super!\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapPolygons.moveValue(dataItem.mapPolygon);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tmapPolygon.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygonSeries.ts","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t */\r\n\tprotected _line: number[][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiLine: number[][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t */\r\n\tprotected _geoLine: IGeoPoint[];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiGeoLine: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapLine(): this[\"_mapLine\"] {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create();\r\n\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param line  Coordinates\r\n\t */\r\n\tpublic set line(line: number[][]) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo([line]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get line(): number[][] {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: IGeoPoint[]) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiGeoLine = [geoLine];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoLine(): IGeoPoint[] {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.updateLineExtremes(multiGeoLine);\r\n\t\tthis.mapLine.multiGeoLine = this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param geoPoints  Points of the element\r\n\t */\r\n\tpublic updateLineExtremes(multiGeoLine: IGeoPoint[][]): void {\r\n\t\tfor (let i = 0, len = multiGeoLine.length; i < len; i++) {\r\n\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\tthis.updateExtremes(geoLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapLines.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (type == \"LineString\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLine: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLine) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLine = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super\r\n\t\t// if data is parsed in chunks, lines list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapLines.moveValue(dataItem.mapLine);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineSeries.ts","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSplineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSplineSeries.ts","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _point: number[];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param point [description]\r\n\t */\r\n\tpublic set point(point: number[]) {\r\n\t\tthis._point = point;\r\n\t\tthis.geoPoint = $mapUtils.pointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get point(): number[] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.updateExtremes([this._geoPoint]);\r\n\r\n\t\tthis.mapImage.latitude = this._geoPoint.latitude;\r\n\t\tthis.mapImage.longitude = this._geoPoint.longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\tif (type == \"Point\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet mapImage = dataItem.mapImage;\r\n\t\t\tthis.mapImages.moveValue(mapImage);\r\n\t\t\tif ($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)) {\r\n\t\t\t\tdataItem.geoPoint = { latitude: mapImage.latitude, longitude: mapImage.longitude }\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImageSeries.ts","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapArcSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArcSeries.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\t//plusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this, false);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this, false);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this, false);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\t//minusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\r\n\t\tlet plusButton = this.plusButton;\r\n\t\tlet minusButton = this.minusButton;\r\n\r\n\t\tlet thumb = this.thumb;\r\n\t\tlet slider = this.slider;\r\n\r\n\t\tplusButton.x = undefined;\r\n\t\tplusButton.y = undefined;\r\n\r\n\t\tminusButton.x = undefined;\r\n\t\tminusButton.y = undefined;\r\n\r\n\t\tthumb.x = undefined;\r\n\t\tthumb.y = undefined;\r\n\r\n\t\tslider.x = undefined;\r\n\t\tslider.y = undefined;\r\n\r\n\t\tplusButton.padding(6, 10, 6, 10);\r\n\t\tminusButton.padding(6, 10, 6, 10);\r\n\r\n\t\tminusButton.label.align = \"center\";\r\n\t\tminusButton.label.valign = \"middle\";\r\n\r\n\t\tplusButton.label.align = \"center\";\r\n\t\tplusButton.label.valign = \"middle\";\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\r\n\t\t\tminusButton.width = percent(100);\r\n\t\t\tminusButton.height = undefined;\r\n\r\n\t\t\tthumb.width = percent(100);\r\n\t\t\tthumb.height = undefined;\r\n\r\n\t\t\tplusButton.width = percent(100);\r\n\t\t\tplusButton.height = undefined;\r\n\r\n\t\t\tslider.width = percent(100);\r\n\t\t\tminusButton.marginTop = 1;\r\n\t\t\tplusButton.marginBottom = 2;\r\n\r\n\t\t\tslider.height = 0;\r\n\r\n\t\t\tminusButton.toFront();\r\n\t\t\tplusButton.toBack();\r\n\r\n\t\t\tthumb.minX = 0;\r\n\t\t\tthumb.maxX = 0;\r\n\t\t\tthumb.minY = 0;\r\n\r\n\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\r\n\t\t\tminusButton.height = percent(100);\r\n\t\t\tminusButton.width = undefined;\r\n\r\n\t\t\tplusButton.height = percent(100);\r\n\t\t\tplusButton.width = undefined;\r\n\r\n\t\t\tthumb.height = percent(100);\r\n\t\t\tthumb.width = undefined;\r\n\r\n\t\t\tthumb.minX = 0;\r\n\t\t\tthumb.minY = 0;\r\n\t\t\tthumb.maxY = 0;\r\n\r\n\t\t\tslider.height = percent(100);\r\n\t\t\tslider.width = 0;\r\n\r\n\t\t\tminusButton.toBack();\r\n\t\t\tplusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false),\r\n\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart, false),\r\n\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude in radians\r\n\t * @param x  X\r\n\t * @param y  Y\r\n\t * @return Geographical coordinates\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn {\r\n\t\t\tlongitude: x,\r\n\t\t\tlatitude: 2 * Math.atan(Math.exp(y)) - Math.PI / 2\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t *\r\n\t * @param lambda  Lambda parameter\r\n\t * @param phi     Phi parameter\r\n\t * @return Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn {\r\n\t\t\tx: lambda,\r\n\t\t\ty: Math.log(Math.tan((Math.PI / 2 + phi) / 2))\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Mercator.ts","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n *\n * ```\n * Copyright 2017 Mike Bostock\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from this\n *    software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\nimport { IPoint } from \"../../../core/defs/IPoint\";\nimport { registry } from \"../../../core/Registry\";\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\n\t/**\n\t * Converts screen coordinates to latitude/longitude.\n\t *\n\t * @param x  X\n\t * @param y  Y\n\t * @return Geographical coordinates in radians\n\t */\n\tpublic unproject(x: number, y: number): IGeoPoint {\n\t\treturn {\n\t\t\tlongitude: x,\n\t\t\tlatitude: 2.5 * Math.atan(Math.exp(0.8 * y)) - 0.625 * Math.PI\n\t\t};\n\t}\n\n\t/**\n\t * Converts geographical coordinates to screen coordinates.\n\t *\n\t * @param lambda  Lambda parameter\n\t * @param phi     Phi parameter\n\t * @return Screen coordinates\n\t */\n\tpublic project(lambda: number, phi: number): IPoint {\n\t\treturn {\n\t\t\tx: lambda,\n\t\t\ty: 1.25 * Math.log(Math.tan(Math.PI / 4 + 0.4 * phi))\n\t\t};\n\t}\n\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Miller.ts","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude.\r\n\t *\r\n\t * @param x  X\r\n\t * @param y  Y\r\n\t * @return Geographical coordinates in radians\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\tlet j = 1 + Math.PI / 2,\r\n\t\t\tk = Math.sqrt(j / 2);\r\n\t\treturn {\r\n\t\t\tlongitude: x * 2 * k / (1 + Math.cos(y *= k)),\r\n\t\t\tlatitude: Math.asin((y + Math.sin(y)) / j)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t *\r\n\t * @param lambda  Lambda parameter\r\n\t * @param phi     Phi parameter\r\n\t * @return Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\tlet k = (1 + Math.PI / 2) * Math.sin(phi);\r\n\t\tfor (let i = 0, delta = Infinity; i < 10 && Math.abs(delta) > 0.00001; i++) {\r\n\t\t\tphi -= delta = (phi + Math.sin(phi) - k) / (1 + Math.cos(phi));\r\n\t\t}\r\n\t\tk = Math.sqrt(2 + Math.PI);\r\n\t\treturn {\r\n\t\t\tx: lambda * (1 + Math.cos(phi)) / k,\r\n\t\t\ty: 2 * phi / k\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Eckert6.ts","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t *\r\n\t * @param lambda  Lambda parameter\r\n\t * @param phi     Phi parameter\r\n\t * @return Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: Math.cos(phi) * Math.sin(lambda), y: Math.sin(phi) };\r\n\t}\r\n\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude - 180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: longitude - 180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\r\n\t\treturn [{ longitude: smallNum + longitude - 180 + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude + 90 }, { longitude: smallNum + longitude - 180 + delta, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180 + delta, east: longitude + delta };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect1)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect2)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0, len = clippedArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = clippedArea[i][0];\r\n\t\t\t//let hole: IGeoPoint[] = clippedArea[i][1];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet len = surface.length;\r\n\r\n\t\t\t\tlet prevPoint = surface[len - 1];\r\n\r\n\t\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\t\tlet point = surface[i];\r\n\r\n\t\t\t\t\tif ($math.round(point.longitude, 4) == $math.round(prevPoint.longitude, 4)) {\r\n\t\t\t\t\t\tlet stepCount = Math.abs((prevPoint.latitude - point.latitude) * 2);\r\n\t\t\t\t\t\tlet extraPoints: IGeoPoint[] = [];\r\n\r\n\t\t\t\t\t\tif (stepCount > 1) {\r\n\t\t\t\t\t\t\tfor (let s = 1; s < stepCount; s++) {\r\n\t\t\t\t\t\t\t\textraPoints.push({ longitude: prevPoint.longitude, latitude: prevPoint.latitude + (point.latitude - prevPoint.latitude) / stepCount * s })\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsurface.splice(i, 0, ...extraPoints);\r\n\t\t\t\t\t\t\ti = i + extraPoints.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Orthographic.ts","import * as m from \"../es2015/maps\";\nwindow.am4maps = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./maps.js\n// module id = null\n// module chunks = "],"sourceRoot":""}